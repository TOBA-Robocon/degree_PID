
degree_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08007d40  08007d40  00008d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080e8  080080e8  0000a1f4  2**0
                  CONTENTS
  4 .ARM          00000008  080080e8  080080e8  000090e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080f0  080080f0  0000a1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080f0  080080f0  000090f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080f4  080080f4  000090f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  080080f8  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1f4  2**0
                  CONTENTS
 10 .bss          00000310  200001f8  200001f8  0000a1f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000508  20000508  0000a1f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea48  00000000  00000000  0000a224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ead  00000000  00000000  00018c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  0001ab20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0b  00000000  00000000  0001b7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c364  00000000  00000000  0001c203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fbde  00000000  00000000  00038567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6e5f  00000000  00000000  00048145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eefa4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045e0  00000000  00000000  000eefe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000f35c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d28 	.word	0x08007d28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08007d28 	.word	0x08007d28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 8000bac:	4b82      	ldr	r3, [pc, #520]	@ (8000db8 <main+0x210>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f005 f895 	bl	8005ce4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bba:	f000 fdd7 	bl	800176c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbe:	f000 f923 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc2:	f000 fadb 	bl	800117c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bc6:	f000 f9d3 	bl	8000f70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bca:	f000 fa25 	bl	8001018 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000bce:	f000 faa5 	bl	800111c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000bd2:	f000 f979 	bl	8000ec8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000bd6:	213c      	movs	r1, #60	@ 0x3c
 8000bd8:	4878      	ldr	r0, [pc, #480]	@ (8000dbc <main+0x214>)
 8000bda:	f002 ff35 	bl	8003a48 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000bde:	2100      	movs	r1, #0
 8000be0:	4877      	ldr	r0, [pc, #476]	@ (8000dc0 <main+0x218>)
 8000be2:	f002 fd9f 	bl	8003724 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000be6:	2104      	movs	r1, #4
 8000be8:	4875      	ldr	r0, [pc, #468]	@ (8000dc0 <main+0x218>)
 8000bea:	f002 fd9b 	bl	8003724 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000bee:	4875      	ldr	r0, [pc, #468]	@ (8000dc4 <main+0x21c>)
 8000bf0:	f002 fcda 	bl	80035a8 <HAL_TIM_Base_Start_IT>

  TIM2 -> CNT = 5000;	//CNTレジスタを5000(ある程度大きい値)にセット
 8000bf4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bfc:	625a      	str	r2, [r3, #36]	@ 0x24

  goal_pulse = 1.66667 * 4 * goal_degree;	//目標角度を目標パルス数に変換
 8000bfe:	4b72      	ldr	r3, [pc, #456]	@ (8000dc8 <main+0x220>)
 8000c00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c04:	a36a      	add	r3, pc, #424	@ (adr r3, 8000db0 <main+0x208>)
 8000c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0a:	f7ff fcf5 	bl	80005f8 <__aeabi_dmul>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	496e      	ldr	r1, [pc, #440]	@ (8000dcc <main+0x224>)
 8000c14:	e9c1 2300 	strd	r2, r3, [r1]
  /*STM32でエンコーダーモードを使うとエンコーダの1パルスが4パルスごとにカウントされてしまうので
   * 一周を2400パルスの360度として変換している
   * 元の計算式は　(2400 / 360) * goal_degree　となる
   */

  HAL_Delay(500);	//0.5秒待つ
 8000c18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c1c:	f000 fe0c 	bl	8001838 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(sec_count_flag == 1){
 8000c20:	4b6b      	ldr	r3, [pc, #428]	@ (8000dd0 <main+0x228>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d1fb      	bne.n	8000c20 <main+0x78>
		  encoder_count = 5000 - (TIM2 -> CNT);//変動したパルスを計算
 8000c28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c2e:	f5c3 539c 	rsb	r3, r3, #4992	@ 0x1380
 8000c32:	3308      	adds	r3, #8
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b67      	ldr	r3, [pc, #412]	@ (8000dd4 <main+0x22c>)
 8000c38:	601a      	str	r2, [r3, #0]
		  error_now = (goal_pulse - encoder_count)/4;//パルスからエラーを計算
 8000c3a:	4b64      	ldr	r3, [pc, #400]	@ (8000dcc <main+0x224>)
 8000c3c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000c40:	4b64      	ldr	r3, [pc, #400]	@ (8000dd4 <main+0x22c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fc6d 	bl	8000524 <__aeabi_i2d>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	4620      	mov	r0, r4
 8000c50:	4629      	mov	r1, r5
 8000c52:	f7ff fb19 	bl	8000288 <__aeabi_dsub>
 8000c56:	4602      	mov	r2, r0
 8000c58:	460b      	mov	r3, r1
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	4b5d      	ldr	r3, [pc, #372]	@ (8000dd8 <main+0x230>)
 8000c64:	f7ff fdf2 	bl	800084c <__aeabi_ddiv>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f7ff ff72 	bl	8000b58 <__aeabi_d2iz>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4a59      	ldr	r2, [pc, #356]	@ (8000ddc <main+0x234>)
 8000c78:	6013      	str	r3, [r2, #0]

		  error_dt = (error_now - error_old)/cycle;//数値微分
 8000c7a:	4b58      	ldr	r3, [pc, #352]	@ (8000ddc <main+0x234>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4b58      	ldr	r3, [pc, #352]	@ (8000de0 <main+0x238>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fc4d 	bl	8000524 <__aeabi_i2d>
 8000c8a:	4b56      	ldr	r3, [pc, #344]	@ (8000de4 <main+0x23c>)
 8000c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c90:	f7ff fddc 	bl	800084c <__aeabi_ddiv>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4953      	ldr	r1, [pc, #332]	@ (8000de8 <main+0x240>)
 8000c9a:	e9c1 2300 	strd	r2, r3, [r1]
		  error_integral = error_integral + (error_now + error_old) / 2;//台形積分
 8000c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8000ddc <main+0x234>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b4f      	ldr	r3, [pc, #316]	@ (8000de0 <main+0x238>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	0fda      	lsrs	r2, r3, #31
 8000caa:	4413      	add	r3, r2
 8000cac:	105b      	asrs	r3, r3, #1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fc38 	bl	8000524 <__aeabi_i2d>
 8000cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8000dec <main+0x244>)
 8000cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cba:	f7ff fae7 	bl	800028c <__adddf3>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	494a      	ldr	r1, [pc, #296]	@ (8000dec <main+0x244>)
 8000cc4:	e9c1 2300 	strd	r2, r3, [r1]

		  motor_PID = kP * error_now + kI * error_integral + kD * error_dt;//PIDを計算
 8000cc8:	4b44      	ldr	r3, [pc, #272]	@ (8000ddc <main+0x234>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	ee07 3a90 	vmov	s15, r3
 8000cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cd4:	4b46      	ldr	r3, [pc, #280]	@ (8000df0 <main+0x248>)
 8000cd6:	edd3 7a00 	vldr	s15, [r3]
 8000cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cde:	ee17 0a90 	vmov	r0, s15
 8000ce2:	f7ff fc31 	bl	8000548 <__aeabi_f2d>
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	4b42      	ldr	r3, [pc, #264]	@ (8000df4 <main+0x24c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fc2a 	bl	8000548 <__aeabi_f2d>
 8000cf4:	4b3d      	ldr	r3, [pc, #244]	@ (8000dec <main+0x244>)
 8000cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfa:	f7ff fc7d 	bl	80005f8 <__aeabi_dmul>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	4620      	mov	r0, r4
 8000d04:	4629      	mov	r1, r5
 8000d06:	f7ff fac1 	bl	800028c <__adddf3>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4614      	mov	r4, r2
 8000d10:	461d      	mov	r5, r3
 8000d12:	4b39      	ldr	r3, [pc, #228]	@ (8000df8 <main+0x250>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fc16 	bl	8000548 <__aeabi_f2d>
 8000d1c:	4b32      	ldr	r3, [pc, #200]	@ (8000de8 <main+0x240>)
 8000d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d22:	f7ff fc69 	bl	80005f8 <__aeabi_dmul>
 8000d26:	4602      	mov	r2, r0
 8000d28:	460b      	mov	r3, r1
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	4629      	mov	r1, r5
 8000d2e:	f7ff faad 	bl	800028c <__adddf3>
 8000d32:	4602      	mov	r2, r0
 8000d34:	460b      	mov	r3, r1
 8000d36:	4610      	mov	r0, r2
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f7ff ff0d 	bl	8000b58 <__aeabi_d2iz>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4a2e      	ldr	r2, [pc, #184]	@ (8000dfc <main+0x254>)
 8000d42:	6013      	str	r3, [r2, #0]

		  if(motor_PID >= 0){
 8000d44:	4b2d      	ldr	r3, [pc, #180]	@ (8000dfc <main+0x254>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db14      	blt.n	8000d76 <main+0x1ce>
			  motor_pwm = constrain(motor_PID, 999, 0);
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000dfc <main+0x254>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fa62 	bl	8001220 <constrain>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4a28      	ldr	r2, [pc, #160]	@ (8000e00 <main+0x258>)
 8000d60:	6013      	str	r3, [r2, #0]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, motor_pwm);
 8000d62:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <main+0x258>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <main+0x218>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	635a      	str	r2, [r3, #52]	@ 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <main+0x218>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2200      	movs	r2, #0
 8000d72:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d74:	e013      	b.n	8000d9e <main+0x1f6>
		  }//モーター正転
		  else{
			  motor_pwm = -constrain(motor_PID, 0, -999);
 8000d76:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <main+0x254>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a22      	ldr	r2, [pc, #136]	@ (8000e04 <main+0x25c>)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fa4e 	bl	8001220 <constrain>
 8000d84:	4603      	mov	r3, r0
 8000d86:	425b      	negs	r3, r3
 8000d88:	4a1d      	ldr	r2, [pc, #116]	@ (8000e00 <main+0x258>)
 8000d8a:	6013      	str	r3, [r2, #0]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <main+0x218>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2200      	movs	r2, #0
 8000d92:	635a      	str	r2, [r3, #52]	@ 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, motor_pwm);
 8000d94:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <main+0x258>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <main+0x218>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	639a      	str	r2, [r3, #56]	@ 0x38
//
//		  printf(" encorder_now:%d", TIM2 -> CNT);

//		  printf(" error:%d \r\n", error_now);

		  error_old = error_now;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <main+0x234>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a0f      	ldr	r2, [pc, #60]	@ (8000de0 <main+0x238>)
 8000da4:	6013      	str	r3, [r2, #0]
		  sec_count_flag = 0;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <main+0x228>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
	  if(sec_count_flag == 1){
 8000dac:	e738      	b.n	8000c20 <main+0x78>
 8000dae:	bf00      	nop
 8000db0:	297396d1 	.word	0x297396d1
 8000db4:	401aaaae 	.word	0x401aaaae
 8000db8:	20000038 	.word	0x20000038
 8000dbc:	20000260 	.word	0x20000260
 8000dc0:	200002ac 	.word	0x200002ac
 8000dc4:	20000214 	.word	0x20000214
 8000dc8:	20000010 	.word	0x20000010
 8000dcc:	200003a8 	.word	0x200003a8
 8000dd0:	200003b0 	.word	0x200003b0
 8000dd4:	20000380 	.word	0x20000380
 8000dd8:	40100000 	.word	0x40100000
 8000ddc:	2000038c 	.word	0x2000038c
 8000de0:	20000390 	.word	0x20000390
 8000de4:	20000018 	.word	0x20000018
 8000de8:	20000398 	.word	0x20000398
 8000dec:	200003a0 	.word	0x200003a0
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000004 	.word	0x20000004
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000384 	.word	0x20000384
 8000e00:	20000388 	.word	0x20000388
 8000e04:	fffffc19 	.word	0xfffffc19

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b096      	sub	sp, #88	@ 0x58
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e12:	2228      	movs	r2, #40	@ 0x28
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f005 f863 	bl	8005ee2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]
 8000e3a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e56:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000e58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000e5c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 ffc2 	bl	8001dec <HAL_RCC_OscConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e6e:	f000 fa09 	bl	8001284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e72:	230f      	movs	r3, #15
 8000e74:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e76:	2302      	movs	r3, #2
 8000e78:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 ffea 	bl	8002e68 <HAL_RCC_ClockConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e9a:	f000 f9f3 	bl	8001284 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000e9e:	f241 0301 	movw	r3, #4097	@ 0x1001
 8000ea2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 f9fc 	bl	80032ac <HAL_RCCEx_PeriphCLKConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000eba:	f000 f9e3 	bl	8001284 <Error_Handler>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3758      	adds	r7, #88	@ 0x58
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ee6:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <MX_TIM1_Init+0xa0>)
 8000ee8:	4a20      	ldr	r2, [pc, #128]	@ (8000f6c <MX_TIM1_Init+0xa4>)
 8000eea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400 -1;
 8000eec:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <MX_TIM1_Init+0xa0>)
 8000eee:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000ef2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <MX_TIM1_Init+0xa0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	@ (8000f68 <MX_TIM1_Init+0xa0>)
 8000efc:	2209      	movs	r2, #9
 8000efe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <MX_TIM1_Init+0xa0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <MX_TIM1_Init+0xa0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <MX_TIM1_Init+0xa0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f12:	4815      	ldr	r0, [pc, #84]	@ (8000f68 <MX_TIM1_Init+0xa0>)
 8000f14:	f002 faf0 	bl	80034f8 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f1e:	f000 f9b1 	bl	8001284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480e      	ldr	r0, [pc, #56]	@ (8000f68 <MX_TIM1_Init+0xa0>)
 8000f30:	f003 f82e 	bl	8003f90 <HAL_TIM_ConfigClockSource>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f3a:	f000 f9a3 	bl	8001284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	@ (8000f68 <MX_TIM1_Init+0xa0>)
 8000f50:	f003 fcfa 	bl	8004948 <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f5a:	f000 f993 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000214 	.word	0x20000214
 8000f6c:	40012c00 	.word	0x40012c00

08000f70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	@ 0x30
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	2224      	movs	r2, #36	@ 0x24
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f004 ffaf 	bl	8005ee2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <MX_TIM2_Init+0xa4>)
 8000f90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <MX_TIM2_Init+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001014 <MX_TIM2_Init+0xa4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <MX_TIM2_Init+0xa4>)
 8000fa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fa8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <MX_TIM2_Init+0xa4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <MX_TIM2_Init+0xa4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <MX_TIM2_Init+0xa4>)
 8000fe2:	f002 fc8b 	bl	80038fc <HAL_TIM_Encoder_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000fec:	f000 f94a 	bl	8001284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <MX_TIM2_Init+0xa4>)
 8000ffe:	f003 fca3 	bl	8004948 <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001008:	f000 f93c 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	3730      	adds	r7, #48	@ 0x30
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000260 	.word	0x20000260

08001018 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	@ 0x38
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001038:	463b      	mov	r3, r7
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
 8001046:	615a      	str	r2, [r3, #20]
 8001048:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800104a:	4b32      	ldr	r3, [pc, #200]	@ (8001114 <MX_TIM3_Init+0xfc>)
 800104c:	4a32      	ldr	r2, [pc, #200]	@ (8001118 <MX_TIM3_Init+0x100>)
 800104e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 8001050:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <MX_TIM3_Init+0xfc>)
 8001052:	2209      	movs	r2, #9
 8001054:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b2f      	ldr	r3, [pc, #188]	@ (8001114 <MX_TIM3_Init+0xfc>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800105c:	4b2d      	ldr	r3, [pc, #180]	@ (8001114 <MX_TIM3_Init+0xfc>)
 800105e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001062:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001064:	4b2b      	ldr	r3, [pc, #172]	@ (8001114 <MX_TIM3_Init+0xfc>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106a:	4b2a      	ldr	r3, [pc, #168]	@ (8001114 <MX_TIM3_Init+0xfc>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001070:	4828      	ldr	r0, [pc, #160]	@ (8001114 <MX_TIM3_Init+0xfc>)
 8001072:	f002 fa41 	bl	80034f8 <HAL_TIM_Base_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800107c:	f000 f902 	bl	8001284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001080:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001084:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001086:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800108a:	4619      	mov	r1, r3
 800108c:	4821      	ldr	r0, [pc, #132]	@ (8001114 <MX_TIM3_Init+0xfc>)
 800108e:	f002 ff7f 	bl	8003f90 <HAL_TIM_ConfigClockSource>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001098:	f000 f8f4 	bl	8001284 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800109c:	481d      	ldr	r0, [pc, #116]	@ (8001114 <MX_TIM3_Init+0xfc>)
 800109e:	f002 fadf 	bl	8003660 <HAL_TIM_PWM_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80010a8:	f000 f8ec 	bl	8001284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	4816      	ldr	r0, [pc, #88]	@ (8001114 <MX_TIM3_Init+0xfc>)
 80010bc:	f003 fc44 	bl	8004948 <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80010c6:	f000 f8dd 	bl	8001284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ca:	2360      	movs	r3, #96	@ 0x60
 80010cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	4619      	mov	r1, r3
 80010e0:	480c      	ldr	r0, [pc, #48]	@ (8001114 <MX_TIM3_Init+0xfc>)
 80010e2:	f002 fe41 	bl	8003d68 <HAL_TIM_PWM_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80010ec:	f000 f8ca 	bl	8001284 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	2204      	movs	r2, #4
 80010f4:	4619      	mov	r1, r3
 80010f6:	4807      	ldr	r0, [pc, #28]	@ (8001114 <MX_TIM3_Init+0xfc>)
 80010f8:	f002 fe36 	bl	8003d68 <HAL_TIM_PWM_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001102:	f000 f8bf 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001106:	4803      	ldr	r0, [pc, #12]	@ (8001114 <MX_TIM3_Init+0xfc>)
 8001108:	f000 f978 	bl	80013fc <HAL_TIM_MspPostInit>

}
 800110c:	bf00      	nop
 800110e:	3738      	adds	r7, #56	@ 0x38
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200002ac 	.word	0x200002ac
 8001118:	40000400 	.word	0x40000400

0800111c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <MX_USART1_UART_Init+0x54>)
 8001122:	4a14      	ldr	r2, [pc, #80]	@ (8001174 <MX_USART1_UART_Init+0x58>)
 8001124:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8001126:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <MX_USART1_UART_Init+0x54>)
 8001128:	4a13      	ldr	r2, [pc, #76]	@ (8001178 <MX_USART1_UART_Init+0x5c>)
 800112a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800112c:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <MX_USART1_UART_Init+0x54>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <MX_USART1_UART_Init+0x54>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001138:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <MX_USART1_UART_Init+0x54>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <MX_USART1_UART_Init+0x54>)
 8001140:	220c      	movs	r2, #12
 8001142:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <MX_USART1_UART_Init+0x54>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_USART1_UART_Init+0x54>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <MX_USART1_UART_Init+0x54>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_USART1_UART_Init+0x54>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <MX_USART1_UART_Init+0x54>)
 800115e:	f003 fc7f 	bl	8004a60 <HAL_UART_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001168:	f000 f88c 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200002f8 	.word	0x200002f8
 8001174:	40013800 	.word	0x40013800
 8001178:	0003d090 	.word	0x0003d090

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <MX_GPIO_Init+0x78>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <MX_GPIO_Init+0x78>)
 8001198:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800119c:	6153      	str	r3, [r2, #20]
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <MX_GPIO_Init+0x78>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <MX_GPIO_Init+0x78>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4a11      	ldr	r2, [pc, #68]	@ (80011f4 <MX_GPIO_Init+0x78>)
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b4:	6153      	str	r3, [r2, #20]
 80011b6:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <MX_GPIO_Init+0x78>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2120      	movs	r1, #32
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ca:	f000 fddd 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80011ce:	2320      	movs	r3, #32
 80011d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e8:	f000 fc5c 	bl	8001aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000

080011f8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)ptr,len,10);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	b29a      	uxth	r2, r3
 8001208:	230a      	movs	r3, #10
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	4803      	ldr	r0, [pc, #12]	@ (800121c <_write+0x24>)
 800120e:	f003 fc75 	bl	8004afc <HAL_UART_Transmit>
  return len;
 8001212:	687b      	ldr	r3, [r7, #4]
}//PrintfをUART出力として使う
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200002f8 	.word	0x200002f8

08001220 <constrain>:

int constrain(int num, int max, int mini){
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
	if(num > max){
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	429a      	cmp	r2, r3
 8001232:	dd01      	ble.n	8001238 <constrain+0x18>
		return max;
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	e006      	b.n	8001246 <constrain+0x26>
	}
	else if(num < mini){
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	429a      	cmp	r2, r3
 800123e:	da01      	bge.n	8001244 <constrain+0x24>
		return mini;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	e000      	b.n	8001246 <constrain+0x26>
	}

	return num;
 8001244:	68fb      	ldr	r3, [r7, #12]
}//数値の制限
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    if (htim == &htim1){
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a07      	ldr	r2, [pc, #28]	@ (800127c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d107      	bne.n	8001274 <HAL_TIM_PeriodElapsedCallback+0x20>
    	sec_count_flag = 1;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800126a:	2120      	movs	r1, #32
 800126c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001270:	f000 fda2 	bl	8001db8 <HAL_GPIO_TogglePin>
    }
}//TIM1割り込みハンドラ
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000214 	.word	0x20000214
 8001280:	200003b0 	.word	0x200003b0

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <Error_Handler+0x8>

08001290 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <HAL_MspInit+0x44>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <HAL_MspInit+0x44>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6193      	str	r3, [r2, #24]
 80012a2:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <HAL_MspInit+0x44>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <HAL_MspInit+0x44>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <HAL_MspInit+0x44>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_MspInit+0x44>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000

080012d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a22      	ldr	r2, [pc, #136]	@ (8001370 <HAL_TIM_Base_MspInit+0x98>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d12c      	bne.n	8001344 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ea:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <HAL_TIM_Base_MspInit+0x9c>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	4a21      	ldr	r2, [pc, #132]	@ (8001374 <HAL_TIM_Base_MspInit+0x9c>)
 80012f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012f4:	6193      	str	r3, [r2, #24]
 80012f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <HAL_TIM_Base_MspInit+0x9c>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2018      	movs	r0, #24
 8001308:	f000 fb95 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800130c:	2018      	movs	r0, #24
 800130e:	f000 fbae 	bl	8001a6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2019      	movs	r0, #25
 8001318:	f000 fb8d 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800131c:	2019      	movs	r0, #25
 800131e:	f000 fba6 	bl	8001a6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	201a      	movs	r0, #26
 8001328:	f000 fb85 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800132c:	201a      	movs	r0, #26
 800132e:	f000 fb9e 	bl	8001a6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	201b      	movs	r0, #27
 8001338:	f000 fb7d 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800133c:	201b      	movs	r0, #27
 800133e:	f000 fb96 	bl	8001a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001342:	e010      	b.n	8001366 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <HAL_TIM_Base_MspInit+0xa0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d10b      	bne.n	8001366 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HAL_TIM_Base_MspInit+0x9c>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a08      	ldr	r2, [pc, #32]	@ (8001374 <HAL_TIM_Base_MspInit+0x9c>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_TIM_Base_MspInit+0x9c>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40012c00 	.word	0x40012c00
 8001374:	40021000 	.word	0x40021000
 8001378:	40000400 	.word	0x40000400

0800137c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800139c:	d128      	bne.n	80013f0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a15      	ldr	r2, [pc, #84]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4a0f      	ldr	r2, [pc, #60]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c0:	6153      	str	r3, [r2, #20]
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013ce:	2303      	movs	r3, #3
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013de:	2301      	movs	r3, #1
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ec:	f000 fb5a 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	@ 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a11      	ldr	r2, [pc, #68]	@ (8001460 <HAL_TIM_MspPostInit+0x64>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d11c      	bne.n	8001458 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <HAL_TIM_MspPostInit+0x68>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	4a10      	ldr	r2, [pc, #64]	@ (8001464 <HAL_TIM_MspPostInit+0x68>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001428:	6153      	str	r3, [r2, #20]
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <HAL_TIM_MspPostInit+0x68>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001436:	2350      	movs	r3, #80	@ 0x50
 8001438:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001446:	2302      	movs	r3, #2
 8001448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	4619      	mov	r1, r3
 8001450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001454:	f000 fb26 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001458:	bf00      	nop
 800145a:	3720      	adds	r7, #32
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40000400 	.word	0x40000400
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	@ 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a18      	ldr	r2, [pc, #96]	@ (80014e8 <HAL_UART_MspInit+0x80>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d129      	bne.n	80014de <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800148a:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <HAL_UART_MspInit+0x84>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a17      	ldr	r2, [pc, #92]	@ (80014ec <HAL_UART_MspInit+0x84>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001494:	6193      	str	r3, [r2, #24]
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <HAL_UART_MspInit+0x84>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_UART_MspInit+0x84>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	4a11      	ldr	r2, [pc, #68]	@ (80014ec <HAL_UART_MspInit+0x84>)
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ac:	6153      	str	r3, [r2, #20]
 80014ae:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_UART_MspInit+0x84>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014cc:	2307      	movs	r3, #7
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014da:	f000 fae3 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	@ 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40013800 	.word	0x40013800
 80014ec:	40021000 	.word	0x40021000

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <NMI_Handler+0x4>

080014f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <MemManage_Handler+0x4>

08001508 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <UsageFault_Handler+0x4>

08001518 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001546:	f000 f957 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001556:	f002 fb05 	bl	8003b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000214 	.word	0x20000214

08001564 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800156a:	f002 fafb 	bl	8003b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000214 	.word	0x20000214

08001578 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800157e:	f002 faf1 	bl	8003b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000214 	.word	0x20000214

0800158c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <TIM1_CC_IRQHandler+0x10>)
 8001592:	f002 fae7 	bl	8003b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000214 	.word	0x20000214

080015a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return 1;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_kill>:

int _kill(int pid, int sig)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ba:	f004 fce5 	bl	8005f88 <__errno>
 80015be:	4603      	mov	r3, r0
 80015c0:	2216      	movs	r2, #22
 80015c2:	601a      	str	r2, [r3, #0]
  return -1;
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_exit>:

void _exit (int status)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ffe7 	bl	80015b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015e2:	bf00      	nop
 80015e4:	e7fd      	b.n	80015e2 <_exit+0x12>

080015e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	e00a      	b.n	800160e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f8:	f3af 8000 	nop.w
 80015fc:	4601      	mov	r1, r0
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	60ba      	str	r2, [r7, #8]
 8001604:	b2ca      	uxtb	r2, r1
 8001606:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	dbf0      	blt.n	80015f8 <_read+0x12>
  }

  return len;
 8001616:	687b      	ldr	r3, [r7, #4]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001648:	605a      	str	r2, [r3, #4]
  return 0;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_isatty>:

int _isatty(int file)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a14      	ldr	r2, [pc, #80]	@ (80016e4 <_sbrk+0x5c>)
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <_sbrk+0x60>)
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800169c:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <_sbrk+0x64>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <_sbrk+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d207      	bcs.n	80016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b8:	f004 fc66 	bl	8005f88 <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	220c      	movs	r2, #12
 80016c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e009      	b.n	80016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <_sbrk+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20003000 	.word	0x20003000
 80016e8:	00000400 	.word	0x00000400
 80016ec:	200003b4 	.word	0x200003b4
 80016f0:	20000508 	.word	0x20000508

080016f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001718:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001750 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800171c:	f7ff ffea 	bl	80016f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001720:	480c      	ldr	r0, [pc, #48]	@ (8001754 <LoopForever+0x6>)
  ldr r1, =_edata
 8001722:	490d      	ldr	r1, [pc, #52]	@ (8001758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001724:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <LoopForever+0xe>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001738:	4c0a      	ldr	r4, [pc, #40]	@ (8001764 <LoopForever+0x16>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001746:	f004 fc25 	bl	8005f94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800174a:	f7ff fa2d 	bl	8000ba8 <main>

0800174e <LoopForever>:

LoopForever:
    b LoopForever
 800174e:	e7fe      	b.n	800174e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001750:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800175c:	080080f8 	.word	0x080080f8
  ldr r2, =_sbss
 8001760:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001764:	20000508 	.word	0x20000508

08001768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC1_2_IRQHandler>
	...

0800176c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_Init+0x28>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a07      	ldr	r2, [pc, #28]	@ (8001794 <HAL_Init+0x28>)
 8001776:	f043 0310 	orr.w	r3, r3, #16
 800177a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f000 f94f 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001782:	200f      	movs	r0, #15
 8001784:	f000 f808 	bl	8001798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001788:	f7ff fd82 	bl	8001290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40022000 	.word	0x40022000

08001798 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <HAL_InitTick+0x54>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_InitTick+0x58>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f967 	bl	8001a8a <HAL_SYSTICK_Config>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00e      	b.n	80017e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d80a      	bhi.n	80017e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f000 f92f 	bl	8001a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d8:	4a06      	ldr	r2, [pc, #24]	@ (80017f4 <HAL_InitTick+0x5c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000020 	.word	0x20000020
 80017f0:	20000028 	.word	0x20000028
 80017f4:	20000024 	.word	0x20000024

080017f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	@ (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000028 	.word	0x20000028
 800181c:	200003b8 	.word	0x200003b8

08001820 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;  
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200003b8 	.word	0x200003b8

08001838 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff ffee 	bl	8001820 <HAL_GetTick>
 8001844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001850:	d005      	beq.n	800185e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001852:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <HAL_Delay+0x44>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800185e:	bf00      	nop
 8001860:	f7ff ffde 	bl	8001820 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f7      	bhi.n	8001860 <HAL_Delay+0x28>
  {
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000028 	.word	0x20000028

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	@ (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	@ (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	@ (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	@ 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	@ 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f7ff ff8e 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	@ (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff29 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff3e 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff8e 	bl	8001974 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5d 	bl	8001920 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff31 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffa2 	bl	80019dc <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab2:	e14e      	b.n	8001d52 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8140 	beq.w	8001d4c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d005      	beq.n	8001ae4 <HAL_GPIO_Init+0x40>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d130      	bne.n	8001b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	f003 0201 	and.w	r2, r3, #1
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d017      	beq.n	8001b82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d123      	bne.n	8001bd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	08da      	lsrs	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3208      	adds	r2, #8
 8001b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	08da      	lsrs	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3208      	adds	r2, #8
 8001bd0:	6939      	ldr	r1, [r7, #16]
 8001bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0203 	and.w	r2, r3, #3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 809a 	beq.w	8001d4c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c18:	4b55      	ldr	r3, [pc, #340]	@ (8001d70 <HAL_GPIO_Init+0x2cc>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a54      	ldr	r2, [pc, #336]	@ (8001d70 <HAL_GPIO_Init+0x2cc>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b52      	ldr	r3, [pc, #328]	@ (8001d70 <HAL_GPIO_Init+0x2cc>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c30:	4a50      	ldr	r2, [pc, #320]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c5a:	d013      	beq.n	8001c84 <HAL_GPIO_Init+0x1e0>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a46      	ldr	r2, [pc, #280]	@ (8001d78 <HAL_GPIO_Init+0x2d4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d00d      	beq.n	8001c80 <HAL_GPIO_Init+0x1dc>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a45      	ldr	r2, [pc, #276]	@ (8001d7c <HAL_GPIO_Init+0x2d8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d007      	beq.n	8001c7c <HAL_GPIO_Init+0x1d8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a44      	ldr	r2, [pc, #272]	@ (8001d80 <HAL_GPIO_Init+0x2dc>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d101      	bne.n	8001c78 <HAL_GPIO_Init+0x1d4>
 8001c74:	2303      	movs	r3, #3
 8001c76:	e006      	b.n	8001c86 <HAL_GPIO_Init+0x1e2>
 8001c78:	2305      	movs	r3, #5
 8001c7a:	e004      	b.n	8001c86 <HAL_GPIO_Init+0x1e2>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e002      	b.n	8001c86 <HAL_GPIO_Init+0x1e2>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_GPIO_Init+0x1e2>
 8001c84:	2300      	movs	r3, #0
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	f002 0203 	and.w	r2, r2, #3
 8001c8c:	0092      	lsls	r2, r2, #2
 8001c8e:	4093      	lsls	r3, r2
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c96:	4937      	ldr	r1, [pc, #220]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca4:	4b37      	ldr	r3, [pc, #220]	@ (8001d84 <HAL_GPIO_Init+0x2e0>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cc8:	4a2e      	ldr	r2, [pc, #184]	@ (8001d84 <HAL_GPIO_Init+0x2e0>)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cce:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <HAL_GPIO_Init+0x2e0>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cf2:	4a24      	ldr	r2, [pc, #144]	@ (8001d84 <HAL_GPIO_Init+0x2e0>)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf8:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <HAL_GPIO_Init+0x2e0>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d1c:	4a19      	ldr	r2, [pc, #100]	@ (8001d84 <HAL_GPIO_Init+0x2e0>)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_GPIO_Init+0x2e0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d46:	4a0f      	ldr	r2, [pc, #60]	@ (8001d84 <HAL_GPIO_Init+0x2e0>)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f47f aea9 	bne.w	8001ab4 <HAL_GPIO_Init+0x10>
  }
}
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
 8001d66:	371c      	adds	r7, #28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40010000 	.word	0x40010000
 8001d78:	48000400 	.word	0x48000400
 8001d7c:	48000800 	.word	0x48000800
 8001d80:	48000c00 	.word	0x48000c00
 8001d84:	40010400 	.word	0x40010400

08001d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001da4:	e002      	b.n	8001dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	041a      	lsls	r2, r3, #16
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	43d9      	mvns	r1, r3
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	400b      	ands	r3, r1
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dfc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f001 b823 	b.w	8002e58 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 817d 	beq.w	8002122 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e28:	4bbc      	ldr	r3, [pc, #752]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d00c      	beq.n	8001e4e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e34:	4bb9      	ldr	r3, [pc, #740]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d15c      	bne.n	8001efa <HAL_RCC_OscConfig+0x10e>
 8001e40:	4bb6      	ldr	r3, [pc, #728]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e4c:	d155      	bne.n	8001efa <HAL_RCC_OscConfig+0x10e>
 8001e4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e52:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e62:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	095b      	lsrs	r3, r3, #5
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d102      	bne.n	8001e80 <HAL_RCC_OscConfig+0x94>
 8001e7a:	4ba8      	ldr	r3, [pc, #672]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	e015      	b.n	8001eac <HAL_RCC_OscConfig+0xc0>
 8001e80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e84:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001e94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e98:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001e9c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001ea8:	4b9c      	ldr	r3, [pc, #624]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001eb0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001eb4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001eb8:	fa92 f2a2 	rbit	r2, r2
 8001ebc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001ec0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001ec4:	fab2 f282 	clz	r2, r2
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f042 0220 	orr.w	r2, r2, #32
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f002 021f 	and.w	r2, r2, #31
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 811f 	beq.w	8002120 <HAL_RCC_OscConfig+0x334>
 8001ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 8116 	bne.w	8002120 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f000 bfaf 	b.w	8002e58 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x12e>
 8001f0c:	4b83      	ldr	r3, [pc, #524]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a82      	ldr	r2, [pc, #520]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	e036      	b.n	8001f88 <HAL_RCC_OscConfig+0x19c>
 8001f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x158>
 8001f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a7b      	ldr	r2, [pc, #492]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b79      	ldr	r3, [pc, #484]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a78      	ldr	r2, [pc, #480]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e021      	b.n	8001f88 <HAL_RCC_OscConfig+0x19c>
 8001f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x184>
 8001f56:	4b71      	ldr	r3, [pc, #452]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a70      	ldr	r2, [pc, #448]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	4b6e      	ldr	r3, [pc, #440]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a6d      	ldr	r2, [pc, #436]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCC_OscConfig+0x19c>
 8001f70:	4b6a      	ldr	r3, [pc, #424]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a69      	ldr	r2, [pc, #420]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	4b67      	ldr	r3, [pc, #412]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a66      	ldr	r2, [pc, #408]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f86:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f88:	4b64      	ldr	r3, [pc, #400]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8c:	f023 020f 	bic.w	r2, r3, #15
 8001f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	495f      	ldr	r1, [pc, #380]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d059      	beq.n	8002066 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fc35 	bl	8001820 <HAL_GetTick>
 8001fb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff fc30 	bl	8001820 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b64      	cmp	r3, #100	@ 0x64
 8001fca:	d902      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	f000 bf43 	b.w	8002e58 <HAL_RCC_OscConfig+0x106c>
 8001fd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fd6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001fe6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d102      	bne.n	8002004 <HAL_RCC_OscConfig+0x218>
 8001ffe:	4b47      	ldr	r3, [pc, #284]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	e015      	b.n	8002030 <HAL_RCC_OscConfig+0x244>
 8002004:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002008:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002018:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800201c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002020:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800202c:	4b3b      	ldr	r3, [pc, #236]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 800202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002030:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002034:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002038:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800203c:	fa92 f2a2 	rbit	r2, r2
 8002040:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002044:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002048:	fab2 f282 	clz	r2, r2
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	f042 0220 	orr.w	r2, r2, #32
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f002 021f 	and.w	r2, r2, #31
 8002058:	2101      	movs	r1, #1
 800205a:	fa01 f202 	lsl.w	r2, r1, r2
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ab      	beq.n	8001fbc <HAL_RCC_OscConfig+0x1d0>
 8002064:	e05d      	b.n	8002122 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7ff fbdb 	bl	8001820 <HAL_GetTick>
 800206a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002070:	f7ff fbd6 	bl	8001820 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b64      	cmp	r3, #100	@ 0x64
 800207e:	d902      	bls.n	8002086 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	f000 bee9 	b.w	8002e58 <HAL_RCC_OscConfig+0x106c>
 8002086:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800208a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800209a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d102      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2cc>
 80020b2:	4b1a      	ldr	r3, [pc, #104]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	e015      	b.n	80020e4 <HAL_RCC_OscConfig+0x2f8>
 80020b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020bc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80020cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020d0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80020d4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80020e0:	4b0e      	ldr	r3, [pc, #56]	@ (800211c <HAL_RCC_OscConfig+0x330>)
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020e8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80020ec:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80020f0:	fa92 f2a2 	rbit	r2, r2
 80020f4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80020f8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80020fc:	fab2 f282 	clz	r2, r2
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	f042 0220 	orr.w	r2, r2, #32
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	f002 021f 	and.w	r2, r2, #31
 800210c:	2101      	movs	r1, #1
 800210e:	fa01 f202 	lsl.w	r2, r1, r2
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ab      	bne.n	8002070 <HAL_RCC_OscConfig+0x284>
 8002118:	e003      	b.n	8002122 <HAL_RCC_OscConfig+0x336>
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002126:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 817d 	beq.w	8002432 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002138:	4ba6      	ldr	r3, [pc, #664]	@ (80023d4 <HAL_RCC_OscConfig+0x5e8>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00b      	beq.n	800215c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002144:	4ba3      	ldr	r3, [pc, #652]	@ (80023d4 <HAL_RCC_OscConfig+0x5e8>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	d172      	bne.n	8002236 <HAL_RCC_OscConfig+0x44a>
 8002150:	4ba0      	ldr	r3, [pc, #640]	@ (80023d4 <HAL_RCC_OscConfig+0x5e8>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d16c      	bne.n	8002236 <HAL_RCC_OscConfig+0x44a>
 800215c:	2302      	movs	r3, #2
 800215e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800216e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <HAL_RCC_OscConfig+0x3a0>
 8002186:	4b93      	ldr	r3, [pc, #588]	@ (80023d4 <HAL_RCC_OscConfig+0x5e8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	e013      	b.n	80021b4 <HAL_RCC_OscConfig+0x3c8>
 800218c:	2302      	movs	r3, #2
 800218e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800219e:	2302      	movs	r3, #2
 80021a0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80021a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80021b0:	4b88      	ldr	r3, [pc, #544]	@ (80023d4 <HAL_RCC_OscConfig+0x5e8>)
 80021b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b4:	2202      	movs	r2, #2
 80021b6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80021ba:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80021be:	fa92 f2a2 	rbit	r2, r2
 80021c2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80021c6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80021ca:	fab2 f282 	clz	r2, r2
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	f042 0220 	orr.w	r2, r2, #32
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	f002 021f 	and.w	r2, r2, #31
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f202 	lsl.w	r2, r1, r2
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCC_OscConfig+0x410>
 80021e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d002      	beq.n	80021fc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	f000 be2e 	b.w	8002e58 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fc:	4b75      	ldr	r3, [pc, #468]	@ (80023d4 <HAL_RCC_OscConfig+0x5e8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	21f8      	movs	r1, #248	@ 0xf8
 8002212:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800221a:	fa91 f1a1 	rbit	r1, r1
 800221e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002222:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002226:	fab1 f181 	clz	r1, r1
 800222a:	b2c9      	uxtb	r1, r1
 800222c:	408b      	lsls	r3, r1
 800222e:	4969      	ldr	r1, [pc, #420]	@ (80023d4 <HAL_RCC_OscConfig+0x5e8>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002234:	e0fd      	b.n	8002432 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8088 	beq.w	8002358 <HAL_RCC_OscConfig+0x56c>
 8002248:	2301      	movs	r3, #1
 800224a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800225a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002268:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	461a      	mov	r2, r3
 8002270:	2301      	movs	r3, #1
 8002272:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff fad4 	bl	8001820 <HAL_GetTick>
 8002278:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227e:	f7ff facf 	bl	8001820 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d902      	bls.n	8002294 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	f000 bde2 	b.w	8002e58 <HAL_RCC_OscConfig+0x106c>
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80022a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d102      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4d8>
 80022be:	4b45      	ldr	r3, [pc, #276]	@ (80023d4 <HAL_RCC_OscConfig+0x5e8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	e013      	b.n	80022ec <HAL_RCC_OscConfig+0x500>
 80022c4:	2302      	movs	r3, #2
 80022c6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80022d6:	2302      	movs	r3, #2
 80022d8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80022dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80022e8:	4b3a      	ldr	r3, [pc, #232]	@ (80023d4 <HAL_RCC_OscConfig+0x5e8>)
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	2202      	movs	r2, #2
 80022ee:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80022f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80022f6:	fa92 f2a2 	rbit	r2, r2
 80022fa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80022fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002302:	fab2 f282 	clz	r2, r2
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	f042 0220 	orr.w	r2, r2, #32
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	f002 021f 	and.w	r2, r2, #31
 8002312:	2101      	movs	r1, #1
 8002314:	fa01 f202 	lsl.w	r2, r1, r2
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0af      	beq.n	800227e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231e:	4b2d      	ldr	r3, [pc, #180]	@ (80023d4 <HAL_RCC_OscConfig+0x5e8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	21f8      	movs	r1, #248	@ 0xf8
 8002334:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800233c:	fa91 f1a1 	rbit	r1, r1
 8002340:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002344:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002348:	fab1 f181 	clz	r1, r1
 800234c:	b2c9      	uxtb	r1, r1
 800234e:	408b      	lsls	r3, r1
 8002350:	4920      	ldr	r1, [pc, #128]	@ (80023d4 <HAL_RCC_OscConfig+0x5e8>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
 8002356:	e06c      	b.n	8002432 <HAL_RCC_OscConfig+0x646>
 8002358:	2301      	movs	r3, #1
 800235a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800236a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002378:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	461a      	mov	r2, r3
 8002380:	2300      	movs	r3, #0
 8002382:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7ff fa4c 	bl	8001820 <HAL_GetTick>
 8002388:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800238e:	f7ff fa47 	bl	8001820 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d902      	bls.n	80023a4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	f000 bd5a 	b.w	8002e58 <HAL_RCC_OscConfig+0x106c>
 80023a4:	2302      	movs	r3, #2
 80023a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80023b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d104      	bne.n	80023d8 <HAL_RCC_OscConfig+0x5ec>
 80023ce:	4b01      	ldr	r3, [pc, #4]	@ (80023d4 <HAL_RCC_OscConfig+0x5e8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	e015      	b.n	8002400 <HAL_RCC_OscConfig+0x614>
 80023d4:	40021000 	.word	0x40021000
 80023d8:	2302      	movs	r3, #2
 80023da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80023ea:	2302      	movs	r3, #2
 80023ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80023f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80023fc:	4bc8      	ldr	r3, [pc, #800]	@ (8002720 <HAL_RCC_OscConfig+0x934>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	2202      	movs	r2, #2
 8002402:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002406:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800240a:	fa92 f2a2 	rbit	r2, r2
 800240e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002412:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002416:	fab2 f282 	clz	r2, r2
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	f042 0220 	orr.w	r2, r2, #32
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	f002 021f 	and.w	r2, r2, #31
 8002426:	2101      	movs	r1, #1
 8002428:	fa01 f202 	lsl.w	r2, r1, r2
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1ad      	bne.n	800238e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002436:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 8110 	beq.w	8002668 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d079      	beq.n	800254c <HAL_RCC_OscConfig+0x760>
 8002458:	2301      	movs	r3, #1
 800245a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800246a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	4bab      	ldr	r3, [pc, #684]	@ (8002724 <HAL_RCC_OscConfig+0x938>)
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	461a      	mov	r2, r3
 800247e:	2301      	movs	r3, #1
 8002480:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002482:	f7ff f9cd 	bl	8001820 <HAL_GetTick>
 8002486:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	e00a      	b.n	80024a2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800248c:	f7ff f9c8 	bl	8001820 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d902      	bls.n	80024a2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	f000 bcdb 	b.w	8002e58 <HAL_RCC_OscConfig+0x106c>
 80024a2:	2302      	movs	r3, #2
 80024a4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80024b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024bc:	2202      	movs	r2, #2
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	fa93 f2a3 	rbit	r2, r3
 80024ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024e0:	2202      	movs	r2, #2
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	fa93 f2a3 	rbit	r2, r3
 80024f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fc:	4b88      	ldr	r3, [pc, #544]	@ (8002720 <HAL_RCC_OscConfig+0x934>)
 80024fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002504:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002508:	2102      	movs	r1, #2
 800250a:	6019      	str	r1, [r3, #0]
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	fa93 f1a3 	rbit	r1, r3
 800251a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002522:	6019      	str	r1, [r3, #0]
  return result;
 8002524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002528:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	2101      	movs	r1, #1
 8002540:	fa01 f303 	lsl.w	r3, r1, r3
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0a0      	beq.n	800248c <HAL_RCC_OscConfig+0x6a0>
 800254a:	e08d      	b.n	8002668 <HAL_RCC_OscConfig+0x87c>
 800254c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002550:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fa93 f2a3 	rbit	r2, r3
 8002566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800256e:	601a      	str	r2, [r3, #0]
  return result;
 8002570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002574:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002578:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	4b68      	ldr	r3, [pc, #416]	@ (8002724 <HAL_RCC_OscConfig+0x938>)
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	461a      	mov	r2, r3
 800258a:	2300      	movs	r3, #0
 800258c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258e:	f7ff f947 	bl	8001820 <HAL_GetTick>
 8002592:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002596:	e00a      	b.n	80025ae <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002598:	f7ff f942 	bl	8001820 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d902      	bls.n	80025ae <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	f000 bc55 	b.w	8002e58 <HAL_RCC_OscConfig+0x106c>
 80025ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025b6:	2202      	movs	r2, #2
 80025b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	fa93 f2a3 	rbit	r2, r3
 80025c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80025da:	2202      	movs	r2, #2
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	fa93 f2a3 	rbit	r2, r3
 80025ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80025fe:	2202      	movs	r2, #2
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002606:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	fa93 f2a3 	rbit	r2, r3
 8002610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002614:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002618:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261a:	4b41      	ldr	r3, [pc, #260]	@ (8002720 <HAL_RCC_OscConfig+0x934>)
 800261c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800261e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002622:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002626:	2102      	movs	r1, #2
 8002628:	6019      	str	r1, [r3, #0]
 800262a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	fa93 f1a3 	rbit	r1, r3
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002640:	6019      	str	r1, [r3, #0]
  return result;
 8002642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002646:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2101      	movs	r1, #1
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d197      	bne.n	8002598 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 81a1 	beq.w	80029c0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002684:	4b26      	ldr	r3, [pc, #152]	@ (8002720 <HAL_RCC_OscConfig+0x934>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d116      	bne.n	80026be <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	4b23      	ldr	r3, [pc, #140]	@ (8002720 <HAL_RCC_OscConfig+0x934>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	4a22      	ldr	r2, [pc, #136]	@ (8002720 <HAL_RCC_OscConfig+0x934>)
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800269a:	61d3      	str	r3, [r2, #28]
 800269c:	4b20      	ldr	r3, [pc, #128]	@ (8002720 <HAL_RCC_OscConfig+0x934>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80026a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80026b6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <HAL_RCC_OscConfig+0x93c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d11a      	bne.n	8002700 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4b17      	ldr	r3, [pc, #92]	@ (8002728 <HAL_RCC_OscConfig+0x93c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a16      	ldr	r2, [pc, #88]	@ (8002728 <HAL_RCC_OscConfig+0x93c>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7ff f8a3 	bl	8001820 <HAL_GetTick>
 80026da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	e009      	b.n	80026f4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e0:	f7ff f89e 	bl	8001820 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b64      	cmp	r3, #100	@ 0x64
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e3b1      	b.n	8002e58 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <HAL_RCC_OscConfig+0x93c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ef      	beq.n	80026e0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002704:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d10d      	bne.n	800272c <HAL_RCC_OscConfig+0x940>
 8002710:	4b03      	ldr	r3, [pc, #12]	@ (8002720 <HAL_RCC_OscConfig+0x934>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	4a02      	ldr	r2, [pc, #8]	@ (8002720 <HAL_RCC_OscConfig+0x934>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6213      	str	r3, [r2, #32]
 800271c:	e03c      	b.n	8002798 <HAL_RCC_OscConfig+0x9ac>
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	10908120 	.word	0x10908120
 8002728:	40007000 	.word	0x40007000
 800272c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002730:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10c      	bne.n	8002756 <HAL_RCC_OscConfig+0x96a>
 800273c:	4bc1      	ldr	r3, [pc, #772]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4ac0      	ldr	r2, [pc, #768]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	6213      	str	r3, [r2, #32]
 8002748:	4bbe      	ldr	r3, [pc, #760]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4abd      	ldr	r2, [pc, #756]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 800274e:	f023 0304 	bic.w	r3, r3, #4
 8002752:	6213      	str	r3, [r2, #32]
 8002754:	e020      	b.n	8002798 <HAL_RCC_OscConfig+0x9ac>
 8002756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b05      	cmp	r3, #5
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x994>
 8002766:	4bb7      	ldr	r3, [pc, #732]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4ab6      	ldr	r2, [pc, #728]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	4bb4      	ldr	r3, [pc, #720]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4ab3      	ldr	r2, [pc, #716]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6213      	str	r3, [r2, #32]
 800277e:	e00b      	b.n	8002798 <HAL_RCC_OscConfig+0x9ac>
 8002780:	4bb0      	ldr	r3, [pc, #704]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4aaf      	ldr	r2, [pc, #700]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	6213      	str	r3, [r2, #32]
 800278c:	4bad      	ldr	r3, [pc, #692]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4aac      	ldr	r2, [pc, #688]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8081 	beq.w	80028ac <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027aa:	f7ff f839 	bl	8001820 <HAL_GetTick>
 80027ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7ff f834 	bl	8001820 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e345      	b.n	8002e58 <HAL_RCC_OscConfig+0x106c>
 80027cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027d4:	2202      	movs	r2, #2
 80027d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	fa93 f2a3 	rbit	r2, r3
 80027e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80027f8:	2202      	movs	r2, #2
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002800:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fa93 f2a3 	rbit	r2, r3
 800280a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002812:	601a      	str	r2, [r3, #0]
  return result;
 8002814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002818:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800281c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d102      	bne.n	8002838 <HAL_RCC_OscConfig+0xa4c>
 8002832:	4b84      	ldr	r3, [pc, #528]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	e013      	b.n	8002860 <HAL_RCC_OscConfig+0xa74>
 8002838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002840:	2202      	movs	r2, #2
 8002842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002848:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	fa93 f2a3 	rbit	r2, r3
 8002852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002856:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	4b79      	ldr	r3, [pc, #484]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002864:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002868:	2102      	movs	r1, #2
 800286a:	6011      	str	r1, [r2, #0]
 800286c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002870:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	fa92 f1a2 	rbit	r1, r2
 800287a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800287e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002882:	6011      	str	r1, [r2, #0]
  return result;
 8002884:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002888:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	fab2 f282 	clz	r2, r2
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	f002 021f 	and.w	r2, r2, #31
 800289e:	2101      	movs	r1, #1
 80028a0:	fa01 f202 	lsl.w	r2, r1, r2
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d084      	beq.n	80027b4 <HAL_RCC_OscConfig+0x9c8>
 80028aa:	e07f      	b.n	80029ac <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ac:	f7fe ffb8 	bl	8001820 <HAL_GetTick>
 80028b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b4:	e00b      	b.n	80028ce <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7fe ffb3 	bl	8001820 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e2c4      	b.n	8002e58 <HAL_RCC_OscConfig+0x106c>
 80028ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80028d6:	2202      	movs	r2, #2
 80028d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028de:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	fa93 f2a3 	rbit	r2, r3
 80028e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ec:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80028fa:	2202      	movs	r2, #2
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002902:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	fa93 f2a3 	rbit	r2, r3
 800290c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002910:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002914:	601a      	str	r2, [r3, #0]
  return result;
 8002916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800291e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002920:	fab3 f383 	clz	r3, r3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d102      	bne.n	800293a <HAL_RCC_OscConfig+0xb4e>
 8002934:	4b43      	ldr	r3, [pc, #268]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	e013      	b.n	8002962 <HAL_RCC_OscConfig+0xb76>
 800293a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002942:	2202      	movs	r2, #2
 8002944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	fa93 f2a3 	rbit	r2, r3
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	4b39      	ldr	r3, [pc, #228]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002966:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800296a:	2102      	movs	r1, #2
 800296c:	6011      	str	r1, [r2, #0]
 800296e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002972:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	fa92 f1a2 	rbit	r1, r2
 800297c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002980:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002984:	6011      	str	r1, [r2, #0]
  return result;
 8002986:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800298a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	fab2 f282 	clz	r2, r2
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f002 021f 	and.w	r2, r2, #31
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f202 	lsl.w	r2, r1, r2
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d184      	bne.n	80028b6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029ac:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d105      	bne.n	80029c0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b4:	4b23      	ldr	r3, [pc, #140]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	4a22      	ldr	r2, [pc, #136]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 80029ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8242 	beq.w	8002e56 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a44 <HAL_RCC_OscConfig+0xc58>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b08      	cmp	r3, #8
 80029dc:	f000 8213 	beq.w	8002e06 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	f040 8162 	bne.w	8002cb6 <HAL_RCC_OscConfig+0xeca>
 80029f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80029fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a04:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	fa93 f2a3 	rbit	r2, r3
 8002a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a12:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a16:	601a      	str	r2, [r3, #0]
  return result;
 8002a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a2c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	461a      	mov	r2, r3
 8002a34:	2300      	movs	r3, #0
 8002a36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fef2 	bl	8001820 <HAL_GetTick>
 8002a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a40:	e00c      	b.n	8002a5c <HAL_RCC_OscConfig+0xc70>
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe feea 	bl	8001820 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e1fd      	b.n	8002e58 <HAL_RCC_OscConfig+0x106c>
 8002a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a60:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	fa93 f2a3 	rbit	r2, r3
 8002a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a80:	601a      	str	r2, [r3, #0]
  return result;
 8002a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a86:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d102      	bne.n	8002aa6 <HAL_RCC_OscConfig+0xcba>
 8002aa0:	4bb0      	ldr	r3, [pc, #704]	@ (8002d64 <HAL_RCC_OscConfig+0xf78>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	e027      	b.n	8002af6 <HAL_RCC_OscConfig+0xd0a>
 8002aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aaa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002aae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ab2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	fa93 f2a3 	rbit	r2, r3
 8002ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002ad4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	fa93 f2a3 	rbit	r2, r3
 8002ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	4b9c      	ldr	r3, [pc, #624]	@ (8002d64 <HAL_RCC_OscConfig+0xf78>)
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002afa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002afe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b02:	6011      	str	r1, [r2, #0]
 8002b04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b08:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	fa92 f1a2 	rbit	r1, r2
 8002b12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b16:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b1a:	6011      	str	r1, [r2, #0]
  return result;
 8002b1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b20:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	fab2 f282 	clz	r2, r2
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	f042 0220 	orr.w	r2, r2, #32
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	f002 021f 	and.w	r2, r2, #31
 8002b36:	2101      	movs	r1, #1
 8002b38:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d182      	bne.n	8002a48 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b42:	4b88      	ldr	r3, [pc, #544]	@ (8002d64 <HAL_RCC_OscConfig+0xf78>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	430b      	orrs	r3, r1
 8002b64:	497f      	ldr	r1, [pc, #508]	@ (8002d64 <HAL_RCC_OscConfig+0xf78>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
 8002b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002b72:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	fa93 f2a3 	rbit	r2, r3
 8002b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b8e:	601a      	str	r2, [r3, #0]
  return result;
 8002b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b94:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b98:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ba4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	461a      	mov	r2, r3
 8002bac:	2301      	movs	r3, #1
 8002bae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fe36 	bl	8001820 <HAL_GetTick>
 8002bb4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb8:	e009      	b.n	8002bce <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fe fe31 	bl	8001820 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e144      	b.n	8002e58 <HAL_RCC_OscConfig+0x106c>
 8002bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002bd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	fa93 f2a3 	rbit	r2, r3
 8002bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bee:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002bf2:	601a      	str	r2, [r3, #0]
  return result;
 8002bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002bfc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d102      	bne.n	8002c18 <HAL_RCC_OscConfig+0xe2c>
 8002c12:	4b54      	ldr	r3, [pc, #336]	@ (8002d64 <HAL_RCC_OscConfig+0xf78>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	e027      	b.n	8002c68 <HAL_RCC_OscConfig+0xe7c>
 8002c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	fa93 f2a3 	rbit	r2, r3
 8002c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c38:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c42:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c50:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	fa93 f2a3 	rbit	r2, r3
 8002c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	4b3f      	ldr	r3, [pc, #252]	@ (8002d64 <HAL_RCC_OscConfig+0xf78>)
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c6c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002c70:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c74:	6011      	str	r1, [r2, #0]
 8002c76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c7a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	fa92 f1a2 	rbit	r1, r2
 8002c84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c88:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c8c:	6011      	str	r1, [r2, #0]
  return result;
 8002c8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c92:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	fab2 f282 	clz	r2, r2
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	f042 0220 	orr.w	r2, r2, #32
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f002 021f 	and.w	r2, r2, #31
 8002ca8:	2101      	movs	r1, #1
 8002caa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d082      	beq.n	8002bba <HAL_RCC_OscConfig+0xdce>
 8002cb4:	e0cf      	b.n	8002e56 <HAL_RCC_OscConfig+0x106a>
 8002cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cba:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002cbe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	fa93 f2a3 	rbit	r2, r3
 8002cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002cda:	601a      	str	r2, [r3, #0]
  return result;
 8002cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ce4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002cf0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fd90 	bl	8001820 <HAL_GetTick>
 8002d00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d04:	e009      	b.n	8002d1a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe fd8b 	bl	8001820 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e09e      	b.n	8002e58 <HAL_RCC_OscConfig+0x106c>
 8002d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	fa93 f2a3 	rbit	r2, r3
 8002d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d3e:	601a      	str	r2, [r3, #0]
  return result;
 8002d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d44:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d104      	bne.n	8002d68 <HAL_RCC_OscConfig+0xf7c>
 8002d5e:	4b01      	ldr	r3, [pc, #4]	@ (8002d64 <HAL_RCC_OscConfig+0xf78>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	e029      	b.n	8002db8 <HAL_RCC_OscConfig+0xfcc>
 8002d64:	40021000 	.word	0x40021000
 8002d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	fa93 f2a3 	rbit	r2, r3
 8002d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d88:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d92:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002d96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	fa93 f2a3 	rbit	r2, r3
 8002daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dae:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	4b2b      	ldr	r3, [pc, #172]	@ (8002e64 <HAL_RCC_OscConfig+0x1078>)
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dbc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002dc0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002dc4:	6011      	str	r1, [r2, #0]
 8002dc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dca:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	fa92 f1a2 	rbit	r1, r2
 8002dd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dd8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002ddc:	6011      	str	r1, [r2, #0]
  return result;
 8002dde:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002de2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	fab2 f282 	clz	r2, r2
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	f042 0220 	orr.w	r2, r2, #32
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	f002 021f 	and.w	r2, r2, #31
 8002df8:	2101      	movs	r1, #1
 8002dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d180      	bne.n	8002d06 <HAL_RCC_OscConfig+0xf1a>
 8002e04:	e027      	b.n	8002e56 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e01e      	b.n	8002e58 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e1a:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <HAL_RCC_OscConfig+0x1078>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e26:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d10b      	bne.n	8002e52 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000

08002e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b09e      	sub	sp, #120	@ 0x78
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e162      	b.n	8003146 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b90      	ldr	r3, [pc, #576]	@ (80030c4 <HAL_RCC_ClockConfig+0x25c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d910      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b8d      	ldr	r3, [pc, #564]	@ (80030c4 <HAL_RCC_ClockConfig+0x25c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 0207 	bic.w	r2, r3, #7
 8002e96:	498b      	ldr	r1, [pc, #556]	@ (80030c4 <HAL_RCC_ClockConfig+0x25c>)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b89      	ldr	r3, [pc, #548]	@ (80030c4 <HAL_RCC_ClockConfig+0x25c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e14a      	b.n	8003146 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b82      	ldr	r3, [pc, #520]	@ (80030c8 <HAL_RCC_ClockConfig+0x260>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	497f      	ldr	r1, [pc, #508]	@ (80030c8 <HAL_RCC_ClockConfig+0x260>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80dc 	beq.w	8003094 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d13c      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xf6>
 8002ee4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ee8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d102      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xa6>
 8002f08:	4b6f      	ldr	r3, [pc, #444]	@ (80030c8 <HAL_RCC_ClockConfig+0x260>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	e00f      	b.n	8002f2e <HAL_RCC_ClockConfig+0xc6>
 8002f0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f12:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f20:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f2a:	4b67      	ldr	r3, [pc, #412]	@ (80030c8 <HAL_RCC_ClockConfig+0x260>)
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f32:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f36:	fa92 f2a2 	rbit	r2, r2
 8002f3a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002f3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f3e:	fab2 f282 	clz	r2, r2
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	f042 0220 	orr.w	r2, r2, #32
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	f002 021f 	and.w	r2, r2, #31
 8002f4e:	2101      	movs	r1, #1
 8002f50:	fa01 f202 	lsl.w	r2, r1, r2
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d17b      	bne.n	8003052 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0f3      	b.n	8003146 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d13c      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x178>
 8002f66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f6a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 8002f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d102      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x128>
 8002f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80030c8 <HAL_RCC_ClockConfig+0x260>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	e00f      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
 8002f90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f94:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fac:	4b46      	ldr	r3, [pc, #280]	@ (80030c8 <HAL_RCC_ClockConfig+0x260>)
 8002fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fb4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002fb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fb8:	fa92 f2a2 	rbit	r2, r2
 8002fbc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002fbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fc0:	fab2 f282 	clz	r2, r2
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	f042 0220 	orr.w	r2, r2, #32
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	f002 021f 	and.w	r2, r2, #31
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d13a      	bne.n	8003052 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0b2      	b.n	8003146 <HAL_RCC_ClockConfig+0x2de>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d102      	bne.n	8003008 <HAL_RCC_ClockConfig+0x1a0>
 8003002:	4b31      	ldr	r3, [pc, #196]	@ (80030c8 <HAL_RCC_ClockConfig+0x260>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	e00d      	b.n	8003024 <HAL_RCC_ClockConfig+0x1bc>
 8003008:	2302      	movs	r3, #2
 800300a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	627b      	str	r3, [r7, #36]	@ 0x24
 8003014:	2302      	movs	r3, #2
 8003016:	623b      	str	r3, [r7, #32]
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	4b29      	ldr	r3, [pc, #164]	@ (80030c8 <HAL_RCC_ClockConfig+0x260>)
 8003022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003024:	2202      	movs	r2, #2
 8003026:	61ba      	str	r2, [r7, #24]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	fa92 f2a2 	rbit	r2, r2
 800302e:	617a      	str	r2, [r7, #20]
  return result;
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	fab2 f282 	clz	r2, r2
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	f042 0220 	orr.w	r2, r2, #32
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	f002 021f 	and.w	r2, r2, #31
 8003042:	2101      	movs	r1, #1
 8003044:	fa01 f202 	lsl.w	r2, r1, r2
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e079      	b.n	8003146 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b1d      	ldr	r3, [pc, #116]	@ (80030c8 <HAL_RCC_ClockConfig+0x260>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	491a      	ldr	r1, [pc, #104]	@ (80030c8 <HAL_RCC_ClockConfig+0x260>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003064:	f7fe fbdc 	bl	8001820 <HAL_GetTick>
 8003068:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fe fbd8 	bl	8001820 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e061      	b.n	8003146 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b11      	ldr	r3, [pc, #68]	@ (80030c8 <HAL_RCC_ClockConfig+0x260>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003094:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <HAL_RCC_ClockConfig+0x25c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d214      	bcs.n	80030cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b08      	ldr	r3, [pc, #32]	@ (80030c4 <HAL_RCC_ClockConfig+0x25c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	4906      	ldr	r1, [pc, #24]	@ (80030c4 <HAL_RCC_ClockConfig+0x25c>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b04      	ldr	r3, [pc, #16]	@ (80030c4 <HAL_RCC_ClockConfig+0x25c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e040      	b.n	8003146 <HAL_RCC_ClockConfig+0x2de>
 80030c4:	40022000 	.word	0x40022000
 80030c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <HAL_RCC_ClockConfig+0x2e8>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	491a      	ldr	r1, [pc, #104]	@ (8003150 <HAL_RCC_ClockConfig+0x2e8>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030f6:	4b16      	ldr	r3, [pc, #88]	@ (8003150 <HAL_RCC_ClockConfig+0x2e8>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4912      	ldr	r1, [pc, #72]	@ (8003150 <HAL_RCC_ClockConfig+0x2e8>)
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800310a:	f000 f829 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 800310e:	4601      	mov	r1, r0
 8003110:	4b0f      	ldr	r3, [pc, #60]	@ (8003150 <HAL_RCC_ClockConfig+0x2e8>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003118:	22f0      	movs	r2, #240	@ 0xf0
 800311a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	fa92 f2a2 	rbit	r2, r2
 8003122:	60fa      	str	r2, [r7, #12]
  return result;
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	fab2 f282 	clz	r2, r2
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	40d3      	lsrs	r3, r2
 800312e:	4a09      	ldr	r2, [pc, #36]	@ (8003154 <HAL_RCC_ClockConfig+0x2ec>)
 8003130:	5cd3      	ldrb	r3, [r2, r3]
 8003132:	fa21 f303 	lsr.w	r3, r1, r3
 8003136:	4a08      	ldr	r2, [pc, #32]	@ (8003158 <HAL_RCC_ClockConfig+0x2f0>)
 8003138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800313a:	4b08      	ldr	r3, [pc, #32]	@ (800315c <HAL_RCC_ClockConfig+0x2f4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fb2a 	bl	8001798 <HAL_InitTick>
  
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3778      	adds	r7, #120	@ 0x78
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000
 8003154:	08007d40 	.word	0x08007d40
 8003158:	20000020 	.word	0x20000020
 800315c:	20000024 	.word	0x20000024

08003160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800317a:	4b1e      	ldr	r3, [pc, #120]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b04      	cmp	r3, #4
 8003188:	d002      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x30>
 800318a:	2b08      	cmp	r3, #8
 800318c:	d003      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x36>
 800318e:	e026      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003190:	4b19      	ldr	r3, [pc, #100]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003192:	613b      	str	r3, [r7, #16]
      break;
 8003194:	e026      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	0c9b      	lsrs	r3, r3, #18
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	4a17      	ldr	r2, [pc, #92]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80031a0:	5cd3      	ldrb	r3, [r2, r3]
 80031a2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80031a4:	4b13      	ldr	r3, [pc, #76]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80031a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	4a14      	ldr	r2, [pc, #80]	@ (8003200 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031ae:	5cd3      	ldrb	r3, [r2, r3]
 80031b0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031bc:	4a0e      	ldr	r2, [pc, #56]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	e004      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003204 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	613b      	str	r3, [r7, #16]
      break;
 80031dc:	e002      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031de:	4b0a      	ldr	r3, [pc, #40]	@ (8003208 <HAL_RCC_GetSysClockFreq+0xa8>)
 80031e0:	613b      	str	r3, [r7, #16]
      break;
 80031e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e4:	693b      	ldr	r3, [r7, #16]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	371c      	adds	r7, #28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000
 80031f8:	00f42400 	.word	0x00f42400
 80031fc:	08007d58 	.word	0x08007d58
 8003200:	08007d68 	.word	0x08007d68
 8003204:	003d0900 	.word	0x003d0900
 8003208:	007a1200 	.word	0x007a1200

0800320c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003210:	4b03      	ldr	r3, [pc, #12]	@ (8003220 <HAL_RCC_GetHCLKFreq+0x14>)
 8003212:	681b      	ldr	r3, [r3, #0]
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	20000020 	.word	0x20000020

08003224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800322a:	f7ff ffef 	bl	800320c <HAL_RCC_GetHCLKFreq>
 800322e:	4601      	mov	r1, r0
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003238:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800323c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	fa92 f2a2 	rbit	r2, r2
 8003244:	603a      	str	r2, [r7, #0]
  return result;
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	fab2 f282 	clz	r2, r2
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	40d3      	lsrs	r3, r2
 8003250:	4a04      	ldr	r2, [pc, #16]	@ (8003264 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003252:	5cd3      	ldrb	r3, [r2, r3]
 8003254:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	08007d50 	.word	0x08007d50

08003268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800326e:	f7ff ffcd 	bl	800320c <HAL_RCC_GetHCLKFreq>
 8003272:	4601      	mov	r1, r0
 8003274:	4b0b      	ldr	r3, [pc, #44]	@ (80032a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800327c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003280:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	fa92 f2a2 	rbit	r2, r2
 8003288:	603a      	str	r2, [r7, #0]
  return result;
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	fab2 f282 	clz	r2, r2
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	40d3      	lsrs	r3, r2
 8003294:	4a04      	ldr	r2, [pc, #16]	@ (80032a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003296:	5cd3      	ldrb	r3, [r2, r3]
 8003298:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40021000 	.word	0x40021000
 80032a8:	08007d50 	.word	0x08007d50

080032ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b092      	sub	sp, #72	@ 0x48
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80032bc:	2300      	movs	r3, #0
 80032be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 80cd 	beq.w	800346a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d0:	4b86      	ldr	r3, [pc, #536]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10e      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032dc:	4b83      	ldr	r3, [pc, #524]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	4a82      	ldr	r2, [pc, #520]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e6:	61d3      	str	r3, [r2, #28]
 80032e8:	4b80      	ldr	r3, [pc, #512]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fa:	4b7d      	ldr	r3, [pc, #500]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d118      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003306:	4b7a      	ldr	r3, [pc, #488]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a79      	ldr	r2, [pc, #484]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800330c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003310:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003312:	f7fe fa85 	bl	8001820 <HAL_GetTick>
 8003316:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003318:	e008      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331a:	f7fe fa81 	bl	8001820 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b64      	cmp	r3, #100	@ 0x64
 8003326:	d901      	bls.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0db      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332c:	4b70      	ldr	r3, [pc, #448]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003338:	4b6c      	ldr	r3, [pc, #432]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003340:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d07d      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003350:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003352:	429a      	cmp	r2, r3
 8003354:	d076      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003356:	4b65      	ldr	r3, [pc, #404]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800335e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003360:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003364:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800336e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	4b5e      	ldr	r3, [pc, #376]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	461a      	mov	r2, r3
 8003380:	2301      	movs	r3, #1
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003388:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003394:	fab3 f383 	clz	r3, r3
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	4b55      	ldr	r3, [pc, #340]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	461a      	mov	r2, r3
 80033a4:	2300      	movs	r3, #0
 80033a6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033a8:	4a50      	ldr	r2, [pc, #320]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ac:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d045      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fe fa32 	bl	8001820 <HAL_GetTick>
 80033bc:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033be:	e00a      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fe fa2e 	bl	8001820 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e086      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80033d6:	2302      	movs	r3, #2
 80033d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033e2:	2302      	movs	r3, #2
 80033e4:	623b      	str	r3, [r7, #32]
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	61fb      	str	r3, [r7, #28]
  return result;
 80033ee:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f043 0302 	orr.w	r3, r3, #2
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d102      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003404:	4b39      	ldr	r3, [pc, #228]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	e007      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800340a:	2302      	movs	r3, #2
 800340c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	4b35      	ldr	r3, [pc, #212]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	2202      	movs	r2, #2
 800341c:	613a      	str	r2, [r7, #16]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	fa92 f2a2 	rbit	r2, r2
 8003424:	60fa      	str	r2, [r7, #12]
  return result;
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	fab2 f282 	clz	r2, r2
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f002 021f 	and.w	r2, r2, #31
 8003438:	2101      	movs	r1, #1
 800343a:	fa01 f202 	lsl.w	r2, r1, r2
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0bd      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003444:	4b29      	ldr	r3, [pc, #164]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4926      	ldr	r1, [pc, #152]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003452:	4313      	orrs	r3, r2
 8003454:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003456:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345e:	4b23      	ldr	r3, [pc, #140]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4a22      	ldr	r2, [pc, #136]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003468:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003476:	4b1d      	ldr	r3, [pc, #116]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	f023 0203 	bic.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	491a      	ldr	r1, [pc, #104]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003484:	4313      	orrs	r3, r2
 8003486:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003494:	4b15      	ldr	r3, [pc, #84]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003498:	f023 0210 	bic.w	r2, r3, #16
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4912      	ldr	r1, [pc, #72]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	490b      	ldr	r1, [pc, #44]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034d0:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	4903      	ldr	r1, [pc, #12]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3748      	adds	r7, #72	@ 0x48
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40007000 	.word	0x40007000
 80034f4:	10908100 	.word	0x10908100

080034f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e049      	b.n	800359e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd feda 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f000 fe1c 	bl	8004174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d001      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e040      	b.n	8003642 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003650 <HAL_TIM_Base_Start_IT+0xa8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00e      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x58>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ea:	d009      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x58>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a18      	ldr	r2, [pc, #96]	@ (8003654 <HAL_TIM_Base_Start_IT+0xac>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x58>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a17      	ldr	r2, [pc, #92]	@ (8003658 <HAL_TIM_Base_Start_IT+0xb0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d115      	bne.n	800362c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	4b15      	ldr	r3, [pc, #84]	@ (800365c <HAL_TIM_Base_Start_IT+0xb4>)
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b06      	cmp	r3, #6
 8003610:	d015      	beq.n	800363e <HAL_TIM_Base_Start_IT+0x96>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003618:	d011      	beq.n	800363e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362a:	e008      	b.n	800363e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e000      	b.n	8003640 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40000400 	.word	0x40000400
 8003658:	40014000 	.word	0x40014000
 800365c:	00010007 	.word	0x00010007

08003660 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e049      	b.n	8003706 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f841 	bl	800370e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	4619      	mov	r1, r3
 800369e:	4610      	mov	r0, r2
 80036a0:	f000 fd68 	bl	8004174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <HAL_TIM_PWM_Start+0x24>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e03c      	b.n	80037c2 <HAL_TIM_PWM_Start+0x9e>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b04      	cmp	r3, #4
 800374c:	d109      	bne.n	8003762 <HAL_TIM_PWM_Start+0x3e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	bf14      	ite	ne
 800375a:	2301      	movne	r3, #1
 800375c:	2300      	moveq	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	e02f      	b.n	80037c2 <HAL_TIM_PWM_Start+0x9e>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d109      	bne.n	800377c <HAL_TIM_PWM_Start+0x58>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b01      	cmp	r3, #1
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e022      	b.n	80037c2 <HAL_TIM_PWM_Start+0x9e>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d109      	bne.n	8003796 <HAL_TIM_PWM_Start+0x72>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b01      	cmp	r3, #1
 800378c:	bf14      	ite	ne
 800378e:	2301      	movne	r3, #1
 8003790:	2300      	moveq	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	e015      	b.n	80037c2 <HAL_TIM_PWM_Start+0x9e>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b10      	cmp	r3, #16
 800379a:	d109      	bne.n	80037b0 <HAL_TIM_PWM_Start+0x8c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	bf14      	ite	ne
 80037a8:	2301      	movne	r3, #1
 80037aa:	2300      	moveq	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e008      	b.n	80037c2 <HAL_TIM_PWM_Start+0x9e>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	bf14      	ite	ne
 80037bc:	2301      	movne	r3, #1
 80037be:	2300      	moveq	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e088      	b.n	80038dc <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d104      	bne.n	80037da <HAL_TIM_PWM_Start+0xb6>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037d8:	e023      	b.n	8003822 <HAL_TIM_PWM_Start+0xfe>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d104      	bne.n	80037ea <HAL_TIM_PWM_Start+0xc6>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037e8:	e01b      	b.n	8003822 <HAL_TIM_PWM_Start+0xfe>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d104      	bne.n	80037fa <HAL_TIM_PWM_Start+0xd6>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037f8:	e013      	b.n	8003822 <HAL_TIM_PWM_Start+0xfe>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b0c      	cmp	r3, #12
 80037fe:	d104      	bne.n	800380a <HAL_TIM_PWM_Start+0xe6>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003808:	e00b      	b.n	8003822 <HAL_TIM_PWM_Start+0xfe>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b10      	cmp	r3, #16
 800380e:	d104      	bne.n	800381a <HAL_TIM_PWM_Start+0xf6>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003818:	e003      	b.n	8003822 <HAL_TIM_PWM_Start+0xfe>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2201      	movs	r2, #1
 8003828:	6839      	ldr	r1, [r7, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f001 f866 	bl	80048fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2b      	ldr	r2, [pc, #172]	@ (80038e4 <HAL_TIM_PWM_Start+0x1c0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00e      	beq.n	8003858 <HAL_TIM_PWM_Start+0x134>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a2a      	ldr	r2, [pc, #168]	@ (80038e8 <HAL_TIM_PWM_Start+0x1c4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d009      	beq.n	8003858 <HAL_TIM_PWM_Start+0x134>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a28      	ldr	r2, [pc, #160]	@ (80038ec <HAL_TIM_PWM_Start+0x1c8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d004      	beq.n	8003858 <HAL_TIM_PWM_Start+0x134>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a27      	ldr	r2, [pc, #156]	@ (80038f0 <HAL_TIM_PWM_Start+0x1cc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d101      	bne.n	800385c <HAL_TIM_PWM_Start+0x138>
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_TIM_PWM_Start+0x13a>
 800385c:	2300      	movs	r3, #0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003870:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1b      	ldr	r2, [pc, #108]	@ (80038e4 <HAL_TIM_PWM_Start+0x1c0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00e      	beq.n	800389a <HAL_TIM_PWM_Start+0x176>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003884:	d009      	beq.n	800389a <HAL_TIM_PWM_Start+0x176>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1a      	ldr	r2, [pc, #104]	@ (80038f4 <HAL_TIM_PWM_Start+0x1d0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d004      	beq.n	800389a <HAL_TIM_PWM_Start+0x176>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a14      	ldr	r2, [pc, #80]	@ (80038e8 <HAL_TIM_PWM_Start+0x1c4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d115      	bne.n	80038c6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	4b15      	ldr	r3, [pc, #84]	@ (80038f8 <HAL_TIM_PWM_Start+0x1d4>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b06      	cmp	r3, #6
 80038aa:	d015      	beq.n	80038d8 <HAL_TIM_PWM_Start+0x1b4>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038b2:	d011      	beq.n	80038d8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c4:	e008      	b.n	80038d8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e000      	b.n	80038da <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40012c00 	.word	0x40012c00
 80038e8:	40014000 	.word	0x40014000
 80038ec:	40014400 	.word	0x40014400
 80038f0:	40014800 	.word	0x40014800
 80038f4:	40000400 	.word	0x40000400
 80038f8:	00010007 	.word	0x00010007

080038fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e097      	b.n	8003a40 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7fd fd29 	bl	800137c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003940:	f023 0307 	bic.w	r3, r3, #7
 8003944:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3304      	adds	r3, #4
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f000 fc0f 	bl	8004174 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800397e:	f023 0303 	bic.w	r3, r3, #3
 8003982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	4313      	orrs	r3, r2
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800399c:	f023 030c 	bic.w	r3, r3, #12
 80039a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	4313      	orrs	r3, r2
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	011a      	lsls	r2, r3, #4
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	031b      	lsls	r3, r3, #12
 80039cc:	4313      	orrs	r3, r2
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80039da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80039e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	4313      	orrs	r3, r2
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d110      	bne.n	8003a9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d102      	bne.n	8003a84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a7e:	7b7b      	ldrb	r3, [r7, #13]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d001      	beq.n	8003a88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e069      	b.n	8003b5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a98:	e031      	b.n	8003afe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d110      	bne.n	8003ac2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aa0:	7bbb      	ldrb	r3, [r7, #14]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003aa6:	7b3b      	ldrb	r3, [r7, #12]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d001      	beq.n	8003ab0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e055      	b.n	8003b5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ac0:	e01d      	b.n	8003afe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d108      	bne.n	8003ada <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ac8:	7bbb      	ldrb	r3, [r7, #14]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d105      	bne.n	8003ada <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ace:	7b7b      	ldrb	r3, [r7, #13]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d102      	bne.n	8003ada <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ad4:	7b3b      	ldrb	r3, [r7, #12]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d001      	beq.n	8003ade <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e03e      	b.n	8003b5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2202      	movs	r2, #2
 8003afa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_TIM_Encoder_Start+0xc4>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d008      	beq.n	8003b1c <HAL_TIM_Encoder_Start+0xd4>
 8003b0a:	e00f      	b.n	8003b2c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2201      	movs	r2, #1
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fef1 	bl	80048fc <TIM_CCxChannelCmd>
      break;
 8003b1a:	e016      	b.n	8003b4a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2201      	movs	r2, #1
 8003b22:	2104      	movs	r1, #4
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fee9 	bl	80048fc <TIM_CCxChannelCmd>
      break;
 8003b2a:	e00e      	b.n	8003b4a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2201      	movs	r2, #1
 8003b32:	2100      	movs	r1, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fee1 	bl	80048fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	2104      	movs	r1, #4
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 feda 	bl	80048fc <TIM_CCxChannelCmd>
      break;
 8003b48:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d020      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01b      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0202 	mvn.w	r2, #2
 8003b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fac1 	bl	8004136 <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fab3 	bl	8004122 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fac4 	bl	800414a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d020      	beq.n	8003c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01b      	beq.n	8003c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0204 	mvn.w	r2, #4
 8003be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fa9b 	bl	8004136 <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fa8d 	bl	8004122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa9e 	bl	800414a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d020      	beq.n	8003c60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01b      	beq.n	8003c60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0208 	mvn.w	r2, #8
 8003c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2204      	movs	r2, #4
 8003c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fa75 	bl	8004136 <HAL_TIM_IC_CaptureCallback>
 8003c4c:	e005      	b.n	8003c5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa67 	bl	8004122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fa78 	bl	800414a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d020      	beq.n	8003cac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01b      	beq.n	8003cac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0210 	mvn.w	r2, #16
 8003c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2208      	movs	r2, #8
 8003c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fa4f 	bl	8004136 <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fa41 	bl	8004122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fa52 	bl	800414a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00c      	beq.n	8003cd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0201 	mvn.w	r2, #1
 8003cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fd fac2 	bl	8001254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00c      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fea2 	bl	8004a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00c      	beq.n	8003d18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fe9a 	bl	8004a4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00c      	beq.n	8003d3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d007      	beq.n	8003d3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa11 	bl	800415e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00c      	beq.n	8003d60 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0220 	mvn.w	r2, #32
 8003d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fe62 	bl	8004a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d60:	bf00      	nop
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e0ff      	b.n	8003f86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b14      	cmp	r3, #20
 8003d92:	f200 80f0 	bhi.w	8003f76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d96:	a201      	add	r2, pc, #4	@ (adr r2, 8003d9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9c:	08003df1 	.word	0x08003df1
 8003da0:	08003f77 	.word	0x08003f77
 8003da4:	08003f77 	.word	0x08003f77
 8003da8:	08003f77 	.word	0x08003f77
 8003dac:	08003e31 	.word	0x08003e31
 8003db0:	08003f77 	.word	0x08003f77
 8003db4:	08003f77 	.word	0x08003f77
 8003db8:	08003f77 	.word	0x08003f77
 8003dbc:	08003e73 	.word	0x08003e73
 8003dc0:	08003f77 	.word	0x08003f77
 8003dc4:	08003f77 	.word	0x08003f77
 8003dc8:	08003f77 	.word	0x08003f77
 8003dcc:	08003eb3 	.word	0x08003eb3
 8003dd0:	08003f77 	.word	0x08003f77
 8003dd4:	08003f77 	.word	0x08003f77
 8003dd8:	08003f77 	.word	0x08003f77
 8003ddc:	08003ef5 	.word	0x08003ef5
 8003de0:	08003f77 	.word	0x08003f77
 8003de4:	08003f77 	.word	0x08003f77
 8003de8:	08003f77 	.word	0x08003f77
 8003dec:	08003f35 	.word	0x08003f35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fa40 	bl	800427c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0208 	orr.w	r2, r2, #8
 8003e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0204 	bic.w	r2, r2, #4
 8003e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6999      	ldr	r1, [r3, #24]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	619a      	str	r2, [r3, #24]
      break;
 8003e2e:	e0a5      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 faa6 	bl	8004388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6999      	ldr	r1, [r3, #24]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	021a      	lsls	r2, r3, #8
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	619a      	str	r2, [r3, #24]
      break;
 8003e70:	e084      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fb05 	bl	8004488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0208 	orr.w	r2, r2, #8
 8003e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0204 	bic.w	r2, r2, #4
 8003e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69d9      	ldr	r1, [r3, #28]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	61da      	str	r2, [r3, #28]
      break;
 8003eb0:	e064      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fb63 	bl	8004584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69d9      	ldr	r1, [r3, #28]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	021a      	lsls	r2, r3, #8
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	61da      	str	r2, [r3, #28]
      break;
 8003ef2:	e043      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fba6 	bl	800464c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0208 	orr.w	r2, r2, #8
 8003f0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0204 	bic.w	r2, r2, #4
 8003f1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f32:	e023      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fbe4 	bl	8004708 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	021a      	lsls	r2, r3, #8
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f74:	e002      	b.n	8003f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	75fb      	strb	r3, [r7, #23]
      break;
 8003f7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop

08003f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIM_ConfigClockSource+0x1c>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e0b6      	b.n	800411a <HAL_TIM_ConfigClockSource+0x18a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fe8:	d03e      	beq.n	8004068 <HAL_TIM_ConfigClockSource+0xd8>
 8003fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fee:	f200 8087 	bhi.w	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8003ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ff6:	f000 8086 	beq.w	8004106 <HAL_TIM_ConfigClockSource+0x176>
 8003ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ffe:	d87f      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8004000:	2b70      	cmp	r3, #112	@ 0x70
 8004002:	d01a      	beq.n	800403a <HAL_TIM_ConfigClockSource+0xaa>
 8004004:	2b70      	cmp	r3, #112	@ 0x70
 8004006:	d87b      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8004008:	2b60      	cmp	r3, #96	@ 0x60
 800400a:	d050      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x11e>
 800400c:	2b60      	cmp	r3, #96	@ 0x60
 800400e:	d877      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8004010:	2b50      	cmp	r3, #80	@ 0x50
 8004012:	d03c      	beq.n	800408e <HAL_TIM_ConfigClockSource+0xfe>
 8004014:	2b50      	cmp	r3, #80	@ 0x50
 8004016:	d873      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8004018:	2b40      	cmp	r3, #64	@ 0x40
 800401a:	d058      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x13e>
 800401c:	2b40      	cmp	r3, #64	@ 0x40
 800401e:	d86f      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8004020:	2b30      	cmp	r3, #48	@ 0x30
 8004022:	d064      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x15e>
 8004024:	2b30      	cmp	r3, #48	@ 0x30
 8004026:	d86b      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8004028:	2b20      	cmp	r3, #32
 800402a:	d060      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x15e>
 800402c:	2b20      	cmp	r3, #32
 800402e:	d867      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d05c      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x15e>
 8004034:	2b10      	cmp	r3, #16
 8004036:	d05a      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x15e>
 8004038:	e062      	b.n	8004100 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800404a:	f000 fc37 	bl	80048bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800405c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	609a      	str	r2, [r3, #8]
      break;
 8004066:	e04f      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004078:	f000 fc20 	bl	80048bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800408a:	609a      	str	r2, [r3, #8]
      break;
 800408c:	e03c      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	461a      	mov	r2, r3
 800409c:	f000 fb94 	bl	80047c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2150      	movs	r1, #80	@ 0x50
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fbed 	bl	8004886 <TIM_ITRx_SetConfig>
      break;
 80040ac:	e02c      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ba:	461a      	mov	r2, r3
 80040bc:	f000 fbb3 	bl	8004826 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2160      	movs	r1, #96	@ 0x60
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fbdd 	bl	8004886 <TIM_ITRx_SetConfig>
      break;
 80040cc:	e01c      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040da:	461a      	mov	r2, r3
 80040dc:	f000 fb74 	bl	80047c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2140      	movs	r1, #64	@ 0x40
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fbcd 	bl	8004886 <TIM_ITRx_SetConfig>
      break;
 80040ec:	e00c      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4619      	mov	r1, r3
 80040f8:	4610      	mov	r0, r2
 80040fa:	f000 fbc4 	bl	8004886 <TIM_ITRx_SetConfig>
      break;
 80040fe:	e003      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]
      break;
 8004104:	e000      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004118:	7bfb      	ldrb	r3, [r7, #15]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a38      	ldr	r2, [pc, #224]	@ (8004268 <TIM_Base_SetConfig+0xf4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d007      	beq.n	800419c <TIM_Base_SetConfig+0x28>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004192:	d003      	beq.n	800419c <TIM_Base_SetConfig+0x28>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a35      	ldr	r2, [pc, #212]	@ (800426c <TIM_Base_SetConfig+0xf8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d108      	bne.n	80041ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004268 <TIM_Base_SetConfig+0xf4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <TIM_Base_SetConfig+0x6a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041bc:	d00f      	beq.n	80041de <TIM_Base_SetConfig+0x6a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a2a      	ldr	r2, [pc, #168]	@ (800426c <TIM_Base_SetConfig+0xf8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00b      	beq.n	80041de <TIM_Base_SetConfig+0x6a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a29      	ldr	r2, [pc, #164]	@ (8004270 <TIM_Base_SetConfig+0xfc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <TIM_Base_SetConfig+0x6a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a28      	ldr	r2, [pc, #160]	@ (8004274 <TIM_Base_SetConfig+0x100>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_Base_SetConfig+0x6a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a27      	ldr	r2, [pc, #156]	@ (8004278 <TIM_Base_SetConfig+0x104>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d108      	bne.n	80041f0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a14      	ldr	r2, [pc, #80]	@ (8004268 <TIM_Base_SetConfig+0xf4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00b      	beq.n	8004234 <TIM_Base_SetConfig+0xc0>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a14      	ldr	r2, [pc, #80]	@ (8004270 <TIM_Base_SetConfig+0xfc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d007      	beq.n	8004234 <TIM_Base_SetConfig+0xc0>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a13      	ldr	r2, [pc, #76]	@ (8004274 <TIM_Base_SetConfig+0x100>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_Base_SetConfig+0xc0>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a12      	ldr	r2, [pc, #72]	@ (8004278 <TIM_Base_SetConfig+0x104>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d103      	bne.n	800423c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b01      	cmp	r3, #1
 800424c:	d105      	bne.n	800425a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f023 0201 	bic.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	611a      	str	r2, [r3, #16]
  }
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40000400 	.word	0x40000400
 8004270:	40014000 	.word	0x40014000
 8004274:	40014400 	.word	0x40014400
 8004278:	40014800 	.word	0x40014800

0800427c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f023 0201 	bic.w	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f023 0302 	bic.w	r3, r3, #2
 80042c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a28      	ldr	r2, [pc, #160]	@ (8004378 <TIM_OC1_SetConfig+0xfc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00b      	beq.n	80042f4 <TIM_OC1_SetConfig+0x78>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a27      	ldr	r2, [pc, #156]	@ (800437c <TIM_OC1_SetConfig+0x100>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d007      	beq.n	80042f4 <TIM_OC1_SetConfig+0x78>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a26      	ldr	r2, [pc, #152]	@ (8004380 <TIM_OC1_SetConfig+0x104>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d003      	beq.n	80042f4 <TIM_OC1_SetConfig+0x78>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a25      	ldr	r2, [pc, #148]	@ (8004384 <TIM_OC1_SetConfig+0x108>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d10c      	bne.n	800430e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0308 	bic.w	r3, r3, #8
 80042fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f023 0304 	bic.w	r3, r3, #4
 800430c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a19      	ldr	r2, [pc, #100]	@ (8004378 <TIM_OC1_SetConfig+0xfc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00b      	beq.n	800432e <TIM_OC1_SetConfig+0xb2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a18      	ldr	r2, [pc, #96]	@ (800437c <TIM_OC1_SetConfig+0x100>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d007      	beq.n	800432e <TIM_OC1_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a17      	ldr	r2, [pc, #92]	@ (8004380 <TIM_OC1_SetConfig+0x104>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d003      	beq.n	800432e <TIM_OC1_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a16      	ldr	r2, [pc, #88]	@ (8004384 <TIM_OC1_SetConfig+0x108>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d111      	bne.n	8004352 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800433c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	621a      	str	r2, [r3, #32]
}
 800436c:	bf00      	nop
 800436e:	371c      	adds	r7, #28
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40014000 	.word	0x40014000
 8004380:	40014400 	.word	0x40014400
 8004384:	40014800 	.word	0x40014800

08004388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	f023 0210 	bic.w	r2, r3, #16
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f023 0320 	bic.w	r3, r3, #32
 80043d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a24      	ldr	r2, [pc, #144]	@ (8004478 <TIM_OC2_SetConfig+0xf0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d10d      	bne.n	8004408 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004406:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a1b      	ldr	r2, [pc, #108]	@ (8004478 <TIM_OC2_SetConfig+0xf0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00b      	beq.n	8004428 <TIM_OC2_SetConfig+0xa0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a1a      	ldr	r2, [pc, #104]	@ (800447c <TIM_OC2_SetConfig+0xf4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d007      	beq.n	8004428 <TIM_OC2_SetConfig+0xa0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a19      	ldr	r2, [pc, #100]	@ (8004480 <TIM_OC2_SetConfig+0xf8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_OC2_SetConfig+0xa0>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a18      	ldr	r2, [pc, #96]	@ (8004484 <TIM_OC2_SetConfig+0xfc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d113      	bne.n	8004450 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800442e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004436:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40012c00 	.word	0x40012c00
 800447c:	40014000 	.word	0x40014000
 8004480:	40014400 	.word	0x40014400
 8004484:	40014800 	.word	0x40014800

08004488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0303 	bic.w	r3, r3, #3
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a23      	ldr	r2, [pc, #140]	@ (8004574 <TIM_OC3_SetConfig+0xec>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d10d      	bne.n	8004506 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004504:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a1a      	ldr	r2, [pc, #104]	@ (8004574 <TIM_OC3_SetConfig+0xec>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00b      	beq.n	8004526 <TIM_OC3_SetConfig+0x9e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a19      	ldr	r2, [pc, #100]	@ (8004578 <TIM_OC3_SetConfig+0xf0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d007      	beq.n	8004526 <TIM_OC3_SetConfig+0x9e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a18      	ldr	r2, [pc, #96]	@ (800457c <TIM_OC3_SetConfig+0xf4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d003      	beq.n	8004526 <TIM_OC3_SetConfig+0x9e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a17      	ldr	r2, [pc, #92]	@ (8004580 <TIM_OC3_SetConfig+0xf8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d113      	bne.n	800454e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800452c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	621a      	str	r2, [r3, #32]
}
 8004568:	bf00      	nop
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40014000 	.word	0x40014000
 800457c:	40014400 	.word	0x40014400
 8004580:	40014800 	.word	0x40014800

08004584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	031b      	lsls	r3, r3, #12
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a16      	ldr	r2, [pc, #88]	@ (800463c <TIM_OC4_SetConfig+0xb8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00b      	beq.n	8004600 <TIM_OC4_SetConfig+0x7c>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a15      	ldr	r2, [pc, #84]	@ (8004640 <TIM_OC4_SetConfig+0xbc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d007      	beq.n	8004600 <TIM_OC4_SetConfig+0x7c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a14      	ldr	r2, [pc, #80]	@ (8004644 <TIM_OC4_SetConfig+0xc0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d003      	beq.n	8004600 <TIM_OC4_SetConfig+0x7c>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a13      	ldr	r2, [pc, #76]	@ (8004648 <TIM_OC4_SetConfig+0xc4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d109      	bne.n	8004614 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004606:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	019b      	lsls	r3, r3, #6
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40012c00 	.word	0x40012c00
 8004640:	40014000 	.word	0x40014000
 8004644:	40014400 	.word	0x40014400
 8004648:	40014800 	.word	0x40014800

0800464c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800467a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004690:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a15      	ldr	r2, [pc, #84]	@ (80046f8 <TIM_OC5_SetConfig+0xac>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00b      	beq.n	80046be <TIM_OC5_SetConfig+0x72>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a14      	ldr	r2, [pc, #80]	@ (80046fc <TIM_OC5_SetConfig+0xb0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d007      	beq.n	80046be <TIM_OC5_SetConfig+0x72>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a13      	ldr	r2, [pc, #76]	@ (8004700 <TIM_OC5_SetConfig+0xb4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_OC5_SetConfig+0x72>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a12      	ldr	r2, [pc, #72]	@ (8004704 <TIM_OC5_SetConfig+0xb8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d109      	bne.n	80046d2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	621a      	str	r2, [r3, #32]
}
 80046ec:	bf00      	nop
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	40012c00 	.word	0x40012c00
 80046fc:	40014000 	.word	0x40014000
 8004700:	40014400 	.word	0x40014400
 8004704:	40014800 	.word	0x40014800

08004708 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800473a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800474e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	051b      	lsls	r3, r3, #20
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a16      	ldr	r2, [pc, #88]	@ (80047b8 <TIM_OC6_SetConfig+0xb0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00b      	beq.n	800477c <TIM_OC6_SetConfig+0x74>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a15      	ldr	r2, [pc, #84]	@ (80047bc <TIM_OC6_SetConfig+0xb4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d007      	beq.n	800477c <TIM_OC6_SetConfig+0x74>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a14      	ldr	r2, [pc, #80]	@ (80047c0 <TIM_OC6_SetConfig+0xb8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_OC6_SetConfig+0x74>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a13      	ldr	r2, [pc, #76]	@ (80047c4 <TIM_OC6_SetConfig+0xbc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d109      	bne.n	8004790 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004782:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	029b      	lsls	r3, r3, #10
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40012c00 	.word	0x40012c00
 80047bc:	40014000 	.word	0x40014000
 80047c0:	40014400 	.word	0x40014400
 80047c4:	40014800 	.word	0x40014800

080047c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f023 0201 	bic.w	r2, r3, #1
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f023 030a 	bic.w	r3, r3, #10
 8004804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004826:	b480      	push	{r7}
 8004828:	b087      	sub	sp, #28
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f023 0210 	bic.w	r2, r3, #16
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004850:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	031b      	lsls	r3, r3, #12
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004862:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800489c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f043 0307 	orr.w	r3, r3, #7
 80048a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	609a      	str	r2, [r3, #8]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	021a      	lsls	r2, r3, #8
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	431a      	orrs	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	609a      	str	r2, [r3, #8]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	2201      	movs	r2, #1
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1a      	ldr	r2, [r3, #32]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	43db      	mvns	r3, r3
 800491e:	401a      	ands	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a1a      	ldr	r2, [r3, #32]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	fa01 f303 	lsl.w	r3, r1, r3
 8004934:	431a      	orrs	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	621a      	str	r2, [r3, #32]
}
 800493a:	bf00      	nop
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800495c:	2302      	movs	r3, #2
 800495e:	e054      	b.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a24      	ldr	r2, [pc, #144]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d108      	bne.n	800499c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004990:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a17      	ldr	r2, [pc, #92]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00e      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c8:	d009      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a13      	ldr	r2, [pc, #76]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a11      	ldr	r2, [pc, #68]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d10c      	bne.n	80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40012c00 	.word	0x40012c00
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40014000 	.word	0x40014000

08004a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e040      	b.n	8004af4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc fcf0 	bl	8001468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2224      	movs	r2, #36	@ 0x24
 8004a8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f9e8 	bl	8004e7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f8af 	bl	8004c10 <UART_SetConfig>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e01b      	b.n	8004af4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fa67 	bl	8004fc0 <UART_CheckIdleState>
 8004af2:	4603      	mov	r3, r0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	@ 0x28
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d177      	bne.n	8004c04 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_UART_Transmit+0x24>
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e070      	b.n	8004c06 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2221      	movs	r2, #33	@ 0x21
 8004b30:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b32:	f7fc fe75 	bl	8001820 <HAL_GetTick>
 8004b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	88fa      	ldrh	r2, [r7, #6]
 8004b3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b50:	d108      	bne.n	8004b64 <HAL_UART_Transmit+0x68>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d104      	bne.n	8004b64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	e003      	b.n	8004b6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b6c:	e02f      	b.n	8004bce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	2180      	movs	r1, #128	@ 0x80
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 fac9 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e03b      	b.n	8004c06 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	881a      	ldrh	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba0:	b292      	uxth	r2, r2
 8004ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e007      	b.n	8004bbc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	781a      	ldrb	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1c9      	bne.n	8004b6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	2140      	movs	r1, #64	@ 0x40
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fa93 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d004      	beq.n	8004bfa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e005      	b.n	8004c06 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e000      	b.n	8004c06 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
  }
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b8a      	ldr	r3, [pc, #552]	@ (8004e64 <UART_SetConfig+0x254>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	6979      	ldr	r1, [r7, #20]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a78      	ldr	r2, [pc, #480]	@ (8004e68 <UART_SetConfig+0x258>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d120      	bne.n	8004cce <UART_SetConfig+0xbe>
 8004c8c:	4b77      	ldr	r3, [pc, #476]	@ (8004e6c <UART_SetConfig+0x25c>)
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d817      	bhi.n	8004cc8 <UART_SetConfig+0xb8>
 8004c98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca0 <UART_SetConfig+0x90>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004cb1 	.word	0x08004cb1
 8004ca4:	08004cbd 	.word	0x08004cbd
 8004ca8:	08004cc3 	.word	0x08004cc3
 8004cac:	08004cb7 	.word	0x08004cb7
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	77fb      	strb	r3, [r7, #31]
 8004cb4:	e01d      	b.n	8004cf2 <UART_SetConfig+0xe2>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	77fb      	strb	r3, [r7, #31]
 8004cba:	e01a      	b.n	8004cf2 <UART_SetConfig+0xe2>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	77fb      	strb	r3, [r7, #31]
 8004cc0:	e017      	b.n	8004cf2 <UART_SetConfig+0xe2>
 8004cc2:	2308      	movs	r3, #8
 8004cc4:	77fb      	strb	r3, [r7, #31]
 8004cc6:	e014      	b.n	8004cf2 <UART_SetConfig+0xe2>
 8004cc8:	2310      	movs	r3, #16
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e011      	b.n	8004cf2 <UART_SetConfig+0xe2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a67      	ldr	r2, [pc, #412]	@ (8004e70 <UART_SetConfig+0x260>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d102      	bne.n	8004cde <UART_SetConfig+0xce>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e009      	b.n	8004cf2 <UART_SetConfig+0xe2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a64      	ldr	r2, [pc, #400]	@ (8004e74 <UART_SetConfig+0x264>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d102      	bne.n	8004cee <UART_SetConfig+0xde>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e001      	b.n	8004cf2 <UART_SetConfig+0xe2>
 8004cee:	2310      	movs	r3, #16
 8004cf0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cfa:	d15a      	bne.n	8004db2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004cfc:	7ffb      	ldrb	r3, [r7, #31]
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d827      	bhi.n	8004d52 <UART_SetConfig+0x142>
 8004d02:	a201      	add	r2, pc, #4	@ (adr r2, 8004d08 <UART_SetConfig+0xf8>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d2d 	.word	0x08004d2d
 8004d0c:	08004d35 	.word	0x08004d35
 8004d10:	08004d3d 	.word	0x08004d3d
 8004d14:	08004d53 	.word	0x08004d53
 8004d18:	08004d43 	.word	0x08004d43
 8004d1c:	08004d53 	.word	0x08004d53
 8004d20:	08004d53 	.word	0x08004d53
 8004d24:	08004d53 	.word	0x08004d53
 8004d28:	08004d4b 	.word	0x08004d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d2c:	f7fe fa7a 	bl	8003224 <HAL_RCC_GetPCLK1Freq>
 8004d30:	61b8      	str	r0, [r7, #24]
        break;
 8004d32:	e013      	b.n	8004d5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d34:	f7fe fa98 	bl	8003268 <HAL_RCC_GetPCLK2Freq>
 8004d38:	61b8      	str	r0, [r7, #24]
        break;
 8004d3a:	e00f      	b.n	8004d5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d3c:	4b4e      	ldr	r3, [pc, #312]	@ (8004e78 <UART_SetConfig+0x268>)
 8004d3e:	61bb      	str	r3, [r7, #24]
        break;
 8004d40:	e00c      	b.n	8004d5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d42:	f7fe fa0d 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 8004d46:	61b8      	str	r0, [r7, #24]
        break;
 8004d48:	e008      	b.n	8004d5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d4e:	61bb      	str	r3, [r7, #24]
        break;
 8004d50:	e004      	b.n	8004d5c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	77bb      	strb	r3, [r7, #30]
        break;
 8004d5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d074      	beq.n	8004e4c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	005a      	lsls	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	441a      	add	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b0f      	cmp	r3, #15
 8004d7c:	d916      	bls.n	8004dac <UART_SetConfig+0x19c>
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d84:	d212      	bcs.n	8004dac <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f023 030f 	bic.w	r3, r3, #15
 8004d8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	89fb      	ldrh	r3, [r7, #14]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	89fa      	ldrh	r2, [r7, #14]
 8004da8:	60da      	str	r2, [r3, #12]
 8004daa:	e04f      	b.n	8004e4c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	77bb      	strb	r3, [r7, #30]
 8004db0:	e04c      	b.n	8004e4c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004db2:	7ffb      	ldrb	r3, [r7, #31]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d828      	bhi.n	8004e0a <UART_SetConfig+0x1fa>
 8004db8:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc0 <UART_SetConfig+0x1b0>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004ded 	.word	0x08004ded
 8004dc8:	08004df5 	.word	0x08004df5
 8004dcc:	08004e0b 	.word	0x08004e0b
 8004dd0:	08004dfb 	.word	0x08004dfb
 8004dd4:	08004e0b 	.word	0x08004e0b
 8004dd8:	08004e0b 	.word	0x08004e0b
 8004ddc:	08004e0b 	.word	0x08004e0b
 8004de0:	08004e03 	.word	0x08004e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de4:	f7fe fa1e 	bl	8003224 <HAL_RCC_GetPCLK1Freq>
 8004de8:	61b8      	str	r0, [r7, #24]
        break;
 8004dea:	e013      	b.n	8004e14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dec:	f7fe fa3c 	bl	8003268 <HAL_RCC_GetPCLK2Freq>
 8004df0:	61b8      	str	r0, [r7, #24]
        break;
 8004df2:	e00f      	b.n	8004e14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df4:	4b20      	ldr	r3, [pc, #128]	@ (8004e78 <UART_SetConfig+0x268>)
 8004df6:	61bb      	str	r3, [r7, #24]
        break;
 8004df8:	e00c      	b.n	8004e14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfa:	f7fe f9b1 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 8004dfe:	61b8      	str	r0, [r7, #24]
        break;
 8004e00:	e008      	b.n	8004e14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e06:	61bb      	str	r3, [r7, #24]
        break;
 8004e08:	e004      	b.n	8004e14 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	77bb      	strb	r3, [r7, #30]
        break;
 8004e12:	bf00      	nop
    }

    if (pclk != 0U)
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d018      	beq.n	8004e4c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	085a      	lsrs	r2, r3, #1
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	441a      	add	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b0f      	cmp	r3, #15
 8004e32:	d909      	bls.n	8004e48 <UART_SetConfig+0x238>
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e3a:	d205      	bcs.n	8004e48 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	e001      	b.n	8004e4c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e58:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3720      	adds	r7, #32
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	efff69f3 	.word	0xefff69f3
 8004e68:	40013800 	.word	0x40013800
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	40004400 	.word	0x40004400
 8004e74:	40004800 	.word	0x40004800
 8004e78:	007a1200 	.word	0x007a1200

08004e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01a      	beq.n	8004f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f7a:	d10a      	bne.n	8004f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	605a      	str	r2, [r3, #4]
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b098      	sub	sp, #96	@ 0x60
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fd0:	f7fc fc26 	bl	8001820 <HAL_GetTick>
 8004fd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d12e      	bne.n	8005042 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fec:	2200      	movs	r2, #0
 8004fee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f88c 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d021      	beq.n	8005042 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800500c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005012:	653b      	str	r3, [r7, #80]	@ 0x50
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800501c:	647b      	str	r3, [r7, #68]	@ 0x44
 800501e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005022:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800502a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e6      	bne.n	8004ffe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e062      	b.n	8005108 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b04      	cmp	r3, #4
 800504e:	d149      	bne.n	80050e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005050:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005058:	2200      	movs	r2, #0
 800505a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f856 	bl	8005110 <UART_WaitOnFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d03c      	beq.n	80050e4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	623b      	str	r3, [r7, #32]
   return(result);
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800507e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005088:	633b      	str	r3, [r7, #48]	@ 0x30
 800508a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800508e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e6      	bne.n	800506a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3308      	adds	r3, #8
 80050a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3308      	adds	r3, #8
 80050ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050bc:	61fa      	str	r2, [r7, #28]
 80050be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	69b9      	ldr	r1, [r7, #24]
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	617b      	str	r3, [r7, #20]
   return(result);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e5      	bne.n	800509c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e011      	b.n	8005108 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3758      	adds	r7, #88	@ 0x58
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005120:	e04f      	b.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d04b      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512a:	f7fc fb79 	bl	8001820 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	429a      	cmp	r2, r3
 8005138:	d302      	bcc.n	8005140 <UART_WaitOnFlagUntilTimeout+0x30>
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e04e      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d037      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b80      	cmp	r3, #128	@ 0x80
 8005156:	d034      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b40      	cmp	r3, #64	@ 0x40
 800515c:	d031      	beq.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b08      	cmp	r3, #8
 800516a:	d110      	bne.n	800518e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2208      	movs	r2, #8
 8005172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f838 	bl	80051ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2208      	movs	r2, #8
 800517e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e029      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800519c:	d111      	bne.n	80051c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f81e 	bl	80051ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e00f      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4013      	ands	r3, r2
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	bf0c      	ite	eq
 80051d2:	2301      	moveq	r3, #1
 80051d4:	2300      	movne	r3, #0
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d0a0      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b095      	sub	sp, #84	@ 0x54
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005202:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005210:	643b      	str	r3, [r7, #64]	@ 0x40
 8005212:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800521e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e6      	bne.n	80051f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3308      	adds	r3, #8
 800522a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	61fb      	str	r3, [r7, #28]
   return(result);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3308      	adds	r3, #8
 8005242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005244:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005246:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800524a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e5      	bne.n	8005224 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525c:	2b01      	cmp	r3, #1
 800525e:	d118      	bne.n	8005292 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	60bb      	str	r3, [r7, #8]
   return(result);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f023 0310 	bic.w	r3, r3, #16
 8005274:	647b      	str	r3, [r7, #68]	@ 0x44
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6979      	ldr	r1, [r7, #20]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	613b      	str	r3, [r7, #16]
   return(result);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e6      	bne.n	8005260 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80052a6:	bf00      	nop
 80052a8:	3754      	adds	r7, #84	@ 0x54
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <__cvt>:
 80052b2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b6:	ec57 6b10 	vmov	r6, r7, d0
 80052ba:	2f00      	cmp	r7, #0
 80052bc:	460c      	mov	r4, r1
 80052be:	4619      	mov	r1, r3
 80052c0:	463b      	mov	r3, r7
 80052c2:	bfbb      	ittet	lt
 80052c4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80052c8:	461f      	movlt	r7, r3
 80052ca:	2300      	movge	r3, #0
 80052cc:	232d      	movlt	r3, #45	@ 0x2d
 80052ce:	700b      	strb	r3, [r1, #0]
 80052d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052d2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80052d6:	4691      	mov	r9, r2
 80052d8:	f023 0820 	bic.w	r8, r3, #32
 80052dc:	bfbc      	itt	lt
 80052de:	4632      	movlt	r2, r6
 80052e0:	4616      	movlt	r6, r2
 80052e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052e6:	d005      	beq.n	80052f4 <__cvt+0x42>
 80052e8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80052ec:	d100      	bne.n	80052f0 <__cvt+0x3e>
 80052ee:	3401      	adds	r4, #1
 80052f0:	2102      	movs	r1, #2
 80052f2:	e000      	b.n	80052f6 <__cvt+0x44>
 80052f4:	2103      	movs	r1, #3
 80052f6:	ab03      	add	r3, sp, #12
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	ab02      	add	r3, sp, #8
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	ec47 6b10 	vmov	d0, r6, r7
 8005302:	4653      	mov	r3, sl
 8005304:	4622      	mov	r2, r4
 8005306:	f000 fef7 	bl	80060f8 <_dtoa_r>
 800530a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800530e:	4605      	mov	r5, r0
 8005310:	d119      	bne.n	8005346 <__cvt+0x94>
 8005312:	f019 0f01 	tst.w	r9, #1
 8005316:	d00e      	beq.n	8005336 <__cvt+0x84>
 8005318:	eb00 0904 	add.w	r9, r0, r4
 800531c:	2200      	movs	r2, #0
 800531e:	2300      	movs	r3, #0
 8005320:	4630      	mov	r0, r6
 8005322:	4639      	mov	r1, r7
 8005324:	f7fb fbd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005328:	b108      	cbz	r0, 800532e <__cvt+0x7c>
 800532a:	f8cd 900c 	str.w	r9, [sp, #12]
 800532e:	2230      	movs	r2, #48	@ 0x30
 8005330:	9b03      	ldr	r3, [sp, #12]
 8005332:	454b      	cmp	r3, r9
 8005334:	d31e      	bcc.n	8005374 <__cvt+0xc2>
 8005336:	9b03      	ldr	r3, [sp, #12]
 8005338:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800533a:	1b5b      	subs	r3, r3, r5
 800533c:	4628      	mov	r0, r5
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	b004      	add	sp, #16
 8005342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005346:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800534a:	eb00 0904 	add.w	r9, r0, r4
 800534e:	d1e5      	bne.n	800531c <__cvt+0x6a>
 8005350:	7803      	ldrb	r3, [r0, #0]
 8005352:	2b30      	cmp	r3, #48	@ 0x30
 8005354:	d10a      	bne.n	800536c <__cvt+0xba>
 8005356:	2200      	movs	r2, #0
 8005358:	2300      	movs	r3, #0
 800535a:	4630      	mov	r0, r6
 800535c:	4639      	mov	r1, r7
 800535e:	f7fb fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005362:	b918      	cbnz	r0, 800536c <__cvt+0xba>
 8005364:	f1c4 0401 	rsb	r4, r4, #1
 8005368:	f8ca 4000 	str.w	r4, [sl]
 800536c:	f8da 3000 	ldr.w	r3, [sl]
 8005370:	4499      	add	r9, r3
 8005372:	e7d3      	b.n	800531c <__cvt+0x6a>
 8005374:	1c59      	adds	r1, r3, #1
 8005376:	9103      	str	r1, [sp, #12]
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	e7d9      	b.n	8005330 <__cvt+0x7e>

0800537c <__exponent>:
 800537c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800537e:	2900      	cmp	r1, #0
 8005380:	bfba      	itte	lt
 8005382:	4249      	neglt	r1, r1
 8005384:	232d      	movlt	r3, #45	@ 0x2d
 8005386:	232b      	movge	r3, #43	@ 0x2b
 8005388:	2909      	cmp	r1, #9
 800538a:	7002      	strb	r2, [r0, #0]
 800538c:	7043      	strb	r3, [r0, #1]
 800538e:	dd29      	ble.n	80053e4 <__exponent+0x68>
 8005390:	f10d 0307 	add.w	r3, sp, #7
 8005394:	461d      	mov	r5, r3
 8005396:	270a      	movs	r7, #10
 8005398:	461a      	mov	r2, r3
 800539a:	fbb1 f6f7 	udiv	r6, r1, r7
 800539e:	fb07 1416 	mls	r4, r7, r6, r1
 80053a2:	3430      	adds	r4, #48	@ 0x30
 80053a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80053a8:	460c      	mov	r4, r1
 80053aa:	2c63      	cmp	r4, #99	@ 0x63
 80053ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80053b0:	4631      	mov	r1, r6
 80053b2:	dcf1      	bgt.n	8005398 <__exponent+0x1c>
 80053b4:	3130      	adds	r1, #48	@ 0x30
 80053b6:	1e94      	subs	r4, r2, #2
 80053b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053bc:	1c41      	adds	r1, r0, #1
 80053be:	4623      	mov	r3, r4
 80053c0:	42ab      	cmp	r3, r5
 80053c2:	d30a      	bcc.n	80053da <__exponent+0x5e>
 80053c4:	f10d 0309 	add.w	r3, sp, #9
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	42ac      	cmp	r4, r5
 80053cc:	bf88      	it	hi
 80053ce:	2300      	movhi	r3, #0
 80053d0:	3302      	adds	r3, #2
 80053d2:	4403      	add	r3, r0
 80053d4:	1a18      	subs	r0, r3, r0
 80053d6:	b003      	add	sp, #12
 80053d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053da:	f813 6b01 	ldrb.w	r6, [r3], #1
 80053de:	f801 6f01 	strb.w	r6, [r1, #1]!
 80053e2:	e7ed      	b.n	80053c0 <__exponent+0x44>
 80053e4:	2330      	movs	r3, #48	@ 0x30
 80053e6:	3130      	adds	r1, #48	@ 0x30
 80053e8:	7083      	strb	r3, [r0, #2]
 80053ea:	70c1      	strb	r1, [r0, #3]
 80053ec:	1d03      	adds	r3, r0, #4
 80053ee:	e7f1      	b.n	80053d4 <__exponent+0x58>

080053f0 <_printf_float>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	b08d      	sub	sp, #52	@ 0x34
 80053f6:	460c      	mov	r4, r1
 80053f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80053fc:	4616      	mov	r6, r2
 80053fe:	461f      	mov	r7, r3
 8005400:	4605      	mov	r5, r0
 8005402:	f000 fd77 	bl	8005ef4 <_localeconv_r>
 8005406:	6803      	ldr	r3, [r0, #0]
 8005408:	9304      	str	r3, [sp, #16]
 800540a:	4618      	mov	r0, r3
 800540c:	f7fa ff30 	bl	8000270 <strlen>
 8005410:	2300      	movs	r3, #0
 8005412:	930a      	str	r3, [sp, #40]	@ 0x28
 8005414:	f8d8 3000 	ldr.w	r3, [r8]
 8005418:	9005      	str	r0, [sp, #20]
 800541a:	3307      	adds	r3, #7
 800541c:	f023 0307 	bic.w	r3, r3, #7
 8005420:	f103 0208 	add.w	r2, r3, #8
 8005424:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005428:	f8d4 b000 	ldr.w	fp, [r4]
 800542c:	f8c8 2000 	str.w	r2, [r8]
 8005430:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005434:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005438:	9307      	str	r3, [sp, #28]
 800543a:	f8cd 8018 	str.w	r8, [sp, #24]
 800543e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005446:	4b9c      	ldr	r3, [pc, #624]	@ (80056b8 <_printf_float+0x2c8>)
 8005448:	f04f 32ff 	mov.w	r2, #4294967295
 800544c:	f7fb fb6e 	bl	8000b2c <__aeabi_dcmpun>
 8005450:	bb70      	cbnz	r0, 80054b0 <_printf_float+0xc0>
 8005452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005456:	4b98      	ldr	r3, [pc, #608]	@ (80056b8 <_printf_float+0x2c8>)
 8005458:	f04f 32ff 	mov.w	r2, #4294967295
 800545c:	f7fb fb48 	bl	8000af0 <__aeabi_dcmple>
 8005460:	bb30      	cbnz	r0, 80054b0 <_printf_float+0xc0>
 8005462:	2200      	movs	r2, #0
 8005464:	2300      	movs	r3, #0
 8005466:	4640      	mov	r0, r8
 8005468:	4649      	mov	r1, r9
 800546a:	f7fb fb37 	bl	8000adc <__aeabi_dcmplt>
 800546e:	b110      	cbz	r0, 8005476 <_printf_float+0x86>
 8005470:	232d      	movs	r3, #45	@ 0x2d
 8005472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005476:	4a91      	ldr	r2, [pc, #580]	@ (80056bc <_printf_float+0x2cc>)
 8005478:	4b91      	ldr	r3, [pc, #580]	@ (80056c0 <_printf_float+0x2d0>)
 800547a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800547e:	bf94      	ite	ls
 8005480:	4690      	movls	r8, r2
 8005482:	4698      	movhi	r8, r3
 8005484:	2303      	movs	r3, #3
 8005486:	6123      	str	r3, [r4, #16]
 8005488:	f02b 0304 	bic.w	r3, fp, #4
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	f04f 0900 	mov.w	r9, #0
 8005492:	9700      	str	r7, [sp, #0]
 8005494:	4633      	mov	r3, r6
 8005496:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005498:	4621      	mov	r1, r4
 800549a:	4628      	mov	r0, r5
 800549c:	f000 f9d2 	bl	8005844 <_printf_common>
 80054a0:	3001      	adds	r0, #1
 80054a2:	f040 808d 	bne.w	80055c0 <_printf_float+0x1d0>
 80054a6:	f04f 30ff 	mov.w	r0, #4294967295
 80054aa:	b00d      	add	sp, #52	@ 0x34
 80054ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b0:	4642      	mov	r2, r8
 80054b2:	464b      	mov	r3, r9
 80054b4:	4640      	mov	r0, r8
 80054b6:	4649      	mov	r1, r9
 80054b8:	f7fb fb38 	bl	8000b2c <__aeabi_dcmpun>
 80054bc:	b140      	cbz	r0, 80054d0 <_printf_float+0xe0>
 80054be:	464b      	mov	r3, r9
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bfbc      	itt	lt
 80054c4:	232d      	movlt	r3, #45	@ 0x2d
 80054c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054ca:	4a7e      	ldr	r2, [pc, #504]	@ (80056c4 <_printf_float+0x2d4>)
 80054cc:	4b7e      	ldr	r3, [pc, #504]	@ (80056c8 <_printf_float+0x2d8>)
 80054ce:	e7d4      	b.n	800547a <_printf_float+0x8a>
 80054d0:	6863      	ldr	r3, [r4, #4]
 80054d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80054d6:	9206      	str	r2, [sp, #24]
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	d13b      	bne.n	8005554 <_printf_float+0x164>
 80054dc:	2306      	movs	r3, #6
 80054de:	6063      	str	r3, [r4, #4]
 80054e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80054e4:	2300      	movs	r3, #0
 80054e6:	6022      	str	r2, [r4, #0]
 80054e8:	9303      	str	r3, [sp, #12]
 80054ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80054ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80054f0:	ab09      	add	r3, sp, #36	@ 0x24
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	6861      	ldr	r1, [r4, #4]
 80054f6:	ec49 8b10 	vmov	d0, r8, r9
 80054fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80054fe:	4628      	mov	r0, r5
 8005500:	f7ff fed7 	bl	80052b2 <__cvt>
 8005504:	9b06      	ldr	r3, [sp, #24]
 8005506:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005508:	2b47      	cmp	r3, #71	@ 0x47
 800550a:	4680      	mov	r8, r0
 800550c:	d129      	bne.n	8005562 <_printf_float+0x172>
 800550e:	1cc8      	adds	r0, r1, #3
 8005510:	db02      	blt.n	8005518 <_printf_float+0x128>
 8005512:	6863      	ldr	r3, [r4, #4]
 8005514:	4299      	cmp	r1, r3
 8005516:	dd41      	ble.n	800559c <_printf_float+0x1ac>
 8005518:	f1aa 0a02 	sub.w	sl, sl, #2
 800551c:	fa5f fa8a 	uxtb.w	sl, sl
 8005520:	3901      	subs	r1, #1
 8005522:	4652      	mov	r2, sl
 8005524:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005528:	9109      	str	r1, [sp, #36]	@ 0x24
 800552a:	f7ff ff27 	bl	800537c <__exponent>
 800552e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005530:	1813      	adds	r3, r2, r0
 8005532:	2a01      	cmp	r2, #1
 8005534:	4681      	mov	r9, r0
 8005536:	6123      	str	r3, [r4, #16]
 8005538:	dc02      	bgt.n	8005540 <_printf_float+0x150>
 800553a:	6822      	ldr	r2, [r4, #0]
 800553c:	07d2      	lsls	r2, r2, #31
 800553e:	d501      	bpl.n	8005544 <_printf_float+0x154>
 8005540:	3301      	adds	r3, #1
 8005542:	6123      	str	r3, [r4, #16]
 8005544:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0a2      	beq.n	8005492 <_printf_float+0xa2>
 800554c:	232d      	movs	r3, #45	@ 0x2d
 800554e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005552:	e79e      	b.n	8005492 <_printf_float+0xa2>
 8005554:	9a06      	ldr	r2, [sp, #24]
 8005556:	2a47      	cmp	r2, #71	@ 0x47
 8005558:	d1c2      	bne.n	80054e0 <_printf_float+0xf0>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1c0      	bne.n	80054e0 <_printf_float+0xf0>
 800555e:	2301      	movs	r3, #1
 8005560:	e7bd      	b.n	80054de <_printf_float+0xee>
 8005562:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005566:	d9db      	bls.n	8005520 <_printf_float+0x130>
 8005568:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800556c:	d118      	bne.n	80055a0 <_printf_float+0x1b0>
 800556e:	2900      	cmp	r1, #0
 8005570:	6863      	ldr	r3, [r4, #4]
 8005572:	dd0b      	ble.n	800558c <_printf_float+0x19c>
 8005574:	6121      	str	r1, [r4, #16]
 8005576:	b913      	cbnz	r3, 800557e <_printf_float+0x18e>
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	07d0      	lsls	r0, r2, #31
 800557c:	d502      	bpl.n	8005584 <_printf_float+0x194>
 800557e:	3301      	adds	r3, #1
 8005580:	440b      	add	r3, r1
 8005582:	6123      	str	r3, [r4, #16]
 8005584:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005586:	f04f 0900 	mov.w	r9, #0
 800558a:	e7db      	b.n	8005544 <_printf_float+0x154>
 800558c:	b913      	cbnz	r3, 8005594 <_printf_float+0x1a4>
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	07d2      	lsls	r2, r2, #31
 8005592:	d501      	bpl.n	8005598 <_printf_float+0x1a8>
 8005594:	3302      	adds	r3, #2
 8005596:	e7f4      	b.n	8005582 <_printf_float+0x192>
 8005598:	2301      	movs	r3, #1
 800559a:	e7f2      	b.n	8005582 <_printf_float+0x192>
 800559c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80055a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055a2:	4299      	cmp	r1, r3
 80055a4:	db05      	blt.n	80055b2 <_printf_float+0x1c2>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	6121      	str	r1, [r4, #16]
 80055aa:	07d8      	lsls	r0, r3, #31
 80055ac:	d5ea      	bpl.n	8005584 <_printf_float+0x194>
 80055ae:	1c4b      	adds	r3, r1, #1
 80055b0:	e7e7      	b.n	8005582 <_printf_float+0x192>
 80055b2:	2900      	cmp	r1, #0
 80055b4:	bfd4      	ite	le
 80055b6:	f1c1 0202 	rsble	r2, r1, #2
 80055ba:	2201      	movgt	r2, #1
 80055bc:	4413      	add	r3, r2
 80055be:	e7e0      	b.n	8005582 <_printf_float+0x192>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	055a      	lsls	r2, r3, #21
 80055c4:	d407      	bmi.n	80055d6 <_printf_float+0x1e6>
 80055c6:	6923      	ldr	r3, [r4, #16]
 80055c8:	4642      	mov	r2, r8
 80055ca:	4631      	mov	r1, r6
 80055cc:	4628      	mov	r0, r5
 80055ce:	47b8      	blx	r7
 80055d0:	3001      	adds	r0, #1
 80055d2:	d12b      	bne.n	800562c <_printf_float+0x23c>
 80055d4:	e767      	b.n	80054a6 <_printf_float+0xb6>
 80055d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055da:	f240 80dd 	bls.w	8005798 <_printf_float+0x3a8>
 80055de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055e2:	2200      	movs	r2, #0
 80055e4:	2300      	movs	r3, #0
 80055e6:	f7fb fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d033      	beq.n	8005656 <_printf_float+0x266>
 80055ee:	4a37      	ldr	r2, [pc, #220]	@ (80056cc <_printf_float+0x2dc>)
 80055f0:	2301      	movs	r3, #1
 80055f2:	4631      	mov	r1, r6
 80055f4:	4628      	mov	r0, r5
 80055f6:	47b8      	blx	r7
 80055f8:	3001      	adds	r0, #1
 80055fa:	f43f af54 	beq.w	80054a6 <_printf_float+0xb6>
 80055fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005602:	4543      	cmp	r3, r8
 8005604:	db02      	blt.n	800560c <_printf_float+0x21c>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	07d8      	lsls	r0, r3, #31
 800560a:	d50f      	bpl.n	800562c <_printf_float+0x23c>
 800560c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005610:	4631      	mov	r1, r6
 8005612:	4628      	mov	r0, r5
 8005614:	47b8      	blx	r7
 8005616:	3001      	adds	r0, #1
 8005618:	f43f af45 	beq.w	80054a6 <_printf_float+0xb6>
 800561c:	f04f 0900 	mov.w	r9, #0
 8005620:	f108 38ff 	add.w	r8, r8, #4294967295
 8005624:	f104 0a1a 	add.w	sl, r4, #26
 8005628:	45c8      	cmp	r8, r9
 800562a:	dc09      	bgt.n	8005640 <_printf_float+0x250>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	079b      	lsls	r3, r3, #30
 8005630:	f100 8103 	bmi.w	800583a <_printf_float+0x44a>
 8005634:	68e0      	ldr	r0, [r4, #12]
 8005636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005638:	4298      	cmp	r0, r3
 800563a:	bfb8      	it	lt
 800563c:	4618      	movlt	r0, r3
 800563e:	e734      	b.n	80054aa <_printf_float+0xba>
 8005640:	2301      	movs	r3, #1
 8005642:	4652      	mov	r2, sl
 8005644:	4631      	mov	r1, r6
 8005646:	4628      	mov	r0, r5
 8005648:	47b8      	blx	r7
 800564a:	3001      	adds	r0, #1
 800564c:	f43f af2b 	beq.w	80054a6 <_printf_float+0xb6>
 8005650:	f109 0901 	add.w	r9, r9, #1
 8005654:	e7e8      	b.n	8005628 <_printf_float+0x238>
 8005656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	dc39      	bgt.n	80056d0 <_printf_float+0x2e0>
 800565c:	4a1b      	ldr	r2, [pc, #108]	@ (80056cc <_printf_float+0x2dc>)
 800565e:	2301      	movs	r3, #1
 8005660:	4631      	mov	r1, r6
 8005662:	4628      	mov	r0, r5
 8005664:	47b8      	blx	r7
 8005666:	3001      	adds	r0, #1
 8005668:	f43f af1d 	beq.w	80054a6 <_printf_float+0xb6>
 800566c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005670:	ea59 0303 	orrs.w	r3, r9, r3
 8005674:	d102      	bne.n	800567c <_printf_float+0x28c>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	07d9      	lsls	r1, r3, #31
 800567a:	d5d7      	bpl.n	800562c <_printf_float+0x23c>
 800567c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005680:	4631      	mov	r1, r6
 8005682:	4628      	mov	r0, r5
 8005684:	47b8      	blx	r7
 8005686:	3001      	adds	r0, #1
 8005688:	f43f af0d 	beq.w	80054a6 <_printf_float+0xb6>
 800568c:	f04f 0a00 	mov.w	sl, #0
 8005690:	f104 0b1a 	add.w	fp, r4, #26
 8005694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005696:	425b      	negs	r3, r3
 8005698:	4553      	cmp	r3, sl
 800569a:	dc01      	bgt.n	80056a0 <_printf_float+0x2b0>
 800569c:	464b      	mov	r3, r9
 800569e:	e793      	b.n	80055c8 <_printf_float+0x1d8>
 80056a0:	2301      	movs	r3, #1
 80056a2:	465a      	mov	r2, fp
 80056a4:	4631      	mov	r1, r6
 80056a6:	4628      	mov	r0, r5
 80056a8:	47b8      	blx	r7
 80056aa:	3001      	adds	r0, #1
 80056ac:	f43f aefb 	beq.w	80054a6 <_printf_float+0xb6>
 80056b0:	f10a 0a01 	add.w	sl, sl, #1
 80056b4:	e7ee      	b.n	8005694 <_printf_float+0x2a4>
 80056b6:	bf00      	nop
 80056b8:	7fefffff 	.word	0x7fefffff
 80056bc:	08007d78 	.word	0x08007d78
 80056c0:	08007d7c 	.word	0x08007d7c
 80056c4:	08007d80 	.word	0x08007d80
 80056c8:	08007d84 	.word	0x08007d84
 80056cc:	08007d88 	.word	0x08007d88
 80056d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056d6:	4553      	cmp	r3, sl
 80056d8:	bfa8      	it	ge
 80056da:	4653      	movge	r3, sl
 80056dc:	2b00      	cmp	r3, #0
 80056de:	4699      	mov	r9, r3
 80056e0:	dc36      	bgt.n	8005750 <_printf_float+0x360>
 80056e2:	f04f 0b00 	mov.w	fp, #0
 80056e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056ea:	f104 021a 	add.w	r2, r4, #26
 80056ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056f0:	9306      	str	r3, [sp, #24]
 80056f2:	eba3 0309 	sub.w	r3, r3, r9
 80056f6:	455b      	cmp	r3, fp
 80056f8:	dc31      	bgt.n	800575e <_printf_float+0x36e>
 80056fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056fc:	459a      	cmp	sl, r3
 80056fe:	dc3a      	bgt.n	8005776 <_printf_float+0x386>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	07da      	lsls	r2, r3, #31
 8005704:	d437      	bmi.n	8005776 <_printf_float+0x386>
 8005706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005708:	ebaa 0903 	sub.w	r9, sl, r3
 800570c:	9b06      	ldr	r3, [sp, #24]
 800570e:	ebaa 0303 	sub.w	r3, sl, r3
 8005712:	4599      	cmp	r9, r3
 8005714:	bfa8      	it	ge
 8005716:	4699      	movge	r9, r3
 8005718:	f1b9 0f00 	cmp.w	r9, #0
 800571c:	dc33      	bgt.n	8005786 <_printf_float+0x396>
 800571e:	f04f 0800 	mov.w	r8, #0
 8005722:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005726:	f104 0b1a 	add.w	fp, r4, #26
 800572a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800572c:	ebaa 0303 	sub.w	r3, sl, r3
 8005730:	eba3 0309 	sub.w	r3, r3, r9
 8005734:	4543      	cmp	r3, r8
 8005736:	f77f af79 	ble.w	800562c <_printf_float+0x23c>
 800573a:	2301      	movs	r3, #1
 800573c:	465a      	mov	r2, fp
 800573e:	4631      	mov	r1, r6
 8005740:	4628      	mov	r0, r5
 8005742:	47b8      	blx	r7
 8005744:	3001      	adds	r0, #1
 8005746:	f43f aeae 	beq.w	80054a6 <_printf_float+0xb6>
 800574a:	f108 0801 	add.w	r8, r8, #1
 800574e:	e7ec      	b.n	800572a <_printf_float+0x33a>
 8005750:	4642      	mov	r2, r8
 8005752:	4631      	mov	r1, r6
 8005754:	4628      	mov	r0, r5
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	d1c2      	bne.n	80056e2 <_printf_float+0x2f2>
 800575c:	e6a3      	b.n	80054a6 <_printf_float+0xb6>
 800575e:	2301      	movs	r3, #1
 8005760:	4631      	mov	r1, r6
 8005762:	4628      	mov	r0, r5
 8005764:	9206      	str	r2, [sp, #24]
 8005766:	47b8      	blx	r7
 8005768:	3001      	adds	r0, #1
 800576a:	f43f ae9c 	beq.w	80054a6 <_printf_float+0xb6>
 800576e:	9a06      	ldr	r2, [sp, #24]
 8005770:	f10b 0b01 	add.w	fp, fp, #1
 8005774:	e7bb      	b.n	80056ee <_printf_float+0x2fe>
 8005776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800577a:	4631      	mov	r1, r6
 800577c:	4628      	mov	r0, r5
 800577e:	47b8      	blx	r7
 8005780:	3001      	adds	r0, #1
 8005782:	d1c0      	bne.n	8005706 <_printf_float+0x316>
 8005784:	e68f      	b.n	80054a6 <_printf_float+0xb6>
 8005786:	9a06      	ldr	r2, [sp, #24]
 8005788:	464b      	mov	r3, r9
 800578a:	4442      	add	r2, r8
 800578c:	4631      	mov	r1, r6
 800578e:	4628      	mov	r0, r5
 8005790:	47b8      	blx	r7
 8005792:	3001      	adds	r0, #1
 8005794:	d1c3      	bne.n	800571e <_printf_float+0x32e>
 8005796:	e686      	b.n	80054a6 <_printf_float+0xb6>
 8005798:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800579c:	f1ba 0f01 	cmp.w	sl, #1
 80057a0:	dc01      	bgt.n	80057a6 <_printf_float+0x3b6>
 80057a2:	07db      	lsls	r3, r3, #31
 80057a4:	d536      	bpl.n	8005814 <_printf_float+0x424>
 80057a6:	2301      	movs	r3, #1
 80057a8:	4642      	mov	r2, r8
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b8      	blx	r7
 80057b0:	3001      	adds	r0, #1
 80057b2:	f43f ae78 	beq.w	80054a6 <_printf_float+0xb6>
 80057b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ba:	4631      	mov	r1, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	47b8      	blx	r7
 80057c0:	3001      	adds	r0, #1
 80057c2:	f43f ae70 	beq.w	80054a6 <_printf_float+0xb6>
 80057c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057ca:	2200      	movs	r2, #0
 80057cc:	2300      	movs	r3, #0
 80057ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057d2:	f7fb f979 	bl	8000ac8 <__aeabi_dcmpeq>
 80057d6:	b9c0      	cbnz	r0, 800580a <_printf_float+0x41a>
 80057d8:	4653      	mov	r3, sl
 80057da:	f108 0201 	add.w	r2, r8, #1
 80057de:	4631      	mov	r1, r6
 80057e0:	4628      	mov	r0, r5
 80057e2:	47b8      	blx	r7
 80057e4:	3001      	adds	r0, #1
 80057e6:	d10c      	bne.n	8005802 <_printf_float+0x412>
 80057e8:	e65d      	b.n	80054a6 <_printf_float+0xb6>
 80057ea:	2301      	movs	r3, #1
 80057ec:	465a      	mov	r2, fp
 80057ee:	4631      	mov	r1, r6
 80057f0:	4628      	mov	r0, r5
 80057f2:	47b8      	blx	r7
 80057f4:	3001      	adds	r0, #1
 80057f6:	f43f ae56 	beq.w	80054a6 <_printf_float+0xb6>
 80057fa:	f108 0801 	add.w	r8, r8, #1
 80057fe:	45d0      	cmp	r8, sl
 8005800:	dbf3      	blt.n	80057ea <_printf_float+0x3fa>
 8005802:	464b      	mov	r3, r9
 8005804:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005808:	e6df      	b.n	80055ca <_printf_float+0x1da>
 800580a:	f04f 0800 	mov.w	r8, #0
 800580e:	f104 0b1a 	add.w	fp, r4, #26
 8005812:	e7f4      	b.n	80057fe <_printf_float+0x40e>
 8005814:	2301      	movs	r3, #1
 8005816:	4642      	mov	r2, r8
 8005818:	e7e1      	b.n	80057de <_printf_float+0x3ee>
 800581a:	2301      	movs	r3, #1
 800581c:	464a      	mov	r2, r9
 800581e:	4631      	mov	r1, r6
 8005820:	4628      	mov	r0, r5
 8005822:	47b8      	blx	r7
 8005824:	3001      	adds	r0, #1
 8005826:	f43f ae3e 	beq.w	80054a6 <_printf_float+0xb6>
 800582a:	f108 0801 	add.w	r8, r8, #1
 800582e:	68e3      	ldr	r3, [r4, #12]
 8005830:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005832:	1a5b      	subs	r3, r3, r1
 8005834:	4543      	cmp	r3, r8
 8005836:	dcf0      	bgt.n	800581a <_printf_float+0x42a>
 8005838:	e6fc      	b.n	8005634 <_printf_float+0x244>
 800583a:	f04f 0800 	mov.w	r8, #0
 800583e:	f104 0919 	add.w	r9, r4, #25
 8005842:	e7f4      	b.n	800582e <_printf_float+0x43e>

08005844 <_printf_common>:
 8005844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005848:	4616      	mov	r6, r2
 800584a:	4698      	mov	r8, r3
 800584c:	688a      	ldr	r2, [r1, #8]
 800584e:	690b      	ldr	r3, [r1, #16]
 8005850:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005854:	4293      	cmp	r3, r2
 8005856:	bfb8      	it	lt
 8005858:	4613      	movlt	r3, r2
 800585a:	6033      	str	r3, [r6, #0]
 800585c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005860:	4607      	mov	r7, r0
 8005862:	460c      	mov	r4, r1
 8005864:	b10a      	cbz	r2, 800586a <_printf_common+0x26>
 8005866:	3301      	adds	r3, #1
 8005868:	6033      	str	r3, [r6, #0]
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	0699      	lsls	r1, r3, #26
 800586e:	bf42      	ittt	mi
 8005870:	6833      	ldrmi	r3, [r6, #0]
 8005872:	3302      	addmi	r3, #2
 8005874:	6033      	strmi	r3, [r6, #0]
 8005876:	6825      	ldr	r5, [r4, #0]
 8005878:	f015 0506 	ands.w	r5, r5, #6
 800587c:	d106      	bne.n	800588c <_printf_common+0x48>
 800587e:	f104 0a19 	add.w	sl, r4, #25
 8005882:	68e3      	ldr	r3, [r4, #12]
 8005884:	6832      	ldr	r2, [r6, #0]
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	42ab      	cmp	r3, r5
 800588a:	dc26      	bgt.n	80058da <_printf_common+0x96>
 800588c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005890:	6822      	ldr	r2, [r4, #0]
 8005892:	3b00      	subs	r3, #0
 8005894:	bf18      	it	ne
 8005896:	2301      	movne	r3, #1
 8005898:	0692      	lsls	r2, r2, #26
 800589a:	d42b      	bmi.n	80058f4 <_printf_common+0xb0>
 800589c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058a0:	4641      	mov	r1, r8
 80058a2:	4638      	mov	r0, r7
 80058a4:	47c8      	blx	r9
 80058a6:	3001      	adds	r0, #1
 80058a8:	d01e      	beq.n	80058e8 <_printf_common+0xa4>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	6922      	ldr	r2, [r4, #16]
 80058ae:	f003 0306 	and.w	r3, r3, #6
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	bf02      	ittt	eq
 80058b6:	68e5      	ldreq	r5, [r4, #12]
 80058b8:	6833      	ldreq	r3, [r6, #0]
 80058ba:	1aed      	subeq	r5, r5, r3
 80058bc:	68a3      	ldr	r3, [r4, #8]
 80058be:	bf0c      	ite	eq
 80058c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058c4:	2500      	movne	r5, #0
 80058c6:	4293      	cmp	r3, r2
 80058c8:	bfc4      	itt	gt
 80058ca:	1a9b      	subgt	r3, r3, r2
 80058cc:	18ed      	addgt	r5, r5, r3
 80058ce:	2600      	movs	r6, #0
 80058d0:	341a      	adds	r4, #26
 80058d2:	42b5      	cmp	r5, r6
 80058d4:	d11a      	bne.n	800590c <_printf_common+0xc8>
 80058d6:	2000      	movs	r0, #0
 80058d8:	e008      	b.n	80058ec <_printf_common+0xa8>
 80058da:	2301      	movs	r3, #1
 80058dc:	4652      	mov	r2, sl
 80058de:	4641      	mov	r1, r8
 80058e0:	4638      	mov	r0, r7
 80058e2:	47c8      	blx	r9
 80058e4:	3001      	adds	r0, #1
 80058e6:	d103      	bne.n	80058f0 <_printf_common+0xac>
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f0:	3501      	adds	r5, #1
 80058f2:	e7c6      	b.n	8005882 <_printf_common+0x3e>
 80058f4:	18e1      	adds	r1, r4, r3
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	2030      	movs	r0, #48	@ 0x30
 80058fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058fe:	4422      	add	r2, r4
 8005900:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005904:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005908:	3302      	adds	r3, #2
 800590a:	e7c7      	b.n	800589c <_printf_common+0x58>
 800590c:	2301      	movs	r3, #1
 800590e:	4622      	mov	r2, r4
 8005910:	4641      	mov	r1, r8
 8005912:	4638      	mov	r0, r7
 8005914:	47c8      	blx	r9
 8005916:	3001      	adds	r0, #1
 8005918:	d0e6      	beq.n	80058e8 <_printf_common+0xa4>
 800591a:	3601      	adds	r6, #1
 800591c:	e7d9      	b.n	80058d2 <_printf_common+0x8e>
	...

08005920 <_printf_i>:
 8005920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005924:	7e0f      	ldrb	r7, [r1, #24]
 8005926:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005928:	2f78      	cmp	r7, #120	@ 0x78
 800592a:	4691      	mov	r9, r2
 800592c:	4680      	mov	r8, r0
 800592e:	460c      	mov	r4, r1
 8005930:	469a      	mov	sl, r3
 8005932:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005936:	d807      	bhi.n	8005948 <_printf_i+0x28>
 8005938:	2f62      	cmp	r7, #98	@ 0x62
 800593a:	d80a      	bhi.n	8005952 <_printf_i+0x32>
 800593c:	2f00      	cmp	r7, #0
 800593e:	f000 80d2 	beq.w	8005ae6 <_printf_i+0x1c6>
 8005942:	2f58      	cmp	r7, #88	@ 0x58
 8005944:	f000 80b9 	beq.w	8005aba <_printf_i+0x19a>
 8005948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800594c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005950:	e03a      	b.n	80059c8 <_printf_i+0xa8>
 8005952:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005956:	2b15      	cmp	r3, #21
 8005958:	d8f6      	bhi.n	8005948 <_printf_i+0x28>
 800595a:	a101      	add	r1, pc, #4	@ (adr r1, 8005960 <_printf_i+0x40>)
 800595c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005960:	080059b9 	.word	0x080059b9
 8005964:	080059cd 	.word	0x080059cd
 8005968:	08005949 	.word	0x08005949
 800596c:	08005949 	.word	0x08005949
 8005970:	08005949 	.word	0x08005949
 8005974:	08005949 	.word	0x08005949
 8005978:	080059cd 	.word	0x080059cd
 800597c:	08005949 	.word	0x08005949
 8005980:	08005949 	.word	0x08005949
 8005984:	08005949 	.word	0x08005949
 8005988:	08005949 	.word	0x08005949
 800598c:	08005acd 	.word	0x08005acd
 8005990:	080059f7 	.word	0x080059f7
 8005994:	08005a87 	.word	0x08005a87
 8005998:	08005949 	.word	0x08005949
 800599c:	08005949 	.word	0x08005949
 80059a0:	08005aef 	.word	0x08005aef
 80059a4:	08005949 	.word	0x08005949
 80059a8:	080059f7 	.word	0x080059f7
 80059ac:	08005949 	.word	0x08005949
 80059b0:	08005949 	.word	0x08005949
 80059b4:	08005a8f 	.word	0x08005a8f
 80059b8:	6833      	ldr	r3, [r6, #0]
 80059ba:	1d1a      	adds	r2, r3, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6032      	str	r2, [r6, #0]
 80059c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059c8:	2301      	movs	r3, #1
 80059ca:	e09d      	b.n	8005b08 <_printf_i+0x1e8>
 80059cc:	6833      	ldr	r3, [r6, #0]
 80059ce:	6820      	ldr	r0, [r4, #0]
 80059d0:	1d19      	adds	r1, r3, #4
 80059d2:	6031      	str	r1, [r6, #0]
 80059d4:	0606      	lsls	r6, r0, #24
 80059d6:	d501      	bpl.n	80059dc <_printf_i+0xbc>
 80059d8:	681d      	ldr	r5, [r3, #0]
 80059da:	e003      	b.n	80059e4 <_printf_i+0xc4>
 80059dc:	0645      	lsls	r5, r0, #25
 80059de:	d5fb      	bpl.n	80059d8 <_printf_i+0xb8>
 80059e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	da03      	bge.n	80059f0 <_printf_i+0xd0>
 80059e8:	232d      	movs	r3, #45	@ 0x2d
 80059ea:	426d      	negs	r5, r5
 80059ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059f0:	4859      	ldr	r0, [pc, #356]	@ (8005b58 <_printf_i+0x238>)
 80059f2:	230a      	movs	r3, #10
 80059f4:	e011      	b.n	8005a1a <_printf_i+0xfa>
 80059f6:	6821      	ldr	r1, [r4, #0]
 80059f8:	6833      	ldr	r3, [r6, #0]
 80059fa:	0608      	lsls	r0, r1, #24
 80059fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a00:	d402      	bmi.n	8005a08 <_printf_i+0xe8>
 8005a02:	0649      	lsls	r1, r1, #25
 8005a04:	bf48      	it	mi
 8005a06:	b2ad      	uxthmi	r5, r5
 8005a08:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a0a:	4853      	ldr	r0, [pc, #332]	@ (8005b58 <_printf_i+0x238>)
 8005a0c:	6033      	str	r3, [r6, #0]
 8005a0e:	bf14      	ite	ne
 8005a10:	230a      	movne	r3, #10
 8005a12:	2308      	moveq	r3, #8
 8005a14:	2100      	movs	r1, #0
 8005a16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a1a:	6866      	ldr	r6, [r4, #4]
 8005a1c:	60a6      	str	r6, [r4, #8]
 8005a1e:	2e00      	cmp	r6, #0
 8005a20:	bfa2      	ittt	ge
 8005a22:	6821      	ldrge	r1, [r4, #0]
 8005a24:	f021 0104 	bicge.w	r1, r1, #4
 8005a28:	6021      	strge	r1, [r4, #0]
 8005a2a:	b90d      	cbnz	r5, 8005a30 <_printf_i+0x110>
 8005a2c:	2e00      	cmp	r6, #0
 8005a2e:	d04b      	beq.n	8005ac8 <_printf_i+0x1a8>
 8005a30:	4616      	mov	r6, r2
 8005a32:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a36:	fb03 5711 	mls	r7, r3, r1, r5
 8005a3a:	5dc7      	ldrb	r7, [r0, r7]
 8005a3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a40:	462f      	mov	r7, r5
 8005a42:	42bb      	cmp	r3, r7
 8005a44:	460d      	mov	r5, r1
 8005a46:	d9f4      	bls.n	8005a32 <_printf_i+0x112>
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d10b      	bne.n	8005a64 <_printf_i+0x144>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	07df      	lsls	r7, r3, #31
 8005a50:	d508      	bpl.n	8005a64 <_printf_i+0x144>
 8005a52:	6923      	ldr	r3, [r4, #16]
 8005a54:	6861      	ldr	r1, [r4, #4]
 8005a56:	4299      	cmp	r1, r3
 8005a58:	bfde      	ittt	le
 8005a5a:	2330      	movle	r3, #48	@ 0x30
 8005a5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a64:	1b92      	subs	r2, r2, r6
 8005a66:	6122      	str	r2, [r4, #16]
 8005a68:	f8cd a000 	str.w	sl, [sp]
 8005a6c:	464b      	mov	r3, r9
 8005a6e:	aa03      	add	r2, sp, #12
 8005a70:	4621      	mov	r1, r4
 8005a72:	4640      	mov	r0, r8
 8005a74:	f7ff fee6 	bl	8005844 <_printf_common>
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d14a      	bne.n	8005b12 <_printf_i+0x1f2>
 8005a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a80:	b004      	add	sp, #16
 8005a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	f043 0320 	orr.w	r3, r3, #32
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	4833      	ldr	r0, [pc, #204]	@ (8005b5c <_printf_i+0x23c>)
 8005a90:	2778      	movs	r7, #120	@ 0x78
 8005a92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	6831      	ldr	r1, [r6, #0]
 8005a9a:	061f      	lsls	r7, r3, #24
 8005a9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005aa0:	d402      	bmi.n	8005aa8 <_printf_i+0x188>
 8005aa2:	065f      	lsls	r7, r3, #25
 8005aa4:	bf48      	it	mi
 8005aa6:	b2ad      	uxthmi	r5, r5
 8005aa8:	6031      	str	r1, [r6, #0]
 8005aaa:	07d9      	lsls	r1, r3, #31
 8005aac:	bf44      	itt	mi
 8005aae:	f043 0320 	orrmi.w	r3, r3, #32
 8005ab2:	6023      	strmi	r3, [r4, #0]
 8005ab4:	b11d      	cbz	r5, 8005abe <_printf_i+0x19e>
 8005ab6:	2310      	movs	r3, #16
 8005ab8:	e7ac      	b.n	8005a14 <_printf_i+0xf4>
 8005aba:	4827      	ldr	r0, [pc, #156]	@ (8005b58 <_printf_i+0x238>)
 8005abc:	e7e9      	b.n	8005a92 <_printf_i+0x172>
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	f023 0320 	bic.w	r3, r3, #32
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	e7f6      	b.n	8005ab6 <_printf_i+0x196>
 8005ac8:	4616      	mov	r6, r2
 8005aca:	e7bd      	b.n	8005a48 <_printf_i+0x128>
 8005acc:	6833      	ldr	r3, [r6, #0]
 8005ace:	6825      	ldr	r5, [r4, #0]
 8005ad0:	6961      	ldr	r1, [r4, #20]
 8005ad2:	1d18      	adds	r0, r3, #4
 8005ad4:	6030      	str	r0, [r6, #0]
 8005ad6:	062e      	lsls	r6, r5, #24
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	d501      	bpl.n	8005ae0 <_printf_i+0x1c0>
 8005adc:	6019      	str	r1, [r3, #0]
 8005ade:	e002      	b.n	8005ae6 <_printf_i+0x1c6>
 8005ae0:	0668      	lsls	r0, r5, #25
 8005ae2:	d5fb      	bpl.n	8005adc <_printf_i+0x1bc>
 8005ae4:	8019      	strh	r1, [r3, #0]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	6123      	str	r3, [r4, #16]
 8005aea:	4616      	mov	r6, r2
 8005aec:	e7bc      	b.n	8005a68 <_printf_i+0x148>
 8005aee:	6833      	ldr	r3, [r6, #0]
 8005af0:	1d1a      	adds	r2, r3, #4
 8005af2:	6032      	str	r2, [r6, #0]
 8005af4:	681e      	ldr	r6, [r3, #0]
 8005af6:	6862      	ldr	r2, [r4, #4]
 8005af8:	2100      	movs	r1, #0
 8005afa:	4630      	mov	r0, r6
 8005afc:	f7fa fb68 	bl	80001d0 <memchr>
 8005b00:	b108      	cbz	r0, 8005b06 <_printf_i+0x1e6>
 8005b02:	1b80      	subs	r0, r0, r6
 8005b04:	6060      	str	r0, [r4, #4]
 8005b06:	6863      	ldr	r3, [r4, #4]
 8005b08:	6123      	str	r3, [r4, #16]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b10:	e7aa      	b.n	8005a68 <_printf_i+0x148>
 8005b12:	6923      	ldr	r3, [r4, #16]
 8005b14:	4632      	mov	r2, r6
 8005b16:	4649      	mov	r1, r9
 8005b18:	4640      	mov	r0, r8
 8005b1a:	47d0      	blx	sl
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d0ad      	beq.n	8005a7c <_printf_i+0x15c>
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	079b      	lsls	r3, r3, #30
 8005b24:	d413      	bmi.n	8005b4e <_printf_i+0x22e>
 8005b26:	68e0      	ldr	r0, [r4, #12]
 8005b28:	9b03      	ldr	r3, [sp, #12]
 8005b2a:	4298      	cmp	r0, r3
 8005b2c:	bfb8      	it	lt
 8005b2e:	4618      	movlt	r0, r3
 8005b30:	e7a6      	b.n	8005a80 <_printf_i+0x160>
 8005b32:	2301      	movs	r3, #1
 8005b34:	4632      	mov	r2, r6
 8005b36:	4649      	mov	r1, r9
 8005b38:	4640      	mov	r0, r8
 8005b3a:	47d0      	blx	sl
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d09d      	beq.n	8005a7c <_printf_i+0x15c>
 8005b40:	3501      	adds	r5, #1
 8005b42:	68e3      	ldr	r3, [r4, #12]
 8005b44:	9903      	ldr	r1, [sp, #12]
 8005b46:	1a5b      	subs	r3, r3, r1
 8005b48:	42ab      	cmp	r3, r5
 8005b4a:	dcf2      	bgt.n	8005b32 <_printf_i+0x212>
 8005b4c:	e7eb      	b.n	8005b26 <_printf_i+0x206>
 8005b4e:	2500      	movs	r5, #0
 8005b50:	f104 0619 	add.w	r6, r4, #25
 8005b54:	e7f5      	b.n	8005b42 <_printf_i+0x222>
 8005b56:	bf00      	nop
 8005b58:	08007d8a 	.word	0x08007d8a
 8005b5c:	08007d9b 	.word	0x08007d9b

08005b60 <std>:
 8005b60:	2300      	movs	r3, #0
 8005b62:	b510      	push	{r4, lr}
 8005b64:	4604      	mov	r4, r0
 8005b66:	e9c0 3300 	strd	r3, r3, [r0]
 8005b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b6e:	6083      	str	r3, [r0, #8]
 8005b70:	8181      	strh	r1, [r0, #12]
 8005b72:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b74:	81c2      	strh	r2, [r0, #14]
 8005b76:	6183      	str	r3, [r0, #24]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	2208      	movs	r2, #8
 8005b7c:	305c      	adds	r0, #92	@ 0x5c
 8005b7e:	f000 f9b0 	bl	8005ee2 <memset>
 8005b82:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb8 <std+0x58>)
 8005b84:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b86:	4b0d      	ldr	r3, [pc, #52]	@ (8005bbc <std+0x5c>)
 8005b88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <std+0x60>)
 8005b8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc4 <std+0x64>)
 8005b90:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b92:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc8 <std+0x68>)
 8005b94:	6224      	str	r4, [r4, #32]
 8005b96:	429c      	cmp	r4, r3
 8005b98:	d006      	beq.n	8005ba8 <std+0x48>
 8005b9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b9e:	4294      	cmp	r4, r2
 8005ba0:	d002      	beq.n	8005ba8 <std+0x48>
 8005ba2:	33d0      	adds	r3, #208	@ 0xd0
 8005ba4:	429c      	cmp	r4, r3
 8005ba6:	d105      	bne.n	8005bb4 <std+0x54>
 8005ba8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bb0:	f000 ba14 	b.w	8005fdc <__retarget_lock_init_recursive>
 8005bb4:	bd10      	pop	{r4, pc}
 8005bb6:	bf00      	nop
 8005bb8:	08005e5d 	.word	0x08005e5d
 8005bbc:	08005e7f 	.word	0x08005e7f
 8005bc0:	08005eb7 	.word	0x08005eb7
 8005bc4:	08005edb 	.word	0x08005edb
 8005bc8:	200003bc 	.word	0x200003bc

08005bcc <stdio_exit_handler>:
 8005bcc:	4a02      	ldr	r2, [pc, #8]	@ (8005bd8 <stdio_exit_handler+0xc>)
 8005bce:	4903      	ldr	r1, [pc, #12]	@ (8005bdc <stdio_exit_handler+0x10>)
 8005bd0:	4803      	ldr	r0, [pc, #12]	@ (8005be0 <stdio_exit_handler+0x14>)
 8005bd2:	f000 b869 	b.w	8005ca8 <_fwalk_sglue>
 8005bd6:	bf00      	nop
 8005bd8:	2000002c 	.word	0x2000002c
 8005bdc:	0800768d 	.word	0x0800768d
 8005be0:	2000003c 	.word	0x2000003c

08005be4 <cleanup_stdio>:
 8005be4:	6841      	ldr	r1, [r0, #4]
 8005be6:	4b0c      	ldr	r3, [pc, #48]	@ (8005c18 <cleanup_stdio+0x34>)
 8005be8:	4299      	cmp	r1, r3
 8005bea:	b510      	push	{r4, lr}
 8005bec:	4604      	mov	r4, r0
 8005bee:	d001      	beq.n	8005bf4 <cleanup_stdio+0x10>
 8005bf0:	f001 fd4c 	bl	800768c <_fflush_r>
 8005bf4:	68a1      	ldr	r1, [r4, #8]
 8005bf6:	4b09      	ldr	r3, [pc, #36]	@ (8005c1c <cleanup_stdio+0x38>)
 8005bf8:	4299      	cmp	r1, r3
 8005bfa:	d002      	beq.n	8005c02 <cleanup_stdio+0x1e>
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f001 fd45 	bl	800768c <_fflush_r>
 8005c02:	68e1      	ldr	r1, [r4, #12]
 8005c04:	4b06      	ldr	r3, [pc, #24]	@ (8005c20 <cleanup_stdio+0x3c>)
 8005c06:	4299      	cmp	r1, r3
 8005c08:	d004      	beq.n	8005c14 <cleanup_stdio+0x30>
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c10:	f001 bd3c 	b.w	800768c <_fflush_r>
 8005c14:	bd10      	pop	{r4, pc}
 8005c16:	bf00      	nop
 8005c18:	200003bc 	.word	0x200003bc
 8005c1c:	20000424 	.word	0x20000424
 8005c20:	2000048c 	.word	0x2000048c

08005c24 <global_stdio_init.part.0>:
 8005c24:	b510      	push	{r4, lr}
 8005c26:	4b0b      	ldr	r3, [pc, #44]	@ (8005c54 <global_stdio_init.part.0+0x30>)
 8005c28:	4c0b      	ldr	r4, [pc, #44]	@ (8005c58 <global_stdio_init.part.0+0x34>)
 8005c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8005c5c <global_stdio_init.part.0+0x38>)
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	4620      	mov	r0, r4
 8005c30:	2200      	movs	r2, #0
 8005c32:	2104      	movs	r1, #4
 8005c34:	f7ff ff94 	bl	8005b60 <std>
 8005c38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	2109      	movs	r1, #9
 8005c40:	f7ff ff8e 	bl	8005b60 <std>
 8005c44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c48:	2202      	movs	r2, #2
 8005c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c4e:	2112      	movs	r1, #18
 8005c50:	f7ff bf86 	b.w	8005b60 <std>
 8005c54:	200004f4 	.word	0x200004f4
 8005c58:	200003bc 	.word	0x200003bc
 8005c5c:	08005bcd 	.word	0x08005bcd

08005c60 <__sfp_lock_acquire>:
 8005c60:	4801      	ldr	r0, [pc, #4]	@ (8005c68 <__sfp_lock_acquire+0x8>)
 8005c62:	f000 b9bc 	b.w	8005fde <__retarget_lock_acquire_recursive>
 8005c66:	bf00      	nop
 8005c68:	200004fd 	.word	0x200004fd

08005c6c <__sfp_lock_release>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	@ (8005c74 <__sfp_lock_release+0x8>)
 8005c6e:	f000 b9b7 	b.w	8005fe0 <__retarget_lock_release_recursive>
 8005c72:	bf00      	nop
 8005c74:	200004fd 	.word	0x200004fd

08005c78 <__sinit>:
 8005c78:	b510      	push	{r4, lr}
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	f7ff fff0 	bl	8005c60 <__sfp_lock_acquire>
 8005c80:	6a23      	ldr	r3, [r4, #32]
 8005c82:	b11b      	cbz	r3, 8005c8c <__sinit+0x14>
 8005c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c88:	f7ff bff0 	b.w	8005c6c <__sfp_lock_release>
 8005c8c:	4b04      	ldr	r3, [pc, #16]	@ (8005ca0 <__sinit+0x28>)
 8005c8e:	6223      	str	r3, [r4, #32]
 8005c90:	4b04      	ldr	r3, [pc, #16]	@ (8005ca4 <__sinit+0x2c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1f5      	bne.n	8005c84 <__sinit+0xc>
 8005c98:	f7ff ffc4 	bl	8005c24 <global_stdio_init.part.0>
 8005c9c:	e7f2      	b.n	8005c84 <__sinit+0xc>
 8005c9e:	bf00      	nop
 8005ca0:	08005be5 	.word	0x08005be5
 8005ca4:	200004f4 	.word	0x200004f4

08005ca8 <_fwalk_sglue>:
 8005ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cac:	4607      	mov	r7, r0
 8005cae:	4688      	mov	r8, r1
 8005cb0:	4614      	mov	r4, r2
 8005cb2:	2600      	movs	r6, #0
 8005cb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cb8:	f1b9 0901 	subs.w	r9, r9, #1
 8005cbc:	d505      	bpl.n	8005cca <_fwalk_sglue+0x22>
 8005cbe:	6824      	ldr	r4, [r4, #0]
 8005cc0:	2c00      	cmp	r4, #0
 8005cc2:	d1f7      	bne.n	8005cb4 <_fwalk_sglue+0xc>
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cca:	89ab      	ldrh	r3, [r5, #12]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d907      	bls.n	8005ce0 <_fwalk_sglue+0x38>
 8005cd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	d003      	beq.n	8005ce0 <_fwalk_sglue+0x38>
 8005cd8:	4629      	mov	r1, r5
 8005cda:	4638      	mov	r0, r7
 8005cdc:	47c0      	blx	r8
 8005cde:	4306      	orrs	r6, r0
 8005ce0:	3568      	adds	r5, #104	@ 0x68
 8005ce2:	e7e9      	b.n	8005cb8 <_fwalk_sglue+0x10>

08005ce4 <setbuf>:
 8005ce4:	fab1 f281 	clz	r2, r1
 8005ce8:	0952      	lsrs	r2, r2, #5
 8005cea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cee:	0052      	lsls	r2, r2, #1
 8005cf0:	f000 b800 	b.w	8005cf4 <setvbuf>

08005cf4 <setvbuf>:
 8005cf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cf8:	461d      	mov	r5, r3
 8005cfa:	4b57      	ldr	r3, [pc, #348]	@ (8005e58 <setvbuf+0x164>)
 8005cfc:	681f      	ldr	r7, [r3, #0]
 8005cfe:	4604      	mov	r4, r0
 8005d00:	460e      	mov	r6, r1
 8005d02:	4690      	mov	r8, r2
 8005d04:	b127      	cbz	r7, 8005d10 <setvbuf+0x1c>
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	b913      	cbnz	r3, 8005d10 <setvbuf+0x1c>
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	f7ff ffb4 	bl	8005c78 <__sinit>
 8005d10:	f1b8 0f02 	cmp.w	r8, #2
 8005d14:	d006      	beq.n	8005d24 <setvbuf+0x30>
 8005d16:	f1b8 0f01 	cmp.w	r8, #1
 8005d1a:	f200 809a 	bhi.w	8005e52 <setvbuf+0x15e>
 8005d1e:	2d00      	cmp	r5, #0
 8005d20:	f2c0 8097 	blt.w	8005e52 <setvbuf+0x15e>
 8005d24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d26:	07d9      	lsls	r1, r3, #31
 8005d28:	d405      	bmi.n	8005d36 <setvbuf+0x42>
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	059a      	lsls	r2, r3, #22
 8005d2e:	d402      	bmi.n	8005d36 <setvbuf+0x42>
 8005d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d32:	f000 f954 	bl	8005fde <__retarget_lock_acquire_recursive>
 8005d36:	4621      	mov	r1, r4
 8005d38:	4638      	mov	r0, r7
 8005d3a:	f001 fca7 	bl	800768c <_fflush_r>
 8005d3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d40:	b141      	cbz	r1, 8005d54 <setvbuf+0x60>
 8005d42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d46:	4299      	cmp	r1, r3
 8005d48:	d002      	beq.n	8005d50 <setvbuf+0x5c>
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	f000 ff98 	bl	8006c80 <_free_r>
 8005d50:	2300      	movs	r3, #0
 8005d52:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d54:	2300      	movs	r3, #0
 8005d56:	61a3      	str	r3, [r4, #24]
 8005d58:	6063      	str	r3, [r4, #4]
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	061b      	lsls	r3, r3, #24
 8005d5e:	d503      	bpl.n	8005d68 <setvbuf+0x74>
 8005d60:	6921      	ldr	r1, [r4, #16]
 8005d62:	4638      	mov	r0, r7
 8005d64:	f000 ff8c 	bl	8006c80 <_free_r>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005d6e:	f023 0303 	bic.w	r3, r3, #3
 8005d72:	f1b8 0f02 	cmp.w	r8, #2
 8005d76:	81a3      	strh	r3, [r4, #12]
 8005d78:	d061      	beq.n	8005e3e <setvbuf+0x14a>
 8005d7a:	ab01      	add	r3, sp, #4
 8005d7c:	466a      	mov	r2, sp
 8005d7e:	4621      	mov	r1, r4
 8005d80:	4638      	mov	r0, r7
 8005d82:	f001 fcab 	bl	80076dc <__swhatbuf_r>
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	4318      	orrs	r0, r3
 8005d8a:	81a0      	strh	r0, [r4, #12]
 8005d8c:	bb2d      	cbnz	r5, 8005dda <setvbuf+0xe6>
 8005d8e:	9d00      	ldr	r5, [sp, #0]
 8005d90:	4628      	mov	r0, r5
 8005d92:	f000 ffbf 	bl	8006d14 <malloc>
 8005d96:	4606      	mov	r6, r0
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d152      	bne.n	8005e42 <setvbuf+0x14e>
 8005d9c:	f8dd 9000 	ldr.w	r9, [sp]
 8005da0:	45a9      	cmp	r9, r5
 8005da2:	d140      	bne.n	8005e26 <setvbuf+0x132>
 8005da4:	f04f 35ff 	mov.w	r5, #4294967295
 8005da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dac:	f043 0202 	orr.w	r2, r3, #2
 8005db0:	81a2      	strh	r2, [r4, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	60a2      	str	r2, [r4, #8]
 8005db6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005dba:	6022      	str	r2, [r4, #0]
 8005dbc:	6122      	str	r2, [r4, #16]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	6162      	str	r2, [r4, #20]
 8005dc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005dc4:	07d6      	lsls	r6, r2, #31
 8005dc6:	d404      	bmi.n	8005dd2 <setvbuf+0xde>
 8005dc8:	0598      	lsls	r0, r3, #22
 8005dca:	d402      	bmi.n	8005dd2 <setvbuf+0xde>
 8005dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dce:	f000 f907 	bl	8005fe0 <__retarget_lock_release_recursive>
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	b003      	add	sp, #12
 8005dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dda:	2e00      	cmp	r6, #0
 8005ddc:	d0d8      	beq.n	8005d90 <setvbuf+0x9c>
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	b913      	cbnz	r3, 8005de8 <setvbuf+0xf4>
 8005de2:	4638      	mov	r0, r7
 8005de4:	f7ff ff48 	bl	8005c78 <__sinit>
 8005de8:	f1b8 0f01 	cmp.w	r8, #1
 8005dec:	bf08      	it	eq
 8005dee:	89a3      	ldrheq	r3, [r4, #12]
 8005df0:	6026      	str	r6, [r4, #0]
 8005df2:	bf04      	itt	eq
 8005df4:	f043 0301 	orreq.w	r3, r3, #1
 8005df8:	81a3      	strheq	r3, [r4, #12]
 8005dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dfe:	f013 0208 	ands.w	r2, r3, #8
 8005e02:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005e06:	d01e      	beq.n	8005e46 <setvbuf+0x152>
 8005e08:	07d9      	lsls	r1, r3, #31
 8005e0a:	bf41      	itttt	mi
 8005e0c:	2200      	movmi	r2, #0
 8005e0e:	426d      	negmi	r5, r5
 8005e10:	60a2      	strmi	r2, [r4, #8]
 8005e12:	61a5      	strmi	r5, [r4, #24]
 8005e14:	bf58      	it	pl
 8005e16:	60a5      	strpl	r5, [r4, #8]
 8005e18:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e1a:	07d2      	lsls	r2, r2, #31
 8005e1c:	d401      	bmi.n	8005e22 <setvbuf+0x12e>
 8005e1e:	059b      	lsls	r3, r3, #22
 8005e20:	d513      	bpl.n	8005e4a <setvbuf+0x156>
 8005e22:	2500      	movs	r5, #0
 8005e24:	e7d5      	b.n	8005dd2 <setvbuf+0xde>
 8005e26:	4648      	mov	r0, r9
 8005e28:	f000 ff74 	bl	8006d14 <malloc>
 8005e2c:	4606      	mov	r6, r0
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d0b8      	beq.n	8005da4 <setvbuf+0xb0>
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	464d      	mov	r5, r9
 8005e3c:	e7cf      	b.n	8005dde <setvbuf+0xea>
 8005e3e:	2500      	movs	r5, #0
 8005e40:	e7b2      	b.n	8005da8 <setvbuf+0xb4>
 8005e42:	46a9      	mov	r9, r5
 8005e44:	e7f5      	b.n	8005e32 <setvbuf+0x13e>
 8005e46:	60a2      	str	r2, [r4, #8]
 8005e48:	e7e6      	b.n	8005e18 <setvbuf+0x124>
 8005e4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e4c:	f000 f8c8 	bl	8005fe0 <__retarget_lock_release_recursive>
 8005e50:	e7e7      	b.n	8005e22 <setvbuf+0x12e>
 8005e52:	f04f 35ff 	mov.w	r5, #4294967295
 8005e56:	e7bc      	b.n	8005dd2 <setvbuf+0xde>
 8005e58:	20000038 	.word	0x20000038

08005e5c <__sread>:
 8005e5c:	b510      	push	{r4, lr}
 8005e5e:	460c      	mov	r4, r1
 8005e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e64:	f000 f86c 	bl	8005f40 <_read_r>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	bfab      	itete	ge
 8005e6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e70:	181b      	addge	r3, r3, r0
 8005e72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e76:	bfac      	ite	ge
 8005e78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e7a:	81a3      	strhlt	r3, [r4, #12]
 8005e7c:	bd10      	pop	{r4, pc}

08005e7e <__swrite>:
 8005e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e82:	461f      	mov	r7, r3
 8005e84:	898b      	ldrh	r3, [r1, #12]
 8005e86:	05db      	lsls	r3, r3, #23
 8005e88:	4605      	mov	r5, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	4616      	mov	r6, r2
 8005e8e:	d505      	bpl.n	8005e9c <__swrite+0x1e>
 8005e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e94:	2302      	movs	r3, #2
 8005e96:	2200      	movs	r2, #0
 8005e98:	f000 f840 	bl	8005f1c <_lseek_r>
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ea2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	463b      	mov	r3, r7
 8005eac:	4628      	mov	r0, r5
 8005eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb2:	f000 b857 	b.w	8005f64 <_write_r>

08005eb6 <__sseek>:
 8005eb6:	b510      	push	{r4, lr}
 8005eb8:	460c      	mov	r4, r1
 8005eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebe:	f000 f82d 	bl	8005f1c <_lseek_r>
 8005ec2:	1c43      	adds	r3, r0, #1
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	bf15      	itete	ne
 8005ec8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005eca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ece:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005ed2:	81a3      	strheq	r3, [r4, #12]
 8005ed4:	bf18      	it	ne
 8005ed6:	81a3      	strhne	r3, [r4, #12]
 8005ed8:	bd10      	pop	{r4, pc}

08005eda <__sclose>:
 8005eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ede:	f000 b80d 	b.w	8005efc <_close_r>

08005ee2 <memset>:
 8005ee2:	4402      	add	r2, r0
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d100      	bne.n	8005eec <memset+0xa>
 8005eea:	4770      	bx	lr
 8005eec:	f803 1b01 	strb.w	r1, [r3], #1
 8005ef0:	e7f9      	b.n	8005ee6 <memset+0x4>
	...

08005ef4 <_localeconv_r>:
 8005ef4:	4800      	ldr	r0, [pc, #0]	@ (8005ef8 <_localeconv_r+0x4>)
 8005ef6:	4770      	bx	lr
 8005ef8:	20000178 	.word	0x20000178

08005efc <_close_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4d06      	ldr	r5, [pc, #24]	@ (8005f18 <_close_r+0x1c>)
 8005f00:	2300      	movs	r3, #0
 8005f02:	4604      	mov	r4, r0
 8005f04:	4608      	mov	r0, r1
 8005f06:	602b      	str	r3, [r5, #0]
 8005f08:	f7fb fb8a 	bl	8001620 <_close>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_close_r+0x1a>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_close_r+0x1a>
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	200004f8 	.word	0x200004f8

08005f1c <_lseek_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d07      	ldr	r5, [pc, #28]	@ (8005f3c <_lseek_r+0x20>)
 8005f20:	4604      	mov	r4, r0
 8005f22:	4608      	mov	r0, r1
 8005f24:	4611      	mov	r1, r2
 8005f26:	2200      	movs	r2, #0
 8005f28:	602a      	str	r2, [r5, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f7fb fb9f 	bl	800166e <_lseek>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d102      	bne.n	8005f3a <_lseek_r+0x1e>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	b103      	cbz	r3, 8005f3a <_lseek_r+0x1e>
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	200004f8 	.word	0x200004f8

08005f40 <_read_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4d07      	ldr	r5, [pc, #28]	@ (8005f60 <_read_r+0x20>)
 8005f44:	4604      	mov	r4, r0
 8005f46:	4608      	mov	r0, r1
 8005f48:	4611      	mov	r1, r2
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	602a      	str	r2, [r5, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f7fb fb49 	bl	80015e6 <_read>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d102      	bne.n	8005f5e <_read_r+0x1e>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	b103      	cbz	r3, 8005f5e <_read_r+0x1e>
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	200004f8 	.word	0x200004f8

08005f64 <_write_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4d07      	ldr	r5, [pc, #28]	@ (8005f84 <_write_r+0x20>)
 8005f68:	4604      	mov	r4, r0
 8005f6a:	4608      	mov	r0, r1
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	2200      	movs	r2, #0
 8005f70:	602a      	str	r2, [r5, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	f7fb f940 	bl	80011f8 <_write>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d102      	bne.n	8005f82 <_write_r+0x1e>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	b103      	cbz	r3, 8005f82 <_write_r+0x1e>
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	200004f8 	.word	0x200004f8

08005f88 <__errno>:
 8005f88:	4b01      	ldr	r3, [pc, #4]	@ (8005f90 <__errno+0x8>)
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	20000038 	.word	0x20000038

08005f94 <__libc_init_array>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4d0d      	ldr	r5, [pc, #52]	@ (8005fcc <__libc_init_array+0x38>)
 8005f98:	4c0d      	ldr	r4, [pc, #52]	@ (8005fd0 <__libc_init_array+0x3c>)
 8005f9a:	1b64      	subs	r4, r4, r5
 8005f9c:	10a4      	asrs	r4, r4, #2
 8005f9e:	2600      	movs	r6, #0
 8005fa0:	42a6      	cmp	r6, r4
 8005fa2:	d109      	bne.n	8005fb8 <__libc_init_array+0x24>
 8005fa4:	4d0b      	ldr	r5, [pc, #44]	@ (8005fd4 <__libc_init_array+0x40>)
 8005fa6:	4c0c      	ldr	r4, [pc, #48]	@ (8005fd8 <__libc_init_array+0x44>)
 8005fa8:	f001 febe 	bl	8007d28 <_init>
 8005fac:	1b64      	subs	r4, r4, r5
 8005fae:	10a4      	asrs	r4, r4, #2
 8005fb0:	2600      	movs	r6, #0
 8005fb2:	42a6      	cmp	r6, r4
 8005fb4:	d105      	bne.n	8005fc2 <__libc_init_array+0x2e>
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fbc:	4798      	blx	r3
 8005fbe:	3601      	adds	r6, #1
 8005fc0:	e7ee      	b.n	8005fa0 <__libc_init_array+0xc>
 8005fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc6:	4798      	blx	r3
 8005fc8:	3601      	adds	r6, #1
 8005fca:	e7f2      	b.n	8005fb2 <__libc_init_array+0x1e>
 8005fcc:	080080f0 	.word	0x080080f0
 8005fd0:	080080f0 	.word	0x080080f0
 8005fd4:	080080f0 	.word	0x080080f0
 8005fd8:	080080f4 	.word	0x080080f4

08005fdc <__retarget_lock_init_recursive>:
 8005fdc:	4770      	bx	lr

08005fde <__retarget_lock_acquire_recursive>:
 8005fde:	4770      	bx	lr

08005fe0 <__retarget_lock_release_recursive>:
 8005fe0:	4770      	bx	lr

08005fe2 <quorem>:
 8005fe2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe6:	6903      	ldr	r3, [r0, #16]
 8005fe8:	690c      	ldr	r4, [r1, #16]
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	4607      	mov	r7, r0
 8005fee:	db7e      	blt.n	80060ee <quorem+0x10c>
 8005ff0:	3c01      	subs	r4, #1
 8005ff2:	f101 0814 	add.w	r8, r1, #20
 8005ff6:	00a3      	lsls	r3, r4, #2
 8005ff8:	f100 0514 	add.w	r5, r0, #20
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006008:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800600c:	3301      	adds	r3, #1
 800600e:	429a      	cmp	r2, r3
 8006010:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006014:	fbb2 f6f3 	udiv	r6, r2, r3
 8006018:	d32e      	bcc.n	8006078 <quorem+0x96>
 800601a:	f04f 0a00 	mov.w	sl, #0
 800601e:	46c4      	mov	ip, r8
 8006020:	46ae      	mov	lr, r5
 8006022:	46d3      	mov	fp, sl
 8006024:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006028:	b298      	uxth	r0, r3
 800602a:	fb06 a000 	mla	r0, r6, r0, sl
 800602e:	0c02      	lsrs	r2, r0, #16
 8006030:	0c1b      	lsrs	r3, r3, #16
 8006032:	fb06 2303 	mla	r3, r6, r3, r2
 8006036:	f8de 2000 	ldr.w	r2, [lr]
 800603a:	b280      	uxth	r0, r0
 800603c:	b292      	uxth	r2, r2
 800603e:	1a12      	subs	r2, r2, r0
 8006040:	445a      	add	r2, fp
 8006042:	f8de 0000 	ldr.w	r0, [lr]
 8006046:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800604a:	b29b      	uxth	r3, r3
 800604c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006050:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006054:	b292      	uxth	r2, r2
 8006056:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800605a:	45e1      	cmp	r9, ip
 800605c:	f84e 2b04 	str.w	r2, [lr], #4
 8006060:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006064:	d2de      	bcs.n	8006024 <quorem+0x42>
 8006066:	9b00      	ldr	r3, [sp, #0]
 8006068:	58eb      	ldr	r3, [r5, r3]
 800606a:	b92b      	cbnz	r3, 8006078 <quorem+0x96>
 800606c:	9b01      	ldr	r3, [sp, #4]
 800606e:	3b04      	subs	r3, #4
 8006070:	429d      	cmp	r5, r3
 8006072:	461a      	mov	r2, r3
 8006074:	d32f      	bcc.n	80060d6 <quorem+0xf4>
 8006076:	613c      	str	r4, [r7, #16]
 8006078:	4638      	mov	r0, r7
 800607a:	f001 f97b 	bl	8007374 <__mcmp>
 800607e:	2800      	cmp	r0, #0
 8006080:	db25      	blt.n	80060ce <quorem+0xec>
 8006082:	4629      	mov	r1, r5
 8006084:	2000      	movs	r0, #0
 8006086:	f858 2b04 	ldr.w	r2, [r8], #4
 800608a:	f8d1 c000 	ldr.w	ip, [r1]
 800608e:	fa1f fe82 	uxth.w	lr, r2
 8006092:	fa1f f38c 	uxth.w	r3, ip
 8006096:	eba3 030e 	sub.w	r3, r3, lr
 800609a:	4403      	add	r3, r0
 800609c:	0c12      	lsrs	r2, r2, #16
 800609e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80060a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060ac:	45c1      	cmp	r9, r8
 80060ae:	f841 3b04 	str.w	r3, [r1], #4
 80060b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060b6:	d2e6      	bcs.n	8006086 <quorem+0xa4>
 80060b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060c0:	b922      	cbnz	r2, 80060cc <quorem+0xea>
 80060c2:	3b04      	subs	r3, #4
 80060c4:	429d      	cmp	r5, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	d30b      	bcc.n	80060e2 <quorem+0x100>
 80060ca:	613c      	str	r4, [r7, #16]
 80060cc:	3601      	adds	r6, #1
 80060ce:	4630      	mov	r0, r6
 80060d0:	b003      	add	sp, #12
 80060d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d6:	6812      	ldr	r2, [r2, #0]
 80060d8:	3b04      	subs	r3, #4
 80060da:	2a00      	cmp	r2, #0
 80060dc:	d1cb      	bne.n	8006076 <quorem+0x94>
 80060de:	3c01      	subs	r4, #1
 80060e0:	e7c6      	b.n	8006070 <quorem+0x8e>
 80060e2:	6812      	ldr	r2, [r2, #0]
 80060e4:	3b04      	subs	r3, #4
 80060e6:	2a00      	cmp	r2, #0
 80060e8:	d1ef      	bne.n	80060ca <quorem+0xe8>
 80060ea:	3c01      	subs	r4, #1
 80060ec:	e7ea      	b.n	80060c4 <quorem+0xe2>
 80060ee:	2000      	movs	r0, #0
 80060f0:	e7ee      	b.n	80060d0 <quorem+0xee>
 80060f2:	0000      	movs	r0, r0
 80060f4:	0000      	movs	r0, r0
	...

080060f8 <_dtoa_r>:
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	69c7      	ldr	r7, [r0, #28]
 80060fe:	b099      	sub	sp, #100	@ 0x64
 8006100:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006104:	ec55 4b10 	vmov	r4, r5, d0
 8006108:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800610a:	9109      	str	r1, [sp, #36]	@ 0x24
 800610c:	4683      	mov	fp, r0
 800610e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006110:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006112:	b97f      	cbnz	r7, 8006134 <_dtoa_r+0x3c>
 8006114:	2010      	movs	r0, #16
 8006116:	f000 fdfd 	bl	8006d14 <malloc>
 800611a:	4602      	mov	r2, r0
 800611c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006120:	b920      	cbnz	r0, 800612c <_dtoa_r+0x34>
 8006122:	4ba7      	ldr	r3, [pc, #668]	@ (80063c0 <_dtoa_r+0x2c8>)
 8006124:	21ef      	movs	r1, #239	@ 0xef
 8006126:	48a7      	ldr	r0, [pc, #668]	@ (80063c4 <_dtoa_r+0x2cc>)
 8006128:	f001 fb7a 	bl	8007820 <__assert_func>
 800612c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006130:	6007      	str	r7, [r0, #0]
 8006132:	60c7      	str	r7, [r0, #12]
 8006134:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006138:	6819      	ldr	r1, [r3, #0]
 800613a:	b159      	cbz	r1, 8006154 <_dtoa_r+0x5c>
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	604a      	str	r2, [r1, #4]
 8006140:	2301      	movs	r3, #1
 8006142:	4093      	lsls	r3, r2
 8006144:	608b      	str	r3, [r1, #8]
 8006146:	4658      	mov	r0, fp
 8006148:	f000 feda 	bl	8006f00 <_Bfree>
 800614c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	1e2b      	subs	r3, r5, #0
 8006156:	bfb9      	ittee	lt
 8006158:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800615c:	9303      	strlt	r3, [sp, #12]
 800615e:	2300      	movge	r3, #0
 8006160:	6033      	strge	r3, [r6, #0]
 8006162:	9f03      	ldr	r7, [sp, #12]
 8006164:	4b98      	ldr	r3, [pc, #608]	@ (80063c8 <_dtoa_r+0x2d0>)
 8006166:	bfbc      	itt	lt
 8006168:	2201      	movlt	r2, #1
 800616a:	6032      	strlt	r2, [r6, #0]
 800616c:	43bb      	bics	r3, r7
 800616e:	d112      	bne.n	8006196 <_dtoa_r+0x9e>
 8006170:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006172:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800617c:	4323      	orrs	r3, r4
 800617e:	f000 854d 	beq.w	8006c1c <_dtoa_r+0xb24>
 8006182:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006184:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80063dc <_dtoa_r+0x2e4>
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 854f 	beq.w	8006c2c <_dtoa_r+0xb34>
 800618e:	f10a 0303 	add.w	r3, sl, #3
 8006192:	f000 bd49 	b.w	8006c28 <_dtoa_r+0xb30>
 8006196:	ed9d 7b02 	vldr	d7, [sp, #8]
 800619a:	2200      	movs	r2, #0
 800619c:	ec51 0b17 	vmov	r0, r1, d7
 80061a0:	2300      	movs	r3, #0
 80061a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80061a6:	f7fa fc8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80061aa:	4680      	mov	r8, r0
 80061ac:	b158      	cbz	r0, 80061c6 <_dtoa_r+0xce>
 80061ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80061b0:	2301      	movs	r3, #1
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061b6:	b113      	cbz	r3, 80061be <_dtoa_r+0xc6>
 80061b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80061ba:	4b84      	ldr	r3, [pc, #528]	@ (80063cc <_dtoa_r+0x2d4>)
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80063e0 <_dtoa_r+0x2e8>
 80061c2:	f000 bd33 	b.w	8006c2c <_dtoa_r+0xb34>
 80061c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80061ca:	aa16      	add	r2, sp, #88	@ 0x58
 80061cc:	a917      	add	r1, sp, #92	@ 0x5c
 80061ce:	4658      	mov	r0, fp
 80061d0:	f001 f980 	bl	80074d4 <__d2b>
 80061d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80061d8:	4681      	mov	r9, r0
 80061da:	2e00      	cmp	r6, #0
 80061dc:	d077      	beq.n	80062ce <_dtoa_r+0x1d6>
 80061de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80061e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80061f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80061f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80061f8:	4619      	mov	r1, r3
 80061fa:	2200      	movs	r2, #0
 80061fc:	4b74      	ldr	r3, [pc, #464]	@ (80063d0 <_dtoa_r+0x2d8>)
 80061fe:	f7fa f843 	bl	8000288 <__aeabi_dsub>
 8006202:	a369      	add	r3, pc, #420	@ (adr r3, 80063a8 <_dtoa_r+0x2b0>)
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f7fa f9f6 	bl	80005f8 <__aeabi_dmul>
 800620c:	a368      	add	r3, pc, #416	@ (adr r3, 80063b0 <_dtoa_r+0x2b8>)
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	f7fa f83b 	bl	800028c <__adddf3>
 8006216:	4604      	mov	r4, r0
 8006218:	4630      	mov	r0, r6
 800621a:	460d      	mov	r5, r1
 800621c:	f7fa f982 	bl	8000524 <__aeabi_i2d>
 8006220:	a365      	add	r3, pc, #404	@ (adr r3, 80063b8 <_dtoa_r+0x2c0>)
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	f7fa f9e7 	bl	80005f8 <__aeabi_dmul>
 800622a:	4602      	mov	r2, r0
 800622c:	460b      	mov	r3, r1
 800622e:	4620      	mov	r0, r4
 8006230:	4629      	mov	r1, r5
 8006232:	f7fa f82b 	bl	800028c <__adddf3>
 8006236:	4604      	mov	r4, r0
 8006238:	460d      	mov	r5, r1
 800623a:	f7fa fc8d 	bl	8000b58 <__aeabi_d2iz>
 800623e:	2200      	movs	r2, #0
 8006240:	4607      	mov	r7, r0
 8006242:	2300      	movs	r3, #0
 8006244:	4620      	mov	r0, r4
 8006246:	4629      	mov	r1, r5
 8006248:	f7fa fc48 	bl	8000adc <__aeabi_dcmplt>
 800624c:	b140      	cbz	r0, 8006260 <_dtoa_r+0x168>
 800624e:	4638      	mov	r0, r7
 8006250:	f7fa f968 	bl	8000524 <__aeabi_i2d>
 8006254:	4622      	mov	r2, r4
 8006256:	462b      	mov	r3, r5
 8006258:	f7fa fc36 	bl	8000ac8 <__aeabi_dcmpeq>
 800625c:	b900      	cbnz	r0, 8006260 <_dtoa_r+0x168>
 800625e:	3f01      	subs	r7, #1
 8006260:	2f16      	cmp	r7, #22
 8006262:	d851      	bhi.n	8006308 <_dtoa_r+0x210>
 8006264:	4b5b      	ldr	r3, [pc, #364]	@ (80063d4 <_dtoa_r+0x2dc>)
 8006266:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006272:	f7fa fc33 	bl	8000adc <__aeabi_dcmplt>
 8006276:	2800      	cmp	r0, #0
 8006278:	d048      	beq.n	800630c <_dtoa_r+0x214>
 800627a:	3f01      	subs	r7, #1
 800627c:	2300      	movs	r3, #0
 800627e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006280:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006282:	1b9b      	subs	r3, r3, r6
 8006284:	1e5a      	subs	r2, r3, #1
 8006286:	bf44      	itt	mi
 8006288:	f1c3 0801 	rsbmi	r8, r3, #1
 800628c:	2300      	movmi	r3, #0
 800628e:	9208      	str	r2, [sp, #32]
 8006290:	bf54      	ite	pl
 8006292:	f04f 0800 	movpl.w	r8, #0
 8006296:	9308      	strmi	r3, [sp, #32]
 8006298:	2f00      	cmp	r7, #0
 800629a:	db39      	blt.n	8006310 <_dtoa_r+0x218>
 800629c:	9b08      	ldr	r3, [sp, #32]
 800629e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80062a0:	443b      	add	r3, r7
 80062a2:	9308      	str	r3, [sp, #32]
 80062a4:	2300      	movs	r3, #0
 80062a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80062a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062aa:	2b09      	cmp	r3, #9
 80062ac:	d864      	bhi.n	8006378 <_dtoa_r+0x280>
 80062ae:	2b05      	cmp	r3, #5
 80062b0:	bfc4      	itt	gt
 80062b2:	3b04      	subgt	r3, #4
 80062b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80062b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062b8:	f1a3 0302 	sub.w	r3, r3, #2
 80062bc:	bfcc      	ite	gt
 80062be:	2400      	movgt	r4, #0
 80062c0:	2401      	movle	r4, #1
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d863      	bhi.n	800638e <_dtoa_r+0x296>
 80062c6:	e8df f003 	tbb	[pc, r3]
 80062ca:	372a      	.short	0x372a
 80062cc:	5535      	.short	0x5535
 80062ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80062d2:	441e      	add	r6, r3
 80062d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80062d8:	2b20      	cmp	r3, #32
 80062da:	bfc1      	itttt	gt
 80062dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80062e0:	409f      	lslgt	r7, r3
 80062e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80062e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80062ea:	bfd6      	itet	le
 80062ec:	f1c3 0320 	rsble	r3, r3, #32
 80062f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80062f4:	fa04 f003 	lslle.w	r0, r4, r3
 80062f8:	f7fa f904 	bl	8000504 <__aeabi_ui2d>
 80062fc:	2201      	movs	r2, #1
 80062fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006302:	3e01      	subs	r6, #1
 8006304:	9214      	str	r2, [sp, #80]	@ 0x50
 8006306:	e777      	b.n	80061f8 <_dtoa_r+0x100>
 8006308:	2301      	movs	r3, #1
 800630a:	e7b8      	b.n	800627e <_dtoa_r+0x186>
 800630c:	9012      	str	r0, [sp, #72]	@ 0x48
 800630e:	e7b7      	b.n	8006280 <_dtoa_r+0x188>
 8006310:	427b      	negs	r3, r7
 8006312:	930a      	str	r3, [sp, #40]	@ 0x28
 8006314:	2300      	movs	r3, #0
 8006316:	eba8 0807 	sub.w	r8, r8, r7
 800631a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800631c:	e7c4      	b.n	80062a8 <_dtoa_r+0x1b0>
 800631e:	2300      	movs	r3, #0
 8006320:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006324:	2b00      	cmp	r3, #0
 8006326:	dc35      	bgt.n	8006394 <_dtoa_r+0x29c>
 8006328:	2301      	movs	r3, #1
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	9307      	str	r3, [sp, #28]
 800632e:	461a      	mov	r2, r3
 8006330:	920e      	str	r2, [sp, #56]	@ 0x38
 8006332:	e00b      	b.n	800634c <_dtoa_r+0x254>
 8006334:	2301      	movs	r3, #1
 8006336:	e7f3      	b.n	8006320 <_dtoa_r+0x228>
 8006338:	2300      	movs	r3, #0
 800633a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800633c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800633e:	18fb      	adds	r3, r7, r3
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	3301      	adds	r3, #1
 8006344:	2b01      	cmp	r3, #1
 8006346:	9307      	str	r3, [sp, #28]
 8006348:	bfb8      	it	lt
 800634a:	2301      	movlt	r3, #1
 800634c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006350:	2100      	movs	r1, #0
 8006352:	2204      	movs	r2, #4
 8006354:	f102 0514 	add.w	r5, r2, #20
 8006358:	429d      	cmp	r5, r3
 800635a:	d91f      	bls.n	800639c <_dtoa_r+0x2a4>
 800635c:	6041      	str	r1, [r0, #4]
 800635e:	4658      	mov	r0, fp
 8006360:	f000 fd8e 	bl	8006e80 <_Balloc>
 8006364:	4682      	mov	sl, r0
 8006366:	2800      	cmp	r0, #0
 8006368:	d13c      	bne.n	80063e4 <_dtoa_r+0x2ec>
 800636a:	4b1b      	ldr	r3, [pc, #108]	@ (80063d8 <_dtoa_r+0x2e0>)
 800636c:	4602      	mov	r2, r0
 800636e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006372:	e6d8      	b.n	8006126 <_dtoa_r+0x2e>
 8006374:	2301      	movs	r3, #1
 8006376:	e7e0      	b.n	800633a <_dtoa_r+0x242>
 8006378:	2401      	movs	r4, #1
 800637a:	2300      	movs	r3, #0
 800637c:	9309      	str	r3, [sp, #36]	@ 0x24
 800637e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006380:	f04f 33ff 	mov.w	r3, #4294967295
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	9307      	str	r3, [sp, #28]
 8006388:	2200      	movs	r2, #0
 800638a:	2312      	movs	r3, #18
 800638c:	e7d0      	b.n	8006330 <_dtoa_r+0x238>
 800638e:	2301      	movs	r3, #1
 8006390:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006392:	e7f5      	b.n	8006380 <_dtoa_r+0x288>
 8006394:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	9307      	str	r3, [sp, #28]
 800639a:	e7d7      	b.n	800634c <_dtoa_r+0x254>
 800639c:	3101      	adds	r1, #1
 800639e:	0052      	lsls	r2, r2, #1
 80063a0:	e7d8      	b.n	8006354 <_dtoa_r+0x25c>
 80063a2:	bf00      	nop
 80063a4:	f3af 8000 	nop.w
 80063a8:	636f4361 	.word	0x636f4361
 80063ac:	3fd287a7 	.word	0x3fd287a7
 80063b0:	8b60c8b3 	.word	0x8b60c8b3
 80063b4:	3fc68a28 	.word	0x3fc68a28
 80063b8:	509f79fb 	.word	0x509f79fb
 80063bc:	3fd34413 	.word	0x3fd34413
 80063c0:	08007db9 	.word	0x08007db9
 80063c4:	08007dd0 	.word	0x08007dd0
 80063c8:	7ff00000 	.word	0x7ff00000
 80063cc:	08007d89 	.word	0x08007d89
 80063d0:	3ff80000 	.word	0x3ff80000
 80063d4:	08007ec8 	.word	0x08007ec8
 80063d8:	08007e28 	.word	0x08007e28
 80063dc:	08007db5 	.word	0x08007db5
 80063e0:	08007d88 	.word	0x08007d88
 80063e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80063e8:	6018      	str	r0, [r3, #0]
 80063ea:	9b07      	ldr	r3, [sp, #28]
 80063ec:	2b0e      	cmp	r3, #14
 80063ee:	f200 80a4 	bhi.w	800653a <_dtoa_r+0x442>
 80063f2:	2c00      	cmp	r4, #0
 80063f4:	f000 80a1 	beq.w	800653a <_dtoa_r+0x442>
 80063f8:	2f00      	cmp	r7, #0
 80063fa:	dd33      	ble.n	8006464 <_dtoa_r+0x36c>
 80063fc:	4bad      	ldr	r3, [pc, #692]	@ (80066b4 <_dtoa_r+0x5bc>)
 80063fe:	f007 020f 	and.w	r2, r7, #15
 8006402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006406:	ed93 7b00 	vldr	d7, [r3]
 800640a:	05f8      	lsls	r0, r7, #23
 800640c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006410:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006414:	d516      	bpl.n	8006444 <_dtoa_r+0x34c>
 8006416:	4ba8      	ldr	r3, [pc, #672]	@ (80066b8 <_dtoa_r+0x5c0>)
 8006418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800641c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006420:	f7fa fa14 	bl	800084c <__aeabi_ddiv>
 8006424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006428:	f004 040f 	and.w	r4, r4, #15
 800642c:	2603      	movs	r6, #3
 800642e:	4da2      	ldr	r5, [pc, #648]	@ (80066b8 <_dtoa_r+0x5c0>)
 8006430:	b954      	cbnz	r4, 8006448 <_dtoa_r+0x350>
 8006432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800643a:	f7fa fa07 	bl	800084c <__aeabi_ddiv>
 800643e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006442:	e028      	b.n	8006496 <_dtoa_r+0x39e>
 8006444:	2602      	movs	r6, #2
 8006446:	e7f2      	b.n	800642e <_dtoa_r+0x336>
 8006448:	07e1      	lsls	r1, r4, #31
 800644a:	d508      	bpl.n	800645e <_dtoa_r+0x366>
 800644c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006450:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006454:	f7fa f8d0 	bl	80005f8 <__aeabi_dmul>
 8006458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800645c:	3601      	adds	r6, #1
 800645e:	1064      	asrs	r4, r4, #1
 8006460:	3508      	adds	r5, #8
 8006462:	e7e5      	b.n	8006430 <_dtoa_r+0x338>
 8006464:	f000 80d2 	beq.w	800660c <_dtoa_r+0x514>
 8006468:	427c      	negs	r4, r7
 800646a:	4b92      	ldr	r3, [pc, #584]	@ (80066b4 <_dtoa_r+0x5bc>)
 800646c:	4d92      	ldr	r5, [pc, #584]	@ (80066b8 <_dtoa_r+0x5c0>)
 800646e:	f004 020f 	and.w	r2, r4, #15
 8006472:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800647e:	f7fa f8bb 	bl	80005f8 <__aeabi_dmul>
 8006482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006486:	1124      	asrs	r4, r4, #4
 8006488:	2300      	movs	r3, #0
 800648a:	2602      	movs	r6, #2
 800648c:	2c00      	cmp	r4, #0
 800648e:	f040 80b2 	bne.w	80065f6 <_dtoa_r+0x4fe>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1d3      	bne.n	800643e <_dtoa_r+0x346>
 8006496:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006498:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 80b7 	beq.w	8006610 <_dtoa_r+0x518>
 80064a2:	4b86      	ldr	r3, [pc, #536]	@ (80066bc <_dtoa_r+0x5c4>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	4620      	mov	r0, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7fa fb17 	bl	8000adc <__aeabi_dcmplt>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	f000 80ae 	beq.w	8006610 <_dtoa_r+0x518>
 80064b4:	9b07      	ldr	r3, [sp, #28]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 80aa 	beq.w	8006610 <_dtoa_r+0x518>
 80064bc:	9b00      	ldr	r3, [sp, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dd37      	ble.n	8006532 <_dtoa_r+0x43a>
 80064c2:	1e7b      	subs	r3, r7, #1
 80064c4:	9304      	str	r3, [sp, #16]
 80064c6:	4620      	mov	r0, r4
 80064c8:	4b7d      	ldr	r3, [pc, #500]	@ (80066c0 <_dtoa_r+0x5c8>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	4629      	mov	r1, r5
 80064ce:	f7fa f893 	bl	80005f8 <__aeabi_dmul>
 80064d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064d6:	9c00      	ldr	r4, [sp, #0]
 80064d8:	3601      	adds	r6, #1
 80064da:	4630      	mov	r0, r6
 80064dc:	f7fa f822 	bl	8000524 <__aeabi_i2d>
 80064e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064e4:	f7fa f888 	bl	80005f8 <__aeabi_dmul>
 80064e8:	4b76      	ldr	r3, [pc, #472]	@ (80066c4 <_dtoa_r+0x5cc>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	f7f9 fece 	bl	800028c <__adddf3>
 80064f0:	4605      	mov	r5, r0
 80064f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80064f6:	2c00      	cmp	r4, #0
 80064f8:	f040 808d 	bne.w	8006616 <_dtoa_r+0x51e>
 80064fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006500:	4b71      	ldr	r3, [pc, #452]	@ (80066c8 <_dtoa_r+0x5d0>)
 8006502:	2200      	movs	r2, #0
 8006504:	f7f9 fec0 	bl	8000288 <__aeabi_dsub>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006510:	462a      	mov	r2, r5
 8006512:	4633      	mov	r3, r6
 8006514:	f7fa fb00 	bl	8000b18 <__aeabi_dcmpgt>
 8006518:	2800      	cmp	r0, #0
 800651a:	f040 828b 	bne.w	8006a34 <_dtoa_r+0x93c>
 800651e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006522:	462a      	mov	r2, r5
 8006524:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006528:	f7fa fad8 	bl	8000adc <__aeabi_dcmplt>
 800652c:	2800      	cmp	r0, #0
 800652e:	f040 8128 	bne.w	8006782 <_dtoa_r+0x68a>
 8006532:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006536:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800653a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800653c:	2b00      	cmp	r3, #0
 800653e:	f2c0 815a 	blt.w	80067f6 <_dtoa_r+0x6fe>
 8006542:	2f0e      	cmp	r7, #14
 8006544:	f300 8157 	bgt.w	80067f6 <_dtoa_r+0x6fe>
 8006548:	4b5a      	ldr	r3, [pc, #360]	@ (80066b4 <_dtoa_r+0x5bc>)
 800654a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800654e:	ed93 7b00 	vldr	d7, [r3]
 8006552:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006554:	2b00      	cmp	r3, #0
 8006556:	ed8d 7b00 	vstr	d7, [sp]
 800655a:	da03      	bge.n	8006564 <_dtoa_r+0x46c>
 800655c:	9b07      	ldr	r3, [sp, #28]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f340 8101 	ble.w	8006766 <_dtoa_r+0x66e>
 8006564:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006568:	4656      	mov	r6, sl
 800656a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800656e:	4620      	mov	r0, r4
 8006570:	4629      	mov	r1, r5
 8006572:	f7fa f96b 	bl	800084c <__aeabi_ddiv>
 8006576:	f7fa faef 	bl	8000b58 <__aeabi_d2iz>
 800657a:	4680      	mov	r8, r0
 800657c:	f7f9 ffd2 	bl	8000524 <__aeabi_i2d>
 8006580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006584:	f7fa f838 	bl	80005f8 <__aeabi_dmul>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4620      	mov	r0, r4
 800658e:	4629      	mov	r1, r5
 8006590:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006594:	f7f9 fe78 	bl	8000288 <__aeabi_dsub>
 8006598:	f806 4b01 	strb.w	r4, [r6], #1
 800659c:	9d07      	ldr	r5, [sp, #28]
 800659e:	eba6 040a 	sub.w	r4, r6, sl
 80065a2:	42a5      	cmp	r5, r4
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	f040 8117 	bne.w	80067da <_dtoa_r+0x6e2>
 80065ac:	f7f9 fe6e 	bl	800028c <__adddf3>
 80065b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065b4:	4604      	mov	r4, r0
 80065b6:	460d      	mov	r5, r1
 80065b8:	f7fa faae 	bl	8000b18 <__aeabi_dcmpgt>
 80065bc:	2800      	cmp	r0, #0
 80065be:	f040 80f9 	bne.w	80067b4 <_dtoa_r+0x6bc>
 80065c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065c6:	4620      	mov	r0, r4
 80065c8:	4629      	mov	r1, r5
 80065ca:	f7fa fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ce:	b118      	cbz	r0, 80065d8 <_dtoa_r+0x4e0>
 80065d0:	f018 0f01 	tst.w	r8, #1
 80065d4:	f040 80ee 	bne.w	80067b4 <_dtoa_r+0x6bc>
 80065d8:	4649      	mov	r1, r9
 80065da:	4658      	mov	r0, fp
 80065dc:	f000 fc90 	bl	8006f00 <_Bfree>
 80065e0:	2300      	movs	r3, #0
 80065e2:	7033      	strb	r3, [r6, #0]
 80065e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80065e6:	3701      	adds	r7, #1
 80065e8:	601f      	str	r7, [r3, #0]
 80065ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 831d 	beq.w	8006c2c <_dtoa_r+0xb34>
 80065f2:	601e      	str	r6, [r3, #0]
 80065f4:	e31a      	b.n	8006c2c <_dtoa_r+0xb34>
 80065f6:	07e2      	lsls	r2, r4, #31
 80065f8:	d505      	bpl.n	8006606 <_dtoa_r+0x50e>
 80065fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065fe:	f7f9 fffb 	bl	80005f8 <__aeabi_dmul>
 8006602:	3601      	adds	r6, #1
 8006604:	2301      	movs	r3, #1
 8006606:	1064      	asrs	r4, r4, #1
 8006608:	3508      	adds	r5, #8
 800660a:	e73f      	b.n	800648c <_dtoa_r+0x394>
 800660c:	2602      	movs	r6, #2
 800660e:	e742      	b.n	8006496 <_dtoa_r+0x39e>
 8006610:	9c07      	ldr	r4, [sp, #28]
 8006612:	9704      	str	r7, [sp, #16]
 8006614:	e761      	b.n	80064da <_dtoa_r+0x3e2>
 8006616:	4b27      	ldr	r3, [pc, #156]	@ (80066b4 <_dtoa_r+0x5bc>)
 8006618:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800661a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800661e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006622:	4454      	add	r4, sl
 8006624:	2900      	cmp	r1, #0
 8006626:	d053      	beq.n	80066d0 <_dtoa_r+0x5d8>
 8006628:	4928      	ldr	r1, [pc, #160]	@ (80066cc <_dtoa_r+0x5d4>)
 800662a:	2000      	movs	r0, #0
 800662c:	f7fa f90e 	bl	800084c <__aeabi_ddiv>
 8006630:	4633      	mov	r3, r6
 8006632:	462a      	mov	r2, r5
 8006634:	f7f9 fe28 	bl	8000288 <__aeabi_dsub>
 8006638:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800663c:	4656      	mov	r6, sl
 800663e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006642:	f7fa fa89 	bl	8000b58 <__aeabi_d2iz>
 8006646:	4605      	mov	r5, r0
 8006648:	f7f9 ff6c 	bl	8000524 <__aeabi_i2d>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006654:	f7f9 fe18 	bl	8000288 <__aeabi_dsub>
 8006658:	3530      	adds	r5, #48	@ 0x30
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006662:	f806 5b01 	strb.w	r5, [r6], #1
 8006666:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800666a:	f7fa fa37 	bl	8000adc <__aeabi_dcmplt>
 800666e:	2800      	cmp	r0, #0
 8006670:	d171      	bne.n	8006756 <_dtoa_r+0x65e>
 8006672:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006676:	4911      	ldr	r1, [pc, #68]	@ (80066bc <_dtoa_r+0x5c4>)
 8006678:	2000      	movs	r0, #0
 800667a:	f7f9 fe05 	bl	8000288 <__aeabi_dsub>
 800667e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006682:	f7fa fa2b 	bl	8000adc <__aeabi_dcmplt>
 8006686:	2800      	cmp	r0, #0
 8006688:	f040 8095 	bne.w	80067b6 <_dtoa_r+0x6be>
 800668c:	42a6      	cmp	r6, r4
 800668e:	f43f af50 	beq.w	8006532 <_dtoa_r+0x43a>
 8006692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006696:	4b0a      	ldr	r3, [pc, #40]	@ (80066c0 <_dtoa_r+0x5c8>)
 8006698:	2200      	movs	r2, #0
 800669a:	f7f9 ffad 	bl	80005f8 <__aeabi_dmul>
 800669e:	4b08      	ldr	r3, [pc, #32]	@ (80066c0 <_dtoa_r+0x5c8>)
 80066a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066a4:	2200      	movs	r2, #0
 80066a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066aa:	f7f9 ffa5 	bl	80005f8 <__aeabi_dmul>
 80066ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066b2:	e7c4      	b.n	800663e <_dtoa_r+0x546>
 80066b4:	08007ec8 	.word	0x08007ec8
 80066b8:	08007ea0 	.word	0x08007ea0
 80066bc:	3ff00000 	.word	0x3ff00000
 80066c0:	40240000 	.word	0x40240000
 80066c4:	401c0000 	.word	0x401c0000
 80066c8:	40140000 	.word	0x40140000
 80066cc:	3fe00000 	.word	0x3fe00000
 80066d0:	4631      	mov	r1, r6
 80066d2:	4628      	mov	r0, r5
 80066d4:	f7f9 ff90 	bl	80005f8 <__aeabi_dmul>
 80066d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80066de:	4656      	mov	r6, sl
 80066e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066e4:	f7fa fa38 	bl	8000b58 <__aeabi_d2iz>
 80066e8:	4605      	mov	r5, r0
 80066ea:	f7f9 ff1b 	bl	8000524 <__aeabi_i2d>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066f6:	f7f9 fdc7 	bl	8000288 <__aeabi_dsub>
 80066fa:	3530      	adds	r5, #48	@ 0x30
 80066fc:	f806 5b01 	strb.w	r5, [r6], #1
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	42a6      	cmp	r6, r4
 8006706:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	d124      	bne.n	800675a <_dtoa_r+0x662>
 8006710:	4bac      	ldr	r3, [pc, #688]	@ (80069c4 <_dtoa_r+0x8cc>)
 8006712:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006716:	f7f9 fdb9 	bl	800028c <__adddf3>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006722:	f7fa f9f9 	bl	8000b18 <__aeabi_dcmpgt>
 8006726:	2800      	cmp	r0, #0
 8006728:	d145      	bne.n	80067b6 <_dtoa_r+0x6be>
 800672a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800672e:	49a5      	ldr	r1, [pc, #660]	@ (80069c4 <_dtoa_r+0x8cc>)
 8006730:	2000      	movs	r0, #0
 8006732:	f7f9 fda9 	bl	8000288 <__aeabi_dsub>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800673e:	f7fa f9cd 	bl	8000adc <__aeabi_dcmplt>
 8006742:	2800      	cmp	r0, #0
 8006744:	f43f aef5 	beq.w	8006532 <_dtoa_r+0x43a>
 8006748:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800674a:	1e73      	subs	r3, r6, #1
 800674c:	9315      	str	r3, [sp, #84]	@ 0x54
 800674e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006752:	2b30      	cmp	r3, #48	@ 0x30
 8006754:	d0f8      	beq.n	8006748 <_dtoa_r+0x650>
 8006756:	9f04      	ldr	r7, [sp, #16]
 8006758:	e73e      	b.n	80065d8 <_dtoa_r+0x4e0>
 800675a:	4b9b      	ldr	r3, [pc, #620]	@ (80069c8 <_dtoa_r+0x8d0>)
 800675c:	f7f9 ff4c 	bl	80005f8 <__aeabi_dmul>
 8006760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006764:	e7bc      	b.n	80066e0 <_dtoa_r+0x5e8>
 8006766:	d10c      	bne.n	8006782 <_dtoa_r+0x68a>
 8006768:	4b98      	ldr	r3, [pc, #608]	@ (80069cc <_dtoa_r+0x8d4>)
 800676a:	2200      	movs	r2, #0
 800676c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006770:	f7f9 ff42 	bl	80005f8 <__aeabi_dmul>
 8006774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006778:	f7fa f9c4 	bl	8000b04 <__aeabi_dcmpge>
 800677c:	2800      	cmp	r0, #0
 800677e:	f000 8157 	beq.w	8006a30 <_dtoa_r+0x938>
 8006782:	2400      	movs	r4, #0
 8006784:	4625      	mov	r5, r4
 8006786:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006788:	43db      	mvns	r3, r3
 800678a:	9304      	str	r3, [sp, #16]
 800678c:	4656      	mov	r6, sl
 800678e:	2700      	movs	r7, #0
 8006790:	4621      	mov	r1, r4
 8006792:	4658      	mov	r0, fp
 8006794:	f000 fbb4 	bl	8006f00 <_Bfree>
 8006798:	2d00      	cmp	r5, #0
 800679a:	d0dc      	beq.n	8006756 <_dtoa_r+0x65e>
 800679c:	b12f      	cbz	r7, 80067aa <_dtoa_r+0x6b2>
 800679e:	42af      	cmp	r7, r5
 80067a0:	d003      	beq.n	80067aa <_dtoa_r+0x6b2>
 80067a2:	4639      	mov	r1, r7
 80067a4:	4658      	mov	r0, fp
 80067a6:	f000 fbab 	bl	8006f00 <_Bfree>
 80067aa:	4629      	mov	r1, r5
 80067ac:	4658      	mov	r0, fp
 80067ae:	f000 fba7 	bl	8006f00 <_Bfree>
 80067b2:	e7d0      	b.n	8006756 <_dtoa_r+0x65e>
 80067b4:	9704      	str	r7, [sp, #16]
 80067b6:	4633      	mov	r3, r6
 80067b8:	461e      	mov	r6, r3
 80067ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067be:	2a39      	cmp	r2, #57	@ 0x39
 80067c0:	d107      	bne.n	80067d2 <_dtoa_r+0x6da>
 80067c2:	459a      	cmp	sl, r3
 80067c4:	d1f8      	bne.n	80067b8 <_dtoa_r+0x6c0>
 80067c6:	9a04      	ldr	r2, [sp, #16]
 80067c8:	3201      	adds	r2, #1
 80067ca:	9204      	str	r2, [sp, #16]
 80067cc:	2230      	movs	r2, #48	@ 0x30
 80067ce:	f88a 2000 	strb.w	r2, [sl]
 80067d2:	781a      	ldrb	r2, [r3, #0]
 80067d4:	3201      	adds	r2, #1
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	e7bd      	b.n	8006756 <_dtoa_r+0x65e>
 80067da:	4b7b      	ldr	r3, [pc, #492]	@ (80069c8 <_dtoa_r+0x8d0>)
 80067dc:	2200      	movs	r2, #0
 80067de:	f7f9 ff0b 	bl	80005f8 <__aeabi_dmul>
 80067e2:	2200      	movs	r2, #0
 80067e4:	2300      	movs	r3, #0
 80067e6:	4604      	mov	r4, r0
 80067e8:	460d      	mov	r5, r1
 80067ea:	f7fa f96d 	bl	8000ac8 <__aeabi_dcmpeq>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	f43f aebb 	beq.w	800656a <_dtoa_r+0x472>
 80067f4:	e6f0      	b.n	80065d8 <_dtoa_r+0x4e0>
 80067f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80067f8:	2a00      	cmp	r2, #0
 80067fa:	f000 80db 	beq.w	80069b4 <_dtoa_r+0x8bc>
 80067fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006800:	2a01      	cmp	r2, #1
 8006802:	f300 80bf 	bgt.w	8006984 <_dtoa_r+0x88c>
 8006806:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006808:	2a00      	cmp	r2, #0
 800680a:	f000 80b7 	beq.w	800697c <_dtoa_r+0x884>
 800680e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006812:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006814:	4646      	mov	r6, r8
 8006816:	9a08      	ldr	r2, [sp, #32]
 8006818:	2101      	movs	r1, #1
 800681a:	441a      	add	r2, r3
 800681c:	4658      	mov	r0, fp
 800681e:	4498      	add	r8, r3
 8006820:	9208      	str	r2, [sp, #32]
 8006822:	f000 fc21 	bl	8007068 <__i2b>
 8006826:	4605      	mov	r5, r0
 8006828:	b15e      	cbz	r6, 8006842 <_dtoa_r+0x74a>
 800682a:	9b08      	ldr	r3, [sp, #32]
 800682c:	2b00      	cmp	r3, #0
 800682e:	dd08      	ble.n	8006842 <_dtoa_r+0x74a>
 8006830:	42b3      	cmp	r3, r6
 8006832:	9a08      	ldr	r2, [sp, #32]
 8006834:	bfa8      	it	ge
 8006836:	4633      	movge	r3, r6
 8006838:	eba8 0803 	sub.w	r8, r8, r3
 800683c:	1af6      	subs	r6, r6, r3
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	9308      	str	r3, [sp, #32]
 8006842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006844:	b1f3      	cbz	r3, 8006884 <_dtoa_r+0x78c>
 8006846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80b7 	beq.w	80069bc <_dtoa_r+0x8c4>
 800684e:	b18c      	cbz	r4, 8006874 <_dtoa_r+0x77c>
 8006850:	4629      	mov	r1, r5
 8006852:	4622      	mov	r2, r4
 8006854:	4658      	mov	r0, fp
 8006856:	f000 fcc7 	bl	80071e8 <__pow5mult>
 800685a:	464a      	mov	r2, r9
 800685c:	4601      	mov	r1, r0
 800685e:	4605      	mov	r5, r0
 8006860:	4658      	mov	r0, fp
 8006862:	f000 fc17 	bl	8007094 <__multiply>
 8006866:	4649      	mov	r1, r9
 8006868:	9004      	str	r0, [sp, #16]
 800686a:	4658      	mov	r0, fp
 800686c:	f000 fb48 	bl	8006f00 <_Bfree>
 8006870:	9b04      	ldr	r3, [sp, #16]
 8006872:	4699      	mov	r9, r3
 8006874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006876:	1b1a      	subs	r2, r3, r4
 8006878:	d004      	beq.n	8006884 <_dtoa_r+0x78c>
 800687a:	4649      	mov	r1, r9
 800687c:	4658      	mov	r0, fp
 800687e:	f000 fcb3 	bl	80071e8 <__pow5mult>
 8006882:	4681      	mov	r9, r0
 8006884:	2101      	movs	r1, #1
 8006886:	4658      	mov	r0, fp
 8006888:	f000 fbee 	bl	8007068 <__i2b>
 800688c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800688e:	4604      	mov	r4, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 81cf 	beq.w	8006c34 <_dtoa_r+0xb3c>
 8006896:	461a      	mov	r2, r3
 8006898:	4601      	mov	r1, r0
 800689a:	4658      	mov	r0, fp
 800689c:	f000 fca4 	bl	80071e8 <__pow5mult>
 80068a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	4604      	mov	r4, r0
 80068a6:	f300 8095 	bgt.w	80069d4 <_dtoa_r+0x8dc>
 80068aa:	9b02      	ldr	r3, [sp, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f040 8087 	bne.w	80069c0 <_dtoa_r+0x8c8>
 80068b2:	9b03      	ldr	r3, [sp, #12]
 80068b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f040 8089 	bne.w	80069d0 <_dtoa_r+0x8d8>
 80068be:	9b03      	ldr	r3, [sp, #12]
 80068c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068c4:	0d1b      	lsrs	r3, r3, #20
 80068c6:	051b      	lsls	r3, r3, #20
 80068c8:	b12b      	cbz	r3, 80068d6 <_dtoa_r+0x7de>
 80068ca:	9b08      	ldr	r3, [sp, #32]
 80068cc:	3301      	adds	r3, #1
 80068ce:	9308      	str	r3, [sp, #32]
 80068d0:	f108 0801 	add.w	r8, r8, #1
 80068d4:	2301      	movs	r3, #1
 80068d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80068d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 81b0 	beq.w	8006c40 <_dtoa_r+0xb48>
 80068e0:	6923      	ldr	r3, [r4, #16]
 80068e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068e6:	6918      	ldr	r0, [r3, #16]
 80068e8:	f000 fb72 	bl	8006fd0 <__hi0bits>
 80068ec:	f1c0 0020 	rsb	r0, r0, #32
 80068f0:	9b08      	ldr	r3, [sp, #32]
 80068f2:	4418      	add	r0, r3
 80068f4:	f010 001f 	ands.w	r0, r0, #31
 80068f8:	d077      	beq.n	80069ea <_dtoa_r+0x8f2>
 80068fa:	f1c0 0320 	rsb	r3, r0, #32
 80068fe:	2b04      	cmp	r3, #4
 8006900:	dd6b      	ble.n	80069da <_dtoa_r+0x8e2>
 8006902:	9b08      	ldr	r3, [sp, #32]
 8006904:	f1c0 001c 	rsb	r0, r0, #28
 8006908:	4403      	add	r3, r0
 800690a:	4480      	add	r8, r0
 800690c:	4406      	add	r6, r0
 800690e:	9308      	str	r3, [sp, #32]
 8006910:	f1b8 0f00 	cmp.w	r8, #0
 8006914:	dd05      	ble.n	8006922 <_dtoa_r+0x82a>
 8006916:	4649      	mov	r1, r9
 8006918:	4642      	mov	r2, r8
 800691a:	4658      	mov	r0, fp
 800691c:	f000 fcbe 	bl	800729c <__lshift>
 8006920:	4681      	mov	r9, r0
 8006922:	9b08      	ldr	r3, [sp, #32]
 8006924:	2b00      	cmp	r3, #0
 8006926:	dd05      	ble.n	8006934 <_dtoa_r+0x83c>
 8006928:	4621      	mov	r1, r4
 800692a:	461a      	mov	r2, r3
 800692c:	4658      	mov	r0, fp
 800692e:	f000 fcb5 	bl	800729c <__lshift>
 8006932:	4604      	mov	r4, r0
 8006934:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006936:	2b00      	cmp	r3, #0
 8006938:	d059      	beq.n	80069ee <_dtoa_r+0x8f6>
 800693a:	4621      	mov	r1, r4
 800693c:	4648      	mov	r0, r9
 800693e:	f000 fd19 	bl	8007374 <__mcmp>
 8006942:	2800      	cmp	r0, #0
 8006944:	da53      	bge.n	80069ee <_dtoa_r+0x8f6>
 8006946:	1e7b      	subs	r3, r7, #1
 8006948:	9304      	str	r3, [sp, #16]
 800694a:	4649      	mov	r1, r9
 800694c:	2300      	movs	r3, #0
 800694e:	220a      	movs	r2, #10
 8006950:	4658      	mov	r0, fp
 8006952:	f000 faf7 	bl	8006f44 <__multadd>
 8006956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006958:	4681      	mov	r9, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 8172 	beq.w	8006c44 <_dtoa_r+0xb4c>
 8006960:	2300      	movs	r3, #0
 8006962:	4629      	mov	r1, r5
 8006964:	220a      	movs	r2, #10
 8006966:	4658      	mov	r0, fp
 8006968:	f000 faec 	bl	8006f44 <__multadd>
 800696c:	9b00      	ldr	r3, [sp, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	4605      	mov	r5, r0
 8006972:	dc67      	bgt.n	8006a44 <_dtoa_r+0x94c>
 8006974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006976:	2b02      	cmp	r3, #2
 8006978:	dc41      	bgt.n	80069fe <_dtoa_r+0x906>
 800697a:	e063      	b.n	8006a44 <_dtoa_r+0x94c>
 800697c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800697e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006982:	e746      	b.n	8006812 <_dtoa_r+0x71a>
 8006984:	9b07      	ldr	r3, [sp, #28]
 8006986:	1e5c      	subs	r4, r3, #1
 8006988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800698a:	42a3      	cmp	r3, r4
 800698c:	bfbf      	itttt	lt
 800698e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006990:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006992:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006994:	1ae3      	sublt	r3, r4, r3
 8006996:	bfb4      	ite	lt
 8006998:	18d2      	addlt	r2, r2, r3
 800699a:	1b1c      	subge	r4, r3, r4
 800699c:	9b07      	ldr	r3, [sp, #28]
 800699e:	bfbc      	itt	lt
 80069a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80069a2:	2400      	movlt	r4, #0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bfb5      	itete	lt
 80069a8:	eba8 0603 	sublt.w	r6, r8, r3
 80069ac:	9b07      	ldrge	r3, [sp, #28]
 80069ae:	2300      	movlt	r3, #0
 80069b0:	4646      	movge	r6, r8
 80069b2:	e730      	b.n	8006816 <_dtoa_r+0x71e>
 80069b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80069b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80069b8:	4646      	mov	r6, r8
 80069ba:	e735      	b.n	8006828 <_dtoa_r+0x730>
 80069bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069be:	e75c      	b.n	800687a <_dtoa_r+0x782>
 80069c0:	2300      	movs	r3, #0
 80069c2:	e788      	b.n	80068d6 <_dtoa_r+0x7de>
 80069c4:	3fe00000 	.word	0x3fe00000
 80069c8:	40240000 	.word	0x40240000
 80069cc:	40140000 	.word	0x40140000
 80069d0:	9b02      	ldr	r3, [sp, #8]
 80069d2:	e780      	b.n	80068d6 <_dtoa_r+0x7de>
 80069d4:	2300      	movs	r3, #0
 80069d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80069d8:	e782      	b.n	80068e0 <_dtoa_r+0x7e8>
 80069da:	d099      	beq.n	8006910 <_dtoa_r+0x818>
 80069dc:	9a08      	ldr	r2, [sp, #32]
 80069de:	331c      	adds	r3, #28
 80069e0:	441a      	add	r2, r3
 80069e2:	4498      	add	r8, r3
 80069e4:	441e      	add	r6, r3
 80069e6:	9208      	str	r2, [sp, #32]
 80069e8:	e792      	b.n	8006910 <_dtoa_r+0x818>
 80069ea:	4603      	mov	r3, r0
 80069ec:	e7f6      	b.n	80069dc <_dtoa_r+0x8e4>
 80069ee:	9b07      	ldr	r3, [sp, #28]
 80069f0:	9704      	str	r7, [sp, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	dc20      	bgt.n	8006a38 <_dtoa_r+0x940>
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	dd1e      	ble.n	8006a3c <_dtoa_r+0x944>
 80069fe:	9b00      	ldr	r3, [sp, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f47f aec0 	bne.w	8006786 <_dtoa_r+0x68e>
 8006a06:	4621      	mov	r1, r4
 8006a08:	2205      	movs	r2, #5
 8006a0a:	4658      	mov	r0, fp
 8006a0c:	f000 fa9a 	bl	8006f44 <__multadd>
 8006a10:	4601      	mov	r1, r0
 8006a12:	4604      	mov	r4, r0
 8006a14:	4648      	mov	r0, r9
 8006a16:	f000 fcad 	bl	8007374 <__mcmp>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	f77f aeb3 	ble.w	8006786 <_dtoa_r+0x68e>
 8006a20:	4656      	mov	r6, sl
 8006a22:	2331      	movs	r3, #49	@ 0x31
 8006a24:	f806 3b01 	strb.w	r3, [r6], #1
 8006a28:	9b04      	ldr	r3, [sp, #16]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	9304      	str	r3, [sp, #16]
 8006a2e:	e6ae      	b.n	800678e <_dtoa_r+0x696>
 8006a30:	9c07      	ldr	r4, [sp, #28]
 8006a32:	9704      	str	r7, [sp, #16]
 8006a34:	4625      	mov	r5, r4
 8006a36:	e7f3      	b.n	8006a20 <_dtoa_r+0x928>
 8006a38:	9b07      	ldr	r3, [sp, #28]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 8104 	beq.w	8006c4c <_dtoa_r+0xb54>
 8006a44:	2e00      	cmp	r6, #0
 8006a46:	dd05      	ble.n	8006a54 <_dtoa_r+0x95c>
 8006a48:	4629      	mov	r1, r5
 8006a4a:	4632      	mov	r2, r6
 8006a4c:	4658      	mov	r0, fp
 8006a4e:	f000 fc25 	bl	800729c <__lshift>
 8006a52:	4605      	mov	r5, r0
 8006a54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d05a      	beq.n	8006b10 <_dtoa_r+0xa18>
 8006a5a:	6869      	ldr	r1, [r5, #4]
 8006a5c:	4658      	mov	r0, fp
 8006a5e:	f000 fa0f 	bl	8006e80 <_Balloc>
 8006a62:	4606      	mov	r6, r0
 8006a64:	b928      	cbnz	r0, 8006a72 <_dtoa_r+0x97a>
 8006a66:	4b84      	ldr	r3, [pc, #528]	@ (8006c78 <_dtoa_r+0xb80>)
 8006a68:	4602      	mov	r2, r0
 8006a6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a6e:	f7ff bb5a 	b.w	8006126 <_dtoa_r+0x2e>
 8006a72:	692a      	ldr	r2, [r5, #16]
 8006a74:	3202      	adds	r2, #2
 8006a76:	0092      	lsls	r2, r2, #2
 8006a78:	f105 010c 	add.w	r1, r5, #12
 8006a7c:	300c      	adds	r0, #12
 8006a7e:	f000 fec1 	bl	8007804 <memcpy>
 8006a82:	2201      	movs	r2, #1
 8006a84:	4631      	mov	r1, r6
 8006a86:	4658      	mov	r0, fp
 8006a88:	f000 fc08 	bl	800729c <__lshift>
 8006a8c:	f10a 0301 	add.w	r3, sl, #1
 8006a90:	9307      	str	r3, [sp, #28]
 8006a92:	9b00      	ldr	r3, [sp, #0]
 8006a94:	4453      	add	r3, sl
 8006a96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a98:	9b02      	ldr	r3, [sp, #8]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	462f      	mov	r7, r5
 8006aa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	9b07      	ldr	r3, [sp, #28]
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	4648      	mov	r0, r9
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	f7ff fa98 	bl	8005fe2 <quorem>
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	9002      	str	r0, [sp, #8]
 8006ab6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006aba:	4648      	mov	r0, r9
 8006abc:	f000 fc5a 	bl	8007374 <__mcmp>
 8006ac0:	462a      	mov	r2, r5
 8006ac2:	9008      	str	r0, [sp, #32]
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4658      	mov	r0, fp
 8006ac8:	f000 fc70 	bl	80073ac <__mdiff>
 8006acc:	68c2      	ldr	r2, [r0, #12]
 8006ace:	4606      	mov	r6, r0
 8006ad0:	bb02      	cbnz	r2, 8006b14 <_dtoa_r+0xa1c>
 8006ad2:	4601      	mov	r1, r0
 8006ad4:	4648      	mov	r0, r9
 8006ad6:	f000 fc4d 	bl	8007374 <__mcmp>
 8006ada:	4602      	mov	r2, r0
 8006adc:	4631      	mov	r1, r6
 8006ade:	4658      	mov	r0, fp
 8006ae0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ae2:	f000 fa0d 	bl	8006f00 <_Bfree>
 8006ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006aea:	9e07      	ldr	r6, [sp, #28]
 8006aec:	ea43 0102 	orr.w	r1, r3, r2
 8006af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006af2:	4319      	orrs	r1, r3
 8006af4:	d110      	bne.n	8006b18 <_dtoa_r+0xa20>
 8006af6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006afa:	d029      	beq.n	8006b50 <_dtoa_r+0xa58>
 8006afc:	9b08      	ldr	r3, [sp, #32]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	dd02      	ble.n	8006b08 <_dtoa_r+0xa10>
 8006b02:	9b02      	ldr	r3, [sp, #8]
 8006b04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006b08:	9b00      	ldr	r3, [sp, #0]
 8006b0a:	f883 8000 	strb.w	r8, [r3]
 8006b0e:	e63f      	b.n	8006790 <_dtoa_r+0x698>
 8006b10:	4628      	mov	r0, r5
 8006b12:	e7bb      	b.n	8006a8c <_dtoa_r+0x994>
 8006b14:	2201      	movs	r2, #1
 8006b16:	e7e1      	b.n	8006adc <_dtoa_r+0x9e4>
 8006b18:	9b08      	ldr	r3, [sp, #32]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	db04      	blt.n	8006b28 <_dtoa_r+0xa30>
 8006b1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b20:	430b      	orrs	r3, r1
 8006b22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b24:	430b      	orrs	r3, r1
 8006b26:	d120      	bne.n	8006b6a <_dtoa_r+0xa72>
 8006b28:	2a00      	cmp	r2, #0
 8006b2a:	dded      	ble.n	8006b08 <_dtoa_r+0xa10>
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	2201      	movs	r2, #1
 8006b30:	4658      	mov	r0, fp
 8006b32:	f000 fbb3 	bl	800729c <__lshift>
 8006b36:	4621      	mov	r1, r4
 8006b38:	4681      	mov	r9, r0
 8006b3a:	f000 fc1b 	bl	8007374 <__mcmp>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	dc03      	bgt.n	8006b4a <_dtoa_r+0xa52>
 8006b42:	d1e1      	bne.n	8006b08 <_dtoa_r+0xa10>
 8006b44:	f018 0f01 	tst.w	r8, #1
 8006b48:	d0de      	beq.n	8006b08 <_dtoa_r+0xa10>
 8006b4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b4e:	d1d8      	bne.n	8006b02 <_dtoa_r+0xa0a>
 8006b50:	9a00      	ldr	r2, [sp, #0]
 8006b52:	2339      	movs	r3, #57	@ 0x39
 8006b54:	7013      	strb	r3, [r2, #0]
 8006b56:	4633      	mov	r3, r6
 8006b58:	461e      	mov	r6, r3
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006b60:	2a39      	cmp	r2, #57	@ 0x39
 8006b62:	d052      	beq.n	8006c0a <_dtoa_r+0xb12>
 8006b64:	3201      	adds	r2, #1
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	e612      	b.n	8006790 <_dtoa_r+0x698>
 8006b6a:	2a00      	cmp	r2, #0
 8006b6c:	dd07      	ble.n	8006b7e <_dtoa_r+0xa86>
 8006b6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b72:	d0ed      	beq.n	8006b50 <_dtoa_r+0xa58>
 8006b74:	9a00      	ldr	r2, [sp, #0]
 8006b76:	f108 0301 	add.w	r3, r8, #1
 8006b7a:	7013      	strb	r3, [r2, #0]
 8006b7c:	e608      	b.n	8006790 <_dtoa_r+0x698>
 8006b7e:	9b07      	ldr	r3, [sp, #28]
 8006b80:	9a07      	ldr	r2, [sp, #28]
 8006b82:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006b86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d028      	beq.n	8006bde <_dtoa_r+0xae6>
 8006b8c:	4649      	mov	r1, r9
 8006b8e:	2300      	movs	r3, #0
 8006b90:	220a      	movs	r2, #10
 8006b92:	4658      	mov	r0, fp
 8006b94:	f000 f9d6 	bl	8006f44 <__multadd>
 8006b98:	42af      	cmp	r7, r5
 8006b9a:	4681      	mov	r9, r0
 8006b9c:	f04f 0300 	mov.w	r3, #0
 8006ba0:	f04f 020a 	mov.w	r2, #10
 8006ba4:	4639      	mov	r1, r7
 8006ba6:	4658      	mov	r0, fp
 8006ba8:	d107      	bne.n	8006bba <_dtoa_r+0xac2>
 8006baa:	f000 f9cb 	bl	8006f44 <__multadd>
 8006bae:	4607      	mov	r7, r0
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	9b07      	ldr	r3, [sp, #28]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	9307      	str	r3, [sp, #28]
 8006bb8:	e774      	b.n	8006aa4 <_dtoa_r+0x9ac>
 8006bba:	f000 f9c3 	bl	8006f44 <__multadd>
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	220a      	movs	r2, #10
 8006bc6:	4658      	mov	r0, fp
 8006bc8:	f000 f9bc 	bl	8006f44 <__multadd>
 8006bcc:	4605      	mov	r5, r0
 8006bce:	e7f0      	b.n	8006bb2 <_dtoa_r+0xaba>
 8006bd0:	9b00      	ldr	r3, [sp, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	bfcc      	ite	gt
 8006bd6:	461e      	movgt	r6, r3
 8006bd8:	2601      	movle	r6, #1
 8006bda:	4456      	add	r6, sl
 8006bdc:	2700      	movs	r7, #0
 8006bde:	4649      	mov	r1, r9
 8006be0:	2201      	movs	r2, #1
 8006be2:	4658      	mov	r0, fp
 8006be4:	f000 fb5a 	bl	800729c <__lshift>
 8006be8:	4621      	mov	r1, r4
 8006bea:	4681      	mov	r9, r0
 8006bec:	f000 fbc2 	bl	8007374 <__mcmp>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	dcb0      	bgt.n	8006b56 <_dtoa_r+0xa5e>
 8006bf4:	d102      	bne.n	8006bfc <_dtoa_r+0xb04>
 8006bf6:	f018 0f01 	tst.w	r8, #1
 8006bfa:	d1ac      	bne.n	8006b56 <_dtoa_r+0xa5e>
 8006bfc:	4633      	mov	r3, r6
 8006bfe:	461e      	mov	r6, r3
 8006c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c04:	2a30      	cmp	r2, #48	@ 0x30
 8006c06:	d0fa      	beq.n	8006bfe <_dtoa_r+0xb06>
 8006c08:	e5c2      	b.n	8006790 <_dtoa_r+0x698>
 8006c0a:	459a      	cmp	sl, r3
 8006c0c:	d1a4      	bne.n	8006b58 <_dtoa_r+0xa60>
 8006c0e:	9b04      	ldr	r3, [sp, #16]
 8006c10:	3301      	adds	r3, #1
 8006c12:	9304      	str	r3, [sp, #16]
 8006c14:	2331      	movs	r3, #49	@ 0x31
 8006c16:	f88a 3000 	strb.w	r3, [sl]
 8006c1a:	e5b9      	b.n	8006790 <_dtoa_r+0x698>
 8006c1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006c7c <_dtoa_r+0xb84>
 8006c22:	b11b      	cbz	r3, 8006c2c <_dtoa_r+0xb34>
 8006c24:	f10a 0308 	add.w	r3, sl, #8
 8006c28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	4650      	mov	r0, sl
 8006c2e:	b019      	add	sp, #100	@ 0x64
 8006c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	f77f ae37 	ble.w	80068aa <_dtoa_r+0x7b2>
 8006c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c40:	2001      	movs	r0, #1
 8006c42:	e655      	b.n	80068f0 <_dtoa_r+0x7f8>
 8006c44:	9b00      	ldr	r3, [sp, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f77f aed6 	ble.w	80069f8 <_dtoa_r+0x900>
 8006c4c:	4656      	mov	r6, sl
 8006c4e:	4621      	mov	r1, r4
 8006c50:	4648      	mov	r0, r9
 8006c52:	f7ff f9c6 	bl	8005fe2 <quorem>
 8006c56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006c5a:	f806 8b01 	strb.w	r8, [r6], #1
 8006c5e:	9b00      	ldr	r3, [sp, #0]
 8006c60:	eba6 020a 	sub.w	r2, r6, sl
 8006c64:	4293      	cmp	r3, r2
 8006c66:	ddb3      	ble.n	8006bd0 <_dtoa_r+0xad8>
 8006c68:	4649      	mov	r1, r9
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	220a      	movs	r2, #10
 8006c6e:	4658      	mov	r0, fp
 8006c70:	f000 f968 	bl	8006f44 <__multadd>
 8006c74:	4681      	mov	r9, r0
 8006c76:	e7ea      	b.n	8006c4e <_dtoa_r+0xb56>
 8006c78:	08007e28 	.word	0x08007e28
 8006c7c:	08007dac 	.word	0x08007dac

08006c80 <_free_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4605      	mov	r5, r0
 8006c84:	2900      	cmp	r1, #0
 8006c86:	d041      	beq.n	8006d0c <_free_r+0x8c>
 8006c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c8c:	1f0c      	subs	r4, r1, #4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	bfb8      	it	lt
 8006c92:	18e4      	addlt	r4, r4, r3
 8006c94:	f000 f8e8 	bl	8006e68 <__malloc_lock>
 8006c98:	4a1d      	ldr	r2, [pc, #116]	@ (8006d10 <_free_r+0x90>)
 8006c9a:	6813      	ldr	r3, [r2, #0]
 8006c9c:	b933      	cbnz	r3, 8006cac <_free_r+0x2c>
 8006c9e:	6063      	str	r3, [r4, #4]
 8006ca0:	6014      	str	r4, [r2, #0]
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ca8:	f000 b8e4 	b.w	8006e74 <__malloc_unlock>
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	d908      	bls.n	8006cc2 <_free_r+0x42>
 8006cb0:	6820      	ldr	r0, [r4, #0]
 8006cb2:	1821      	adds	r1, r4, r0
 8006cb4:	428b      	cmp	r3, r1
 8006cb6:	bf01      	itttt	eq
 8006cb8:	6819      	ldreq	r1, [r3, #0]
 8006cba:	685b      	ldreq	r3, [r3, #4]
 8006cbc:	1809      	addeq	r1, r1, r0
 8006cbe:	6021      	streq	r1, [r4, #0]
 8006cc0:	e7ed      	b.n	8006c9e <_free_r+0x1e>
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	b10b      	cbz	r3, 8006ccc <_free_r+0x4c>
 8006cc8:	42a3      	cmp	r3, r4
 8006cca:	d9fa      	bls.n	8006cc2 <_free_r+0x42>
 8006ccc:	6811      	ldr	r1, [r2, #0]
 8006cce:	1850      	adds	r0, r2, r1
 8006cd0:	42a0      	cmp	r0, r4
 8006cd2:	d10b      	bne.n	8006cec <_free_r+0x6c>
 8006cd4:	6820      	ldr	r0, [r4, #0]
 8006cd6:	4401      	add	r1, r0
 8006cd8:	1850      	adds	r0, r2, r1
 8006cda:	4283      	cmp	r3, r0
 8006cdc:	6011      	str	r1, [r2, #0]
 8006cde:	d1e0      	bne.n	8006ca2 <_free_r+0x22>
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	6053      	str	r3, [r2, #4]
 8006ce6:	4408      	add	r0, r1
 8006ce8:	6010      	str	r0, [r2, #0]
 8006cea:	e7da      	b.n	8006ca2 <_free_r+0x22>
 8006cec:	d902      	bls.n	8006cf4 <_free_r+0x74>
 8006cee:	230c      	movs	r3, #12
 8006cf0:	602b      	str	r3, [r5, #0]
 8006cf2:	e7d6      	b.n	8006ca2 <_free_r+0x22>
 8006cf4:	6820      	ldr	r0, [r4, #0]
 8006cf6:	1821      	adds	r1, r4, r0
 8006cf8:	428b      	cmp	r3, r1
 8006cfa:	bf04      	itt	eq
 8006cfc:	6819      	ldreq	r1, [r3, #0]
 8006cfe:	685b      	ldreq	r3, [r3, #4]
 8006d00:	6063      	str	r3, [r4, #4]
 8006d02:	bf04      	itt	eq
 8006d04:	1809      	addeq	r1, r1, r0
 8006d06:	6021      	streq	r1, [r4, #0]
 8006d08:	6054      	str	r4, [r2, #4]
 8006d0a:	e7ca      	b.n	8006ca2 <_free_r+0x22>
 8006d0c:	bd38      	pop	{r3, r4, r5, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000504 	.word	0x20000504

08006d14 <malloc>:
 8006d14:	4b02      	ldr	r3, [pc, #8]	@ (8006d20 <malloc+0xc>)
 8006d16:	4601      	mov	r1, r0
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	f000 b825 	b.w	8006d68 <_malloc_r>
 8006d1e:	bf00      	nop
 8006d20:	20000038 	.word	0x20000038

08006d24 <sbrk_aligned>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	4e0f      	ldr	r6, [pc, #60]	@ (8006d64 <sbrk_aligned+0x40>)
 8006d28:	460c      	mov	r4, r1
 8006d2a:	6831      	ldr	r1, [r6, #0]
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	b911      	cbnz	r1, 8006d36 <sbrk_aligned+0x12>
 8006d30:	f000 fd58 	bl	80077e4 <_sbrk_r>
 8006d34:	6030      	str	r0, [r6, #0]
 8006d36:	4621      	mov	r1, r4
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f000 fd53 	bl	80077e4 <_sbrk_r>
 8006d3e:	1c43      	adds	r3, r0, #1
 8006d40:	d103      	bne.n	8006d4a <sbrk_aligned+0x26>
 8006d42:	f04f 34ff 	mov.w	r4, #4294967295
 8006d46:	4620      	mov	r0, r4
 8006d48:	bd70      	pop	{r4, r5, r6, pc}
 8006d4a:	1cc4      	adds	r4, r0, #3
 8006d4c:	f024 0403 	bic.w	r4, r4, #3
 8006d50:	42a0      	cmp	r0, r4
 8006d52:	d0f8      	beq.n	8006d46 <sbrk_aligned+0x22>
 8006d54:	1a21      	subs	r1, r4, r0
 8006d56:	4628      	mov	r0, r5
 8006d58:	f000 fd44 	bl	80077e4 <_sbrk_r>
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d1f2      	bne.n	8006d46 <sbrk_aligned+0x22>
 8006d60:	e7ef      	b.n	8006d42 <sbrk_aligned+0x1e>
 8006d62:	bf00      	nop
 8006d64:	20000500 	.word	0x20000500

08006d68 <_malloc_r>:
 8006d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d6c:	1ccd      	adds	r5, r1, #3
 8006d6e:	f025 0503 	bic.w	r5, r5, #3
 8006d72:	3508      	adds	r5, #8
 8006d74:	2d0c      	cmp	r5, #12
 8006d76:	bf38      	it	cc
 8006d78:	250c      	movcc	r5, #12
 8006d7a:	2d00      	cmp	r5, #0
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	db01      	blt.n	8006d84 <_malloc_r+0x1c>
 8006d80:	42a9      	cmp	r1, r5
 8006d82:	d904      	bls.n	8006d8e <_malloc_r+0x26>
 8006d84:	230c      	movs	r3, #12
 8006d86:	6033      	str	r3, [r6, #0]
 8006d88:	2000      	movs	r0, #0
 8006d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e64 <_malloc_r+0xfc>
 8006d92:	f000 f869 	bl	8006e68 <__malloc_lock>
 8006d96:	f8d8 3000 	ldr.w	r3, [r8]
 8006d9a:	461c      	mov	r4, r3
 8006d9c:	bb44      	cbnz	r4, 8006df0 <_malloc_r+0x88>
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4630      	mov	r0, r6
 8006da2:	f7ff ffbf 	bl	8006d24 <sbrk_aligned>
 8006da6:	1c43      	adds	r3, r0, #1
 8006da8:	4604      	mov	r4, r0
 8006daa:	d158      	bne.n	8006e5e <_malloc_r+0xf6>
 8006dac:	f8d8 4000 	ldr.w	r4, [r8]
 8006db0:	4627      	mov	r7, r4
 8006db2:	2f00      	cmp	r7, #0
 8006db4:	d143      	bne.n	8006e3e <_malloc_r+0xd6>
 8006db6:	2c00      	cmp	r4, #0
 8006db8:	d04b      	beq.n	8006e52 <_malloc_r+0xea>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	4639      	mov	r1, r7
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	eb04 0903 	add.w	r9, r4, r3
 8006dc4:	f000 fd0e 	bl	80077e4 <_sbrk_r>
 8006dc8:	4581      	cmp	r9, r0
 8006dca:	d142      	bne.n	8006e52 <_malloc_r+0xea>
 8006dcc:	6821      	ldr	r1, [r4, #0]
 8006dce:	1a6d      	subs	r5, r5, r1
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7ff ffa6 	bl	8006d24 <sbrk_aligned>
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d03a      	beq.n	8006e52 <_malloc_r+0xea>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	442b      	add	r3, r5
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	f8d8 3000 	ldr.w	r3, [r8]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	bb62      	cbnz	r2, 8006e44 <_malloc_r+0xdc>
 8006dea:	f8c8 7000 	str.w	r7, [r8]
 8006dee:	e00f      	b.n	8006e10 <_malloc_r+0xa8>
 8006df0:	6822      	ldr	r2, [r4, #0]
 8006df2:	1b52      	subs	r2, r2, r5
 8006df4:	d420      	bmi.n	8006e38 <_malloc_r+0xd0>
 8006df6:	2a0b      	cmp	r2, #11
 8006df8:	d917      	bls.n	8006e2a <_malloc_r+0xc2>
 8006dfa:	1961      	adds	r1, r4, r5
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	6025      	str	r5, [r4, #0]
 8006e00:	bf18      	it	ne
 8006e02:	6059      	strne	r1, [r3, #4]
 8006e04:	6863      	ldr	r3, [r4, #4]
 8006e06:	bf08      	it	eq
 8006e08:	f8c8 1000 	streq.w	r1, [r8]
 8006e0c:	5162      	str	r2, [r4, r5]
 8006e0e:	604b      	str	r3, [r1, #4]
 8006e10:	4630      	mov	r0, r6
 8006e12:	f000 f82f 	bl	8006e74 <__malloc_unlock>
 8006e16:	f104 000b 	add.w	r0, r4, #11
 8006e1a:	1d23      	adds	r3, r4, #4
 8006e1c:	f020 0007 	bic.w	r0, r0, #7
 8006e20:	1ac2      	subs	r2, r0, r3
 8006e22:	bf1c      	itt	ne
 8006e24:	1a1b      	subne	r3, r3, r0
 8006e26:	50a3      	strne	r3, [r4, r2]
 8006e28:	e7af      	b.n	8006d8a <_malloc_r+0x22>
 8006e2a:	6862      	ldr	r2, [r4, #4]
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	bf0c      	ite	eq
 8006e30:	f8c8 2000 	streq.w	r2, [r8]
 8006e34:	605a      	strne	r2, [r3, #4]
 8006e36:	e7eb      	b.n	8006e10 <_malloc_r+0xa8>
 8006e38:	4623      	mov	r3, r4
 8006e3a:	6864      	ldr	r4, [r4, #4]
 8006e3c:	e7ae      	b.n	8006d9c <_malloc_r+0x34>
 8006e3e:	463c      	mov	r4, r7
 8006e40:	687f      	ldr	r7, [r7, #4]
 8006e42:	e7b6      	b.n	8006db2 <_malloc_r+0x4a>
 8006e44:	461a      	mov	r2, r3
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d1fb      	bne.n	8006e44 <_malloc_r+0xdc>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	6053      	str	r3, [r2, #4]
 8006e50:	e7de      	b.n	8006e10 <_malloc_r+0xa8>
 8006e52:	230c      	movs	r3, #12
 8006e54:	6033      	str	r3, [r6, #0]
 8006e56:	4630      	mov	r0, r6
 8006e58:	f000 f80c 	bl	8006e74 <__malloc_unlock>
 8006e5c:	e794      	b.n	8006d88 <_malloc_r+0x20>
 8006e5e:	6005      	str	r5, [r0, #0]
 8006e60:	e7d6      	b.n	8006e10 <_malloc_r+0xa8>
 8006e62:	bf00      	nop
 8006e64:	20000504 	.word	0x20000504

08006e68 <__malloc_lock>:
 8006e68:	4801      	ldr	r0, [pc, #4]	@ (8006e70 <__malloc_lock+0x8>)
 8006e6a:	f7ff b8b8 	b.w	8005fde <__retarget_lock_acquire_recursive>
 8006e6e:	bf00      	nop
 8006e70:	200004fc 	.word	0x200004fc

08006e74 <__malloc_unlock>:
 8006e74:	4801      	ldr	r0, [pc, #4]	@ (8006e7c <__malloc_unlock+0x8>)
 8006e76:	f7ff b8b3 	b.w	8005fe0 <__retarget_lock_release_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	200004fc 	.word	0x200004fc

08006e80 <_Balloc>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	69c6      	ldr	r6, [r0, #28]
 8006e84:	4604      	mov	r4, r0
 8006e86:	460d      	mov	r5, r1
 8006e88:	b976      	cbnz	r6, 8006ea8 <_Balloc+0x28>
 8006e8a:	2010      	movs	r0, #16
 8006e8c:	f7ff ff42 	bl	8006d14 <malloc>
 8006e90:	4602      	mov	r2, r0
 8006e92:	61e0      	str	r0, [r4, #28]
 8006e94:	b920      	cbnz	r0, 8006ea0 <_Balloc+0x20>
 8006e96:	4b18      	ldr	r3, [pc, #96]	@ (8006ef8 <_Balloc+0x78>)
 8006e98:	4818      	ldr	r0, [pc, #96]	@ (8006efc <_Balloc+0x7c>)
 8006e9a:	216b      	movs	r1, #107	@ 0x6b
 8006e9c:	f000 fcc0 	bl	8007820 <__assert_func>
 8006ea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ea4:	6006      	str	r6, [r0, #0]
 8006ea6:	60c6      	str	r6, [r0, #12]
 8006ea8:	69e6      	ldr	r6, [r4, #28]
 8006eaa:	68f3      	ldr	r3, [r6, #12]
 8006eac:	b183      	cbz	r3, 8006ed0 <_Balloc+0x50>
 8006eae:	69e3      	ldr	r3, [r4, #28]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006eb6:	b9b8      	cbnz	r0, 8006ee8 <_Balloc+0x68>
 8006eb8:	2101      	movs	r1, #1
 8006eba:	fa01 f605 	lsl.w	r6, r1, r5
 8006ebe:	1d72      	adds	r2, r6, #5
 8006ec0:	0092      	lsls	r2, r2, #2
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f000 fcca 	bl	800785c <_calloc_r>
 8006ec8:	b160      	cbz	r0, 8006ee4 <_Balloc+0x64>
 8006eca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ece:	e00e      	b.n	8006eee <_Balloc+0x6e>
 8006ed0:	2221      	movs	r2, #33	@ 0x21
 8006ed2:	2104      	movs	r1, #4
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 fcc1 	bl	800785c <_calloc_r>
 8006eda:	69e3      	ldr	r3, [r4, #28]
 8006edc:	60f0      	str	r0, [r6, #12]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e4      	bne.n	8006eae <_Balloc+0x2e>
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}
 8006ee8:	6802      	ldr	r2, [r0, #0]
 8006eea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ef4:	e7f7      	b.n	8006ee6 <_Balloc+0x66>
 8006ef6:	bf00      	nop
 8006ef8:	08007db9 	.word	0x08007db9
 8006efc:	08007e39 	.word	0x08007e39

08006f00 <_Bfree>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	69c6      	ldr	r6, [r0, #28]
 8006f04:	4605      	mov	r5, r0
 8006f06:	460c      	mov	r4, r1
 8006f08:	b976      	cbnz	r6, 8006f28 <_Bfree+0x28>
 8006f0a:	2010      	movs	r0, #16
 8006f0c:	f7ff ff02 	bl	8006d14 <malloc>
 8006f10:	4602      	mov	r2, r0
 8006f12:	61e8      	str	r0, [r5, #28]
 8006f14:	b920      	cbnz	r0, 8006f20 <_Bfree+0x20>
 8006f16:	4b09      	ldr	r3, [pc, #36]	@ (8006f3c <_Bfree+0x3c>)
 8006f18:	4809      	ldr	r0, [pc, #36]	@ (8006f40 <_Bfree+0x40>)
 8006f1a:	218f      	movs	r1, #143	@ 0x8f
 8006f1c:	f000 fc80 	bl	8007820 <__assert_func>
 8006f20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f24:	6006      	str	r6, [r0, #0]
 8006f26:	60c6      	str	r6, [r0, #12]
 8006f28:	b13c      	cbz	r4, 8006f3a <_Bfree+0x3a>
 8006f2a:	69eb      	ldr	r3, [r5, #28]
 8006f2c:	6862      	ldr	r2, [r4, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f34:	6021      	str	r1, [r4, #0]
 8006f36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}
 8006f3c:	08007db9 	.word	0x08007db9
 8006f40:	08007e39 	.word	0x08007e39

08006f44 <__multadd>:
 8006f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f48:	690d      	ldr	r5, [r1, #16]
 8006f4a:	4607      	mov	r7, r0
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	461e      	mov	r6, r3
 8006f50:	f101 0c14 	add.w	ip, r1, #20
 8006f54:	2000      	movs	r0, #0
 8006f56:	f8dc 3000 	ldr.w	r3, [ip]
 8006f5a:	b299      	uxth	r1, r3
 8006f5c:	fb02 6101 	mla	r1, r2, r1, r6
 8006f60:	0c1e      	lsrs	r6, r3, #16
 8006f62:	0c0b      	lsrs	r3, r1, #16
 8006f64:	fb02 3306 	mla	r3, r2, r6, r3
 8006f68:	b289      	uxth	r1, r1
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f70:	4285      	cmp	r5, r0
 8006f72:	f84c 1b04 	str.w	r1, [ip], #4
 8006f76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f7a:	dcec      	bgt.n	8006f56 <__multadd+0x12>
 8006f7c:	b30e      	cbz	r6, 8006fc2 <__multadd+0x7e>
 8006f7e:	68a3      	ldr	r3, [r4, #8]
 8006f80:	42ab      	cmp	r3, r5
 8006f82:	dc19      	bgt.n	8006fb8 <__multadd+0x74>
 8006f84:	6861      	ldr	r1, [r4, #4]
 8006f86:	4638      	mov	r0, r7
 8006f88:	3101      	adds	r1, #1
 8006f8a:	f7ff ff79 	bl	8006e80 <_Balloc>
 8006f8e:	4680      	mov	r8, r0
 8006f90:	b928      	cbnz	r0, 8006f9e <__multadd+0x5a>
 8006f92:	4602      	mov	r2, r0
 8006f94:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc8 <__multadd+0x84>)
 8006f96:	480d      	ldr	r0, [pc, #52]	@ (8006fcc <__multadd+0x88>)
 8006f98:	21ba      	movs	r1, #186	@ 0xba
 8006f9a:	f000 fc41 	bl	8007820 <__assert_func>
 8006f9e:	6922      	ldr	r2, [r4, #16]
 8006fa0:	3202      	adds	r2, #2
 8006fa2:	f104 010c 	add.w	r1, r4, #12
 8006fa6:	0092      	lsls	r2, r2, #2
 8006fa8:	300c      	adds	r0, #12
 8006faa:	f000 fc2b 	bl	8007804 <memcpy>
 8006fae:	4621      	mov	r1, r4
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	f7ff ffa5 	bl	8006f00 <_Bfree>
 8006fb6:	4644      	mov	r4, r8
 8006fb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fbc:	3501      	adds	r5, #1
 8006fbe:	615e      	str	r6, [r3, #20]
 8006fc0:	6125      	str	r5, [r4, #16]
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc8:	08007e28 	.word	0x08007e28
 8006fcc:	08007e39 	.word	0x08007e39

08006fd0 <__hi0bits>:
 8006fd0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	bf36      	itet	cc
 8006fd8:	0403      	lslcc	r3, r0, #16
 8006fda:	2000      	movcs	r0, #0
 8006fdc:	2010      	movcc	r0, #16
 8006fde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fe2:	bf3c      	itt	cc
 8006fe4:	021b      	lslcc	r3, r3, #8
 8006fe6:	3008      	addcc	r0, #8
 8006fe8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fec:	bf3c      	itt	cc
 8006fee:	011b      	lslcc	r3, r3, #4
 8006ff0:	3004      	addcc	r0, #4
 8006ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ff6:	bf3c      	itt	cc
 8006ff8:	009b      	lslcc	r3, r3, #2
 8006ffa:	3002      	addcc	r0, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	db05      	blt.n	800700c <__hi0bits+0x3c>
 8007000:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007004:	f100 0001 	add.w	r0, r0, #1
 8007008:	bf08      	it	eq
 800700a:	2020      	moveq	r0, #32
 800700c:	4770      	bx	lr

0800700e <__lo0bits>:
 800700e:	6803      	ldr	r3, [r0, #0]
 8007010:	4602      	mov	r2, r0
 8007012:	f013 0007 	ands.w	r0, r3, #7
 8007016:	d00b      	beq.n	8007030 <__lo0bits+0x22>
 8007018:	07d9      	lsls	r1, r3, #31
 800701a:	d421      	bmi.n	8007060 <__lo0bits+0x52>
 800701c:	0798      	lsls	r0, r3, #30
 800701e:	bf49      	itett	mi
 8007020:	085b      	lsrmi	r3, r3, #1
 8007022:	089b      	lsrpl	r3, r3, #2
 8007024:	2001      	movmi	r0, #1
 8007026:	6013      	strmi	r3, [r2, #0]
 8007028:	bf5c      	itt	pl
 800702a:	6013      	strpl	r3, [r2, #0]
 800702c:	2002      	movpl	r0, #2
 800702e:	4770      	bx	lr
 8007030:	b299      	uxth	r1, r3
 8007032:	b909      	cbnz	r1, 8007038 <__lo0bits+0x2a>
 8007034:	0c1b      	lsrs	r3, r3, #16
 8007036:	2010      	movs	r0, #16
 8007038:	b2d9      	uxtb	r1, r3
 800703a:	b909      	cbnz	r1, 8007040 <__lo0bits+0x32>
 800703c:	3008      	adds	r0, #8
 800703e:	0a1b      	lsrs	r3, r3, #8
 8007040:	0719      	lsls	r1, r3, #28
 8007042:	bf04      	itt	eq
 8007044:	091b      	lsreq	r3, r3, #4
 8007046:	3004      	addeq	r0, #4
 8007048:	0799      	lsls	r1, r3, #30
 800704a:	bf04      	itt	eq
 800704c:	089b      	lsreq	r3, r3, #2
 800704e:	3002      	addeq	r0, #2
 8007050:	07d9      	lsls	r1, r3, #31
 8007052:	d403      	bmi.n	800705c <__lo0bits+0x4e>
 8007054:	085b      	lsrs	r3, r3, #1
 8007056:	f100 0001 	add.w	r0, r0, #1
 800705a:	d003      	beq.n	8007064 <__lo0bits+0x56>
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	4770      	bx	lr
 8007060:	2000      	movs	r0, #0
 8007062:	4770      	bx	lr
 8007064:	2020      	movs	r0, #32
 8007066:	4770      	bx	lr

08007068 <__i2b>:
 8007068:	b510      	push	{r4, lr}
 800706a:	460c      	mov	r4, r1
 800706c:	2101      	movs	r1, #1
 800706e:	f7ff ff07 	bl	8006e80 <_Balloc>
 8007072:	4602      	mov	r2, r0
 8007074:	b928      	cbnz	r0, 8007082 <__i2b+0x1a>
 8007076:	4b05      	ldr	r3, [pc, #20]	@ (800708c <__i2b+0x24>)
 8007078:	4805      	ldr	r0, [pc, #20]	@ (8007090 <__i2b+0x28>)
 800707a:	f240 1145 	movw	r1, #325	@ 0x145
 800707e:	f000 fbcf 	bl	8007820 <__assert_func>
 8007082:	2301      	movs	r3, #1
 8007084:	6144      	str	r4, [r0, #20]
 8007086:	6103      	str	r3, [r0, #16]
 8007088:	bd10      	pop	{r4, pc}
 800708a:	bf00      	nop
 800708c:	08007e28 	.word	0x08007e28
 8007090:	08007e39 	.word	0x08007e39

08007094 <__multiply>:
 8007094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	4614      	mov	r4, r2
 800709a:	690a      	ldr	r2, [r1, #16]
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	429a      	cmp	r2, r3
 80070a0:	bfa8      	it	ge
 80070a2:	4623      	movge	r3, r4
 80070a4:	460f      	mov	r7, r1
 80070a6:	bfa4      	itt	ge
 80070a8:	460c      	movge	r4, r1
 80070aa:	461f      	movge	r7, r3
 80070ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80070b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80070b4:	68a3      	ldr	r3, [r4, #8]
 80070b6:	6861      	ldr	r1, [r4, #4]
 80070b8:	eb0a 0609 	add.w	r6, sl, r9
 80070bc:	42b3      	cmp	r3, r6
 80070be:	b085      	sub	sp, #20
 80070c0:	bfb8      	it	lt
 80070c2:	3101      	addlt	r1, #1
 80070c4:	f7ff fedc 	bl	8006e80 <_Balloc>
 80070c8:	b930      	cbnz	r0, 80070d8 <__multiply+0x44>
 80070ca:	4602      	mov	r2, r0
 80070cc:	4b44      	ldr	r3, [pc, #272]	@ (80071e0 <__multiply+0x14c>)
 80070ce:	4845      	ldr	r0, [pc, #276]	@ (80071e4 <__multiply+0x150>)
 80070d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80070d4:	f000 fba4 	bl	8007820 <__assert_func>
 80070d8:	f100 0514 	add.w	r5, r0, #20
 80070dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070e0:	462b      	mov	r3, r5
 80070e2:	2200      	movs	r2, #0
 80070e4:	4543      	cmp	r3, r8
 80070e6:	d321      	bcc.n	800712c <__multiply+0x98>
 80070e8:	f107 0114 	add.w	r1, r7, #20
 80070ec:	f104 0214 	add.w	r2, r4, #20
 80070f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80070f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80070f8:	9302      	str	r3, [sp, #8]
 80070fa:	1b13      	subs	r3, r2, r4
 80070fc:	3b15      	subs	r3, #21
 80070fe:	f023 0303 	bic.w	r3, r3, #3
 8007102:	3304      	adds	r3, #4
 8007104:	f104 0715 	add.w	r7, r4, #21
 8007108:	42ba      	cmp	r2, r7
 800710a:	bf38      	it	cc
 800710c:	2304      	movcc	r3, #4
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	9b02      	ldr	r3, [sp, #8]
 8007112:	9103      	str	r1, [sp, #12]
 8007114:	428b      	cmp	r3, r1
 8007116:	d80c      	bhi.n	8007132 <__multiply+0x9e>
 8007118:	2e00      	cmp	r6, #0
 800711a:	dd03      	ble.n	8007124 <__multiply+0x90>
 800711c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007120:	2b00      	cmp	r3, #0
 8007122:	d05b      	beq.n	80071dc <__multiply+0x148>
 8007124:	6106      	str	r6, [r0, #16]
 8007126:	b005      	add	sp, #20
 8007128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712c:	f843 2b04 	str.w	r2, [r3], #4
 8007130:	e7d8      	b.n	80070e4 <__multiply+0x50>
 8007132:	f8b1 a000 	ldrh.w	sl, [r1]
 8007136:	f1ba 0f00 	cmp.w	sl, #0
 800713a:	d024      	beq.n	8007186 <__multiply+0xf2>
 800713c:	f104 0e14 	add.w	lr, r4, #20
 8007140:	46a9      	mov	r9, r5
 8007142:	f04f 0c00 	mov.w	ip, #0
 8007146:	f85e 7b04 	ldr.w	r7, [lr], #4
 800714a:	f8d9 3000 	ldr.w	r3, [r9]
 800714e:	fa1f fb87 	uxth.w	fp, r7
 8007152:	b29b      	uxth	r3, r3
 8007154:	fb0a 330b 	mla	r3, sl, fp, r3
 8007158:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800715c:	f8d9 7000 	ldr.w	r7, [r9]
 8007160:	4463      	add	r3, ip
 8007162:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007166:	fb0a c70b 	mla	r7, sl, fp, ip
 800716a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800716e:	b29b      	uxth	r3, r3
 8007170:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007174:	4572      	cmp	r2, lr
 8007176:	f849 3b04 	str.w	r3, [r9], #4
 800717a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800717e:	d8e2      	bhi.n	8007146 <__multiply+0xb2>
 8007180:	9b01      	ldr	r3, [sp, #4]
 8007182:	f845 c003 	str.w	ip, [r5, r3]
 8007186:	9b03      	ldr	r3, [sp, #12]
 8007188:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800718c:	3104      	adds	r1, #4
 800718e:	f1b9 0f00 	cmp.w	r9, #0
 8007192:	d021      	beq.n	80071d8 <__multiply+0x144>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	f104 0c14 	add.w	ip, r4, #20
 800719a:	46ae      	mov	lr, r5
 800719c:	f04f 0a00 	mov.w	sl, #0
 80071a0:	f8bc b000 	ldrh.w	fp, [ip]
 80071a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80071a8:	fb09 770b 	mla	r7, r9, fp, r7
 80071ac:	4457      	add	r7, sl
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071b4:	f84e 3b04 	str.w	r3, [lr], #4
 80071b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071c0:	f8be 3000 	ldrh.w	r3, [lr]
 80071c4:	fb09 330a 	mla	r3, r9, sl, r3
 80071c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80071cc:	4562      	cmp	r2, ip
 80071ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071d2:	d8e5      	bhi.n	80071a0 <__multiply+0x10c>
 80071d4:	9f01      	ldr	r7, [sp, #4]
 80071d6:	51eb      	str	r3, [r5, r7]
 80071d8:	3504      	adds	r5, #4
 80071da:	e799      	b.n	8007110 <__multiply+0x7c>
 80071dc:	3e01      	subs	r6, #1
 80071de:	e79b      	b.n	8007118 <__multiply+0x84>
 80071e0:	08007e28 	.word	0x08007e28
 80071e4:	08007e39 	.word	0x08007e39

080071e8 <__pow5mult>:
 80071e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071ec:	4615      	mov	r5, r2
 80071ee:	f012 0203 	ands.w	r2, r2, #3
 80071f2:	4607      	mov	r7, r0
 80071f4:	460e      	mov	r6, r1
 80071f6:	d007      	beq.n	8007208 <__pow5mult+0x20>
 80071f8:	4c25      	ldr	r4, [pc, #148]	@ (8007290 <__pow5mult+0xa8>)
 80071fa:	3a01      	subs	r2, #1
 80071fc:	2300      	movs	r3, #0
 80071fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007202:	f7ff fe9f 	bl	8006f44 <__multadd>
 8007206:	4606      	mov	r6, r0
 8007208:	10ad      	asrs	r5, r5, #2
 800720a:	d03d      	beq.n	8007288 <__pow5mult+0xa0>
 800720c:	69fc      	ldr	r4, [r7, #28]
 800720e:	b97c      	cbnz	r4, 8007230 <__pow5mult+0x48>
 8007210:	2010      	movs	r0, #16
 8007212:	f7ff fd7f 	bl	8006d14 <malloc>
 8007216:	4602      	mov	r2, r0
 8007218:	61f8      	str	r0, [r7, #28]
 800721a:	b928      	cbnz	r0, 8007228 <__pow5mult+0x40>
 800721c:	4b1d      	ldr	r3, [pc, #116]	@ (8007294 <__pow5mult+0xac>)
 800721e:	481e      	ldr	r0, [pc, #120]	@ (8007298 <__pow5mult+0xb0>)
 8007220:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007224:	f000 fafc 	bl	8007820 <__assert_func>
 8007228:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800722c:	6004      	str	r4, [r0, #0]
 800722e:	60c4      	str	r4, [r0, #12]
 8007230:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007234:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007238:	b94c      	cbnz	r4, 800724e <__pow5mult+0x66>
 800723a:	f240 2171 	movw	r1, #625	@ 0x271
 800723e:	4638      	mov	r0, r7
 8007240:	f7ff ff12 	bl	8007068 <__i2b>
 8007244:	2300      	movs	r3, #0
 8007246:	f8c8 0008 	str.w	r0, [r8, #8]
 800724a:	4604      	mov	r4, r0
 800724c:	6003      	str	r3, [r0, #0]
 800724e:	f04f 0900 	mov.w	r9, #0
 8007252:	07eb      	lsls	r3, r5, #31
 8007254:	d50a      	bpl.n	800726c <__pow5mult+0x84>
 8007256:	4631      	mov	r1, r6
 8007258:	4622      	mov	r2, r4
 800725a:	4638      	mov	r0, r7
 800725c:	f7ff ff1a 	bl	8007094 <__multiply>
 8007260:	4631      	mov	r1, r6
 8007262:	4680      	mov	r8, r0
 8007264:	4638      	mov	r0, r7
 8007266:	f7ff fe4b 	bl	8006f00 <_Bfree>
 800726a:	4646      	mov	r6, r8
 800726c:	106d      	asrs	r5, r5, #1
 800726e:	d00b      	beq.n	8007288 <__pow5mult+0xa0>
 8007270:	6820      	ldr	r0, [r4, #0]
 8007272:	b938      	cbnz	r0, 8007284 <__pow5mult+0x9c>
 8007274:	4622      	mov	r2, r4
 8007276:	4621      	mov	r1, r4
 8007278:	4638      	mov	r0, r7
 800727a:	f7ff ff0b 	bl	8007094 <__multiply>
 800727e:	6020      	str	r0, [r4, #0]
 8007280:	f8c0 9000 	str.w	r9, [r0]
 8007284:	4604      	mov	r4, r0
 8007286:	e7e4      	b.n	8007252 <__pow5mult+0x6a>
 8007288:	4630      	mov	r0, r6
 800728a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800728e:	bf00      	nop
 8007290:	08007e94 	.word	0x08007e94
 8007294:	08007db9 	.word	0x08007db9
 8007298:	08007e39 	.word	0x08007e39

0800729c <__lshift>:
 800729c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a0:	460c      	mov	r4, r1
 80072a2:	6849      	ldr	r1, [r1, #4]
 80072a4:	6923      	ldr	r3, [r4, #16]
 80072a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072aa:	68a3      	ldr	r3, [r4, #8]
 80072ac:	4607      	mov	r7, r0
 80072ae:	4691      	mov	r9, r2
 80072b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072b4:	f108 0601 	add.w	r6, r8, #1
 80072b8:	42b3      	cmp	r3, r6
 80072ba:	db0b      	blt.n	80072d4 <__lshift+0x38>
 80072bc:	4638      	mov	r0, r7
 80072be:	f7ff fddf 	bl	8006e80 <_Balloc>
 80072c2:	4605      	mov	r5, r0
 80072c4:	b948      	cbnz	r0, 80072da <__lshift+0x3e>
 80072c6:	4602      	mov	r2, r0
 80072c8:	4b28      	ldr	r3, [pc, #160]	@ (800736c <__lshift+0xd0>)
 80072ca:	4829      	ldr	r0, [pc, #164]	@ (8007370 <__lshift+0xd4>)
 80072cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80072d0:	f000 faa6 	bl	8007820 <__assert_func>
 80072d4:	3101      	adds	r1, #1
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	e7ee      	b.n	80072b8 <__lshift+0x1c>
 80072da:	2300      	movs	r3, #0
 80072dc:	f100 0114 	add.w	r1, r0, #20
 80072e0:	f100 0210 	add.w	r2, r0, #16
 80072e4:	4618      	mov	r0, r3
 80072e6:	4553      	cmp	r3, sl
 80072e8:	db33      	blt.n	8007352 <__lshift+0xb6>
 80072ea:	6920      	ldr	r0, [r4, #16]
 80072ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072f0:	f104 0314 	add.w	r3, r4, #20
 80072f4:	f019 091f 	ands.w	r9, r9, #31
 80072f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007300:	d02b      	beq.n	800735a <__lshift+0xbe>
 8007302:	f1c9 0e20 	rsb	lr, r9, #32
 8007306:	468a      	mov	sl, r1
 8007308:	2200      	movs	r2, #0
 800730a:	6818      	ldr	r0, [r3, #0]
 800730c:	fa00 f009 	lsl.w	r0, r0, r9
 8007310:	4310      	orrs	r0, r2
 8007312:	f84a 0b04 	str.w	r0, [sl], #4
 8007316:	f853 2b04 	ldr.w	r2, [r3], #4
 800731a:	459c      	cmp	ip, r3
 800731c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007320:	d8f3      	bhi.n	800730a <__lshift+0x6e>
 8007322:	ebac 0304 	sub.w	r3, ip, r4
 8007326:	3b15      	subs	r3, #21
 8007328:	f023 0303 	bic.w	r3, r3, #3
 800732c:	3304      	adds	r3, #4
 800732e:	f104 0015 	add.w	r0, r4, #21
 8007332:	4584      	cmp	ip, r0
 8007334:	bf38      	it	cc
 8007336:	2304      	movcc	r3, #4
 8007338:	50ca      	str	r2, [r1, r3]
 800733a:	b10a      	cbz	r2, 8007340 <__lshift+0xa4>
 800733c:	f108 0602 	add.w	r6, r8, #2
 8007340:	3e01      	subs	r6, #1
 8007342:	4638      	mov	r0, r7
 8007344:	612e      	str	r6, [r5, #16]
 8007346:	4621      	mov	r1, r4
 8007348:	f7ff fdda 	bl	8006f00 <_Bfree>
 800734c:	4628      	mov	r0, r5
 800734e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007352:	f842 0f04 	str.w	r0, [r2, #4]!
 8007356:	3301      	adds	r3, #1
 8007358:	e7c5      	b.n	80072e6 <__lshift+0x4a>
 800735a:	3904      	subs	r1, #4
 800735c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007360:	f841 2f04 	str.w	r2, [r1, #4]!
 8007364:	459c      	cmp	ip, r3
 8007366:	d8f9      	bhi.n	800735c <__lshift+0xc0>
 8007368:	e7ea      	b.n	8007340 <__lshift+0xa4>
 800736a:	bf00      	nop
 800736c:	08007e28 	.word	0x08007e28
 8007370:	08007e39 	.word	0x08007e39

08007374 <__mcmp>:
 8007374:	690a      	ldr	r2, [r1, #16]
 8007376:	4603      	mov	r3, r0
 8007378:	6900      	ldr	r0, [r0, #16]
 800737a:	1a80      	subs	r0, r0, r2
 800737c:	b530      	push	{r4, r5, lr}
 800737e:	d10e      	bne.n	800739e <__mcmp+0x2a>
 8007380:	3314      	adds	r3, #20
 8007382:	3114      	adds	r1, #20
 8007384:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007388:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800738c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007390:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007394:	4295      	cmp	r5, r2
 8007396:	d003      	beq.n	80073a0 <__mcmp+0x2c>
 8007398:	d205      	bcs.n	80073a6 <__mcmp+0x32>
 800739a:	f04f 30ff 	mov.w	r0, #4294967295
 800739e:	bd30      	pop	{r4, r5, pc}
 80073a0:	42a3      	cmp	r3, r4
 80073a2:	d3f3      	bcc.n	800738c <__mcmp+0x18>
 80073a4:	e7fb      	b.n	800739e <__mcmp+0x2a>
 80073a6:	2001      	movs	r0, #1
 80073a8:	e7f9      	b.n	800739e <__mcmp+0x2a>
	...

080073ac <__mdiff>:
 80073ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	4689      	mov	r9, r1
 80073b2:	4606      	mov	r6, r0
 80073b4:	4611      	mov	r1, r2
 80073b6:	4648      	mov	r0, r9
 80073b8:	4614      	mov	r4, r2
 80073ba:	f7ff ffdb 	bl	8007374 <__mcmp>
 80073be:	1e05      	subs	r5, r0, #0
 80073c0:	d112      	bne.n	80073e8 <__mdiff+0x3c>
 80073c2:	4629      	mov	r1, r5
 80073c4:	4630      	mov	r0, r6
 80073c6:	f7ff fd5b 	bl	8006e80 <_Balloc>
 80073ca:	4602      	mov	r2, r0
 80073cc:	b928      	cbnz	r0, 80073da <__mdiff+0x2e>
 80073ce:	4b3f      	ldr	r3, [pc, #252]	@ (80074cc <__mdiff+0x120>)
 80073d0:	f240 2137 	movw	r1, #567	@ 0x237
 80073d4:	483e      	ldr	r0, [pc, #248]	@ (80074d0 <__mdiff+0x124>)
 80073d6:	f000 fa23 	bl	8007820 <__assert_func>
 80073da:	2301      	movs	r3, #1
 80073dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073e0:	4610      	mov	r0, r2
 80073e2:	b003      	add	sp, #12
 80073e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e8:	bfbc      	itt	lt
 80073ea:	464b      	movlt	r3, r9
 80073ec:	46a1      	movlt	r9, r4
 80073ee:	4630      	mov	r0, r6
 80073f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80073f4:	bfba      	itte	lt
 80073f6:	461c      	movlt	r4, r3
 80073f8:	2501      	movlt	r5, #1
 80073fa:	2500      	movge	r5, #0
 80073fc:	f7ff fd40 	bl	8006e80 <_Balloc>
 8007400:	4602      	mov	r2, r0
 8007402:	b918      	cbnz	r0, 800740c <__mdiff+0x60>
 8007404:	4b31      	ldr	r3, [pc, #196]	@ (80074cc <__mdiff+0x120>)
 8007406:	f240 2145 	movw	r1, #581	@ 0x245
 800740a:	e7e3      	b.n	80073d4 <__mdiff+0x28>
 800740c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007410:	6926      	ldr	r6, [r4, #16]
 8007412:	60c5      	str	r5, [r0, #12]
 8007414:	f109 0310 	add.w	r3, r9, #16
 8007418:	f109 0514 	add.w	r5, r9, #20
 800741c:	f104 0e14 	add.w	lr, r4, #20
 8007420:	f100 0b14 	add.w	fp, r0, #20
 8007424:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007428:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	46d9      	mov	r9, fp
 8007430:	f04f 0c00 	mov.w	ip, #0
 8007434:	9b01      	ldr	r3, [sp, #4]
 8007436:	f85e 0b04 	ldr.w	r0, [lr], #4
 800743a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	fa1f f38a 	uxth.w	r3, sl
 8007444:	4619      	mov	r1, r3
 8007446:	b283      	uxth	r3, r0
 8007448:	1acb      	subs	r3, r1, r3
 800744a:	0c00      	lsrs	r0, r0, #16
 800744c:	4463      	add	r3, ip
 800744e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007452:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007456:	b29b      	uxth	r3, r3
 8007458:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800745c:	4576      	cmp	r6, lr
 800745e:	f849 3b04 	str.w	r3, [r9], #4
 8007462:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007466:	d8e5      	bhi.n	8007434 <__mdiff+0x88>
 8007468:	1b33      	subs	r3, r6, r4
 800746a:	3b15      	subs	r3, #21
 800746c:	f023 0303 	bic.w	r3, r3, #3
 8007470:	3415      	adds	r4, #21
 8007472:	3304      	adds	r3, #4
 8007474:	42a6      	cmp	r6, r4
 8007476:	bf38      	it	cc
 8007478:	2304      	movcc	r3, #4
 800747a:	441d      	add	r5, r3
 800747c:	445b      	add	r3, fp
 800747e:	461e      	mov	r6, r3
 8007480:	462c      	mov	r4, r5
 8007482:	4544      	cmp	r4, r8
 8007484:	d30e      	bcc.n	80074a4 <__mdiff+0xf8>
 8007486:	f108 0103 	add.w	r1, r8, #3
 800748a:	1b49      	subs	r1, r1, r5
 800748c:	f021 0103 	bic.w	r1, r1, #3
 8007490:	3d03      	subs	r5, #3
 8007492:	45a8      	cmp	r8, r5
 8007494:	bf38      	it	cc
 8007496:	2100      	movcc	r1, #0
 8007498:	440b      	add	r3, r1
 800749a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800749e:	b191      	cbz	r1, 80074c6 <__mdiff+0x11a>
 80074a0:	6117      	str	r7, [r2, #16]
 80074a2:	e79d      	b.n	80073e0 <__mdiff+0x34>
 80074a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80074a8:	46e6      	mov	lr, ip
 80074aa:	0c08      	lsrs	r0, r1, #16
 80074ac:	fa1c fc81 	uxtah	ip, ip, r1
 80074b0:	4471      	add	r1, lr
 80074b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80074b6:	b289      	uxth	r1, r1
 80074b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80074bc:	f846 1b04 	str.w	r1, [r6], #4
 80074c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074c4:	e7dd      	b.n	8007482 <__mdiff+0xd6>
 80074c6:	3f01      	subs	r7, #1
 80074c8:	e7e7      	b.n	800749a <__mdiff+0xee>
 80074ca:	bf00      	nop
 80074cc:	08007e28 	.word	0x08007e28
 80074d0:	08007e39 	.word	0x08007e39

080074d4 <__d2b>:
 80074d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074d8:	460f      	mov	r7, r1
 80074da:	2101      	movs	r1, #1
 80074dc:	ec59 8b10 	vmov	r8, r9, d0
 80074e0:	4616      	mov	r6, r2
 80074e2:	f7ff fccd 	bl	8006e80 <_Balloc>
 80074e6:	4604      	mov	r4, r0
 80074e8:	b930      	cbnz	r0, 80074f8 <__d2b+0x24>
 80074ea:	4602      	mov	r2, r0
 80074ec:	4b23      	ldr	r3, [pc, #140]	@ (800757c <__d2b+0xa8>)
 80074ee:	4824      	ldr	r0, [pc, #144]	@ (8007580 <__d2b+0xac>)
 80074f0:	f240 310f 	movw	r1, #783	@ 0x30f
 80074f4:	f000 f994 	bl	8007820 <__assert_func>
 80074f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80074fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007500:	b10d      	cbz	r5, 8007506 <__d2b+0x32>
 8007502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	f1b8 0300 	subs.w	r3, r8, #0
 800750c:	d023      	beq.n	8007556 <__d2b+0x82>
 800750e:	4668      	mov	r0, sp
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	f7ff fd7c 	bl	800700e <__lo0bits>
 8007516:	e9dd 1200 	ldrd	r1, r2, [sp]
 800751a:	b1d0      	cbz	r0, 8007552 <__d2b+0x7e>
 800751c:	f1c0 0320 	rsb	r3, r0, #32
 8007520:	fa02 f303 	lsl.w	r3, r2, r3
 8007524:	430b      	orrs	r3, r1
 8007526:	40c2      	lsrs	r2, r0
 8007528:	6163      	str	r3, [r4, #20]
 800752a:	9201      	str	r2, [sp, #4]
 800752c:	9b01      	ldr	r3, [sp, #4]
 800752e:	61a3      	str	r3, [r4, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	bf0c      	ite	eq
 8007534:	2201      	moveq	r2, #1
 8007536:	2202      	movne	r2, #2
 8007538:	6122      	str	r2, [r4, #16]
 800753a:	b1a5      	cbz	r5, 8007566 <__d2b+0x92>
 800753c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007540:	4405      	add	r5, r0
 8007542:	603d      	str	r5, [r7, #0]
 8007544:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007548:	6030      	str	r0, [r6, #0]
 800754a:	4620      	mov	r0, r4
 800754c:	b003      	add	sp, #12
 800754e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007552:	6161      	str	r1, [r4, #20]
 8007554:	e7ea      	b.n	800752c <__d2b+0x58>
 8007556:	a801      	add	r0, sp, #4
 8007558:	f7ff fd59 	bl	800700e <__lo0bits>
 800755c:	9b01      	ldr	r3, [sp, #4]
 800755e:	6163      	str	r3, [r4, #20]
 8007560:	3020      	adds	r0, #32
 8007562:	2201      	movs	r2, #1
 8007564:	e7e8      	b.n	8007538 <__d2b+0x64>
 8007566:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800756a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800756e:	6038      	str	r0, [r7, #0]
 8007570:	6918      	ldr	r0, [r3, #16]
 8007572:	f7ff fd2d 	bl	8006fd0 <__hi0bits>
 8007576:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800757a:	e7e5      	b.n	8007548 <__d2b+0x74>
 800757c:	08007e28 	.word	0x08007e28
 8007580:	08007e39 	.word	0x08007e39

08007584 <__sflush_r>:
 8007584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758c:	0716      	lsls	r6, r2, #28
 800758e:	4605      	mov	r5, r0
 8007590:	460c      	mov	r4, r1
 8007592:	d454      	bmi.n	800763e <__sflush_r+0xba>
 8007594:	684b      	ldr	r3, [r1, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	dc02      	bgt.n	80075a0 <__sflush_r+0x1c>
 800759a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800759c:	2b00      	cmp	r3, #0
 800759e:	dd48      	ble.n	8007632 <__sflush_r+0xae>
 80075a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075a2:	2e00      	cmp	r6, #0
 80075a4:	d045      	beq.n	8007632 <__sflush_r+0xae>
 80075a6:	2300      	movs	r3, #0
 80075a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80075ac:	682f      	ldr	r7, [r5, #0]
 80075ae:	6a21      	ldr	r1, [r4, #32]
 80075b0:	602b      	str	r3, [r5, #0]
 80075b2:	d030      	beq.n	8007616 <__sflush_r+0x92>
 80075b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	0759      	lsls	r1, r3, #29
 80075ba:	d505      	bpl.n	80075c8 <__sflush_r+0x44>
 80075bc:	6863      	ldr	r3, [r4, #4]
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075c2:	b10b      	cbz	r3, 80075c8 <__sflush_r+0x44>
 80075c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075c6:	1ad2      	subs	r2, r2, r3
 80075c8:	2300      	movs	r3, #0
 80075ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075cc:	6a21      	ldr	r1, [r4, #32]
 80075ce:	4628      	mov	r0, r5
 80075d0:	47b0      	blx	r6
 80075d2:	1c43      	adds	r3, r0, #1
 80075d4:	89a3      	ldrh	r3, [r4, #12]
 80075d6:	d106      	bne.n	80075e6 <__sflush_r+0x62>
 80075d8:	6829      	ldr	r1, [r5, #0]
 80075da:	291d      	cmp	r1, #29
 80075dc:	d82b      	bhi.n	8007636 <__sflush_r+0xb2>
 80075de:	4a2a      	ldr	r2, [pc, #168]	@ (8007688 <__sflush_r+0x104>)
 80075e0:	410a      	asrs	r2, r1
 80075e2:	07d6      	lsls	r6, r2, #31
 80075e4:	d427      	bmi.n	8007636 <__sflush_r+0xb2>
 80075e6:	2200      	movs	r2, #0
 80075e8:	6062      	str	r2, [r4, #4]
 80075ea:	04d9      	lsls	r1, r3, #19
 80075ec:	6922      	ldr	r2, [r4, #16]
 80075ee:	6022      	str	r2, [r4, #0]
 80075f0:	d504      	bpl.n	80075fc <__sflush_r+0x78>
 80075f2:	1c42      	adds	r2, r0, #1
 80075f4:	d101      	bne.n	80075fa <__sflush_r+0x76>
 80075f6:	682b      	ldr	r3, [r5, #0]
 80075f8:	b903      	cbnz	r3, 80075fc <__sflush_r+0x78>
 80075fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80075fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075fe:	602f      	str	r7, [r5, #0]
 8007600:	b1b9      	cbz	r1, 8007632 <__sflush_r+0xae>
 8007602:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007606:	4299      	cmp	r1, r3
 8007608:	d002      	beq.n	8007610 <__sflush_r+0x8c>
 800760a:	4628      	mov	r0, r5
 800760c:	f7ff fb38 	bl	8006c80 <_free_r>
 8007610:	2300      	movs	r3, #0
 8007612:	6363      	str	r3, [r4, #52]	@ 0x34
 8007614:	e00d      	b.n	8007632 <__sflush_r+0xae>
 8007616:	2301      	movs	r3, #1
 8007618:	4628      	mov	r0, r5
 800761a:	47b0      	blx	r6
 800761c:	4602      	mov	r2, r0
 800761e:	1c50      	adds	r0, r2, #1
 8007620:	d1c9      	bne.n	80075b6 <__sflush_r+0x32>
 8007622:	682b      	ldr	r3, [r5, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0c6      	beq.n	80075b6 <__sflush_r+0x32>
 8007628:	2b1d      	cmp	r3, #29
 800762a:	d001      	beq.n	8007630 <__sflush_r+0xac>
 800762c:	2b16      	cmp	r3, #22
 800762e:	d11e      	bne.n	800766e <__sflush_r+0xea>
 8007630:	602f      	str	r7, [r5, #0]
 8007632:	2000      	movs	r0, #0
 8007634:	e022      	b.n	800767c <__sflush_r+0xf8>
 8007636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800763a:	b21b      	sxth	r3, r3
 800763c:	e01b      	b.n	8007676 <__sflush_r+0xf2>
 800763e:	690f      	ldr	r7, [r1, #16]
 8007640:	2f00      	cmp	r7, #0
 8007642:	d0f6      	beq.n	8007632 <__sflush_r+0xae>
 8007644:	0793      	lsls	r3, r2, #30
 8007646:	680e      	ldr	r6, [r1, #0]
 8007648:	bf08      	it	eq
 800764a:	694b      	ldreq	r3, [r1, #20]
 800764c:	600f      	str	r7, [r1, #0]
 800764e:	bf18      	it	ne
 8007650:	2300      	movne	r3, #0
 8007652:	eba6 0807 	sub.w	r8, r6, r7
 8007656:	608b      	str	r3, [r1, #8]
 8007658:	f1b8 0f00 	cmp.w	r8, #0
 800765c:	dde9      	ble.n	8007632 <__sflush_r+0xae>
 800765e:	6a21      	ldr	r1, [r4, #32]
 8007660:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007662:	4643      	mov	r3, r8
 8007664:	463a      	mov	r2, r7
 8007666:	4628      	mov	r0, r5
 8007668:	47b0      	blx	r6
 800766a:	2800      	cmp	r0, #0
 800766c:	dc08      	bgt.n	8007680 <__sflush_r+0xfc>
 800766e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007676:	81a3      	strh	r3, [r4, #12]
 8007678:	f04f 30ff 	mov.w	r0, #4294967295
 800767c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007680:	4407      	add	r7, r0
 8007682:	eba8 0800 	sub.w	r8, r8, r0
 8007686:	e7e7      	b.n	8007658 <__sflush_r+0xd4>
 8007688:	dfbffffe 	.word	0xdfbffffe

0800768c <_fflush_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	690b      	ldr	r3, [r1, #16]
 8007690:	4605      	mov	r5, r0
 8007692:	460c      	mov	r4, r1
 8007694:	b913      	cbnz	r3, 800769c <_fflush_r+0x10>
 8007696:	2500      	movs	r5, #0
 8007698:	4628      	mov	r0, r5
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	b118      	cbz	r0, 80076a6 <_fflush_r+0x1a>
 800769e:	6a03      	ldr	r3, [r0, #32]
 80076a0:	b90b      	cbnz	r3, 80076a6 <_fflush_r+0x1a>
 80076a2:	f7fe fae9 	bl	8005c78 <__sinit>
 80076a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0f3      	beq.n	8007696 <_fflush_r+0xa>
 80076ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80076b0:	07d0      	lsls	r0, r2, #31
 80076b2:	d404      	bmi.n	80076be <_fflush_r+0x32>
 80076b4:	0599      	lsls	r1, r3, #22
 80076b6:	d402      	bmi.n	80076be <_fflush_r+0x32>
 80076b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076ba:	f7fe fc90 	bl	8005fde <__retarget_lock_acquire_recursive>
 80076be:	4628      	mov	r0, r5
 80076c0:	4621      	mov	r1, r4
 80076c2:	f7ff ff5f 	bl	8007584 <__sflush_r>
 80076c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076c8:	07da      	lsls	r2, r3, #31
 80076ca:	4605      	mov	r5, r0
 80076cc:	d4e4      	bmi.n	8007698 <_fflush_r+0xc>
 80076ce:	89a3      	ldrh	r3, [r4, #12]
 80076d0:	059b      	lsls	r3, r3, #22
 80076d2:	d4e1      	bmi.n	8007698 <_fflush_r+0xc>
 80076d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076d6:	f7fe fc83 	bl	8005fe0 <__retarget_lock_release_recursive>
 80076da:	e7dd      	b.n	8007698 <_fflush_r+0xc>

080076dc <__swhatbuf_r>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	460c      	mov	r4, r1
 80076e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e4:	2900      	cmp	r1, #0
 80076e6:	b096      	sub	sp, #88	@ 0x58
 80076e8:	4615      	mov	r5, r2
 80076ea:	461e      	mov	r6, r3
 80076ec:	da0d      	bge.n	800770a <__swhatbuf_r+0x2e>
 80076ee:	89a3      	ldrh	r3, [r4, #12]
 80076f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80076f4:	f04f 0100 	mov.w	r1, #0
 80076f8:	bf14      	ite	ne
 80076fa:	2340      	movne	r3, #64	@ 0x40
 80076fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007700:	2000      	movs	r0, #0
 8007702:	6031      	str	r1, [r6, #0]
 8007704:	602b      	str	r3, [r5, #0]
 8007706:	b016      	add	sp, #88	@ 0x58
 8007708:	bd70      	pop	{r4, r5, r6, pc}
 800770a:	466a      	mov	r2, sp
 800770c:	f000 f848 	bl	80077a0 <_fstat_r>
 8007710:	2800      	cmp	r0, #0
 8007712:	dbec      	blt.n	80076ee <__swhatbuf_r+0x12>
 8007714:	9901      	ldr	r1, [sp, #4]
 8007716:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800771a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800771e:	4259      	negs	r1, r3
 8007720:	4159      	adcs	r1, r3
 8007722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007726:	e7eb      	b.n	8007700 <__swhatbuf_r+0x24>

08007728 <__smakebuf_r>:
 8007728:	898b      	ldrh	r3, [r1, #12]
 800772a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800772c:	079d      	lsls	r5, r3, #30
 800772e:	4606      	mov	r6, r0
 8007730:	460c      	mov	r4, r1
 8007732:	d507      	bpl.n	8007744 <__smakebuf_r+0x1c>
 8007734:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	6123      	str	r3, [r4, #16]
 800773c:	2301      	movs	r3, #1
 800773e:	6163      	str	r3, [r4, #20]
 8007740:	b003      	add	sp, #12
 8007742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007744:	ab01      	add	r3, sp, #4
 8007746:	466a      	mov	r2, sp
 8007748:	f7ff ffc8 	bl	80076dc <__swhatbuf_r>
 800774c:	9f00      	ldr	r7, [sp, #0]
 800774e:	4605      	mov	r5, r0
 8007750:	4639      	mov	r1, r7
 8007752:	4630      	mov	r0, r6
 8007754:	f7ff fb08 	bl	8006d68 <_malloc_r>
 8007758:	b948      	cbnz	r0, 800776e <__smakebuf_r+0x46>
 800775a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800775e:	059a      	lsls	r2, r3, #22
 8007760:	d4ee      	bmi.n	8007740 <__smakebuf_r+0x18>
 8007762:	f023 0303 	bic.w	r3, r3, #3
 8007766:	f043 0302 	orr.w	r3, r3, #2
 800776a:	81a3      	strh	r3, [r4, #12]
 800776c:	e7e2      	b.n	8007734 <__smakebuf_r+0xc>
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	6020      	str	r0, [r4, #0]
 8007772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007776:	81a3      	strh	r3, [r4, #12]
 8007778:	9b01      	ldr	r3, [sp, #4]
 800777a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800777e:	b15b      	cbz	r3, 8007798 <__smakebuf_r+0x70>
 8007780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007784:	4630      	mov	r0, r6
 8007786:	f000 f81d 	bl	80077c4 <_isatty_r>
 800778a:	b128      	cbz	r0, 8007798 <__smakebuf_r+0x70>
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	f023 0303 	bic.w	r3, r3, #3
 8007792:	f043 0301 	orr.w	r3, r3, #1
 8007796:	81a3      	strh	r3, [r4, #12]
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	431d      	orrs	r5, r3
 800779c:	81a5      	strh	r5, [r4, #12]
 800779e:	e7cf      	b.n	8007740 <__smakebuf_r+0x18>

080077a0 <_fstat_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4d07      	ldr	r5, [pc, #28]	@ (80077c0 <_fstat_r+0x20>)
 80077a4:	2300      	movs	r3, #0
 80077a6:	4604      	mov	r4, r0
 80077a8:	4608      	mov	r0, r1
 80077aa:	4611      	mov	r1, r2
 80077ac:	602b      	str	r3, [r5, #0]
 80077ae:	f7f9 ff43 	bl	8001638 <_fstat>
 80077b2:	1c43      	adds	r3, r0, #1
 80077b4:	d102      	bne.n	80077bc <_fstat_r+0x1c>
 80077b6:	682b      	ldr	r3, [r5, #0]
 80077b8:	b103      	cbz	r3, 80077bc <_fstat_r+0x1c>
 80077ba:	6023      	str	r3, [r4, #0]
 80077bc:	bd38      	pop	{r3, r4, r5, pc}
 80077be:	bf00      	nop
 80077c0:	200004f8 	.word	0x200004f8

080077c4 <_isatty_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4d06      	ldr	r5, [pc, #24]	@ (80077e0 <_isatty_r+0x1c>)
 80077c8:	2300      	movs	r3, #0
 80077ca:	4604      	mov	r4, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	602b      	str	r3, [r5, #0]
 80077d0:	f7f9 ff42 	bl	8001658 <_isatty>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d102      	bne.n	80077de <_isatty_r+0x1a>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	b103      	cbz	r3, 80077de <_isatty_r+0x1a>
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	200004f8 	.word	0x200004f8

080077e4 <_sbrk_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4d06      	ldr	r5, [pc, #24]	@ (8007800 <_sbrk_r+0x1c>)
 80077e8:	2300      	movs	r3, #0
 80077ea:	4604      	mov	r4, r0
 80077ec:	4608      	mov	r0, r1
 80077ee:	602b      	str	r3, [r5, #0]
 80077f0:	f7f9 ff4a 	bl	8001688 <_sbrk>
 80077f4:	1c43      	adds	r3, r0, #1
 80077f6:	d102      	bne.n	80077fe <_sbrk_r+0x1a>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	b103      	cbz	r3, 80077fe <_sbrk_r+0x1a>
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	bd38      	pop	{r3, r4, r5, pc}
 8007800:	200004f8 	.word	0x200004f8

08007804 <memcpy>:
 8007804:	440a      	add	r2, r1
 8007806:	4291      	cmp	r1, r2
 8007808:	f100 33ff 	add.w	r3, r0, #4294967295
 800780c:	d100      	bne.n	8007810 <memcpy+0xc>
 800780e:	4770      	bx	lr
 8007810:	b510      	push	{r4, lr}
 8007812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800781a:	4291      	cmp	r1, r2
 800781c:	d1f9      	bne.n	8007812 <memcpy+0xe>
 800781e:	bd10      	pop	{r4, pc}

08007820 <__assert_func>:
 8007820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007822:	4614      	mov	r4, r2
 8007824:	461a      	mov	r2, r3
 8007826:	4b09      	ldr	r3, [pc, #36]	@ (800784c <__assert_func+0x2c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4605      	mov	r5, r0
 800782c:	68d8      	ldr	r0, [r3, #12]
 800782e:	b954      	cbnz	r4, 8007846 <__assert_func+0x26>
 8007830:	4b07      	ldr	r3, [pc, #28]	@ (8007850 <__assert_func+0x30>)
 8007832:	461c      	mov	r4, r3
 8007834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007838:	9100      	str	r1, [sp, #0]
 800783a:	462b      	mov	r3, r5
 800783c:	4905      	ldr	r1, [pc, #20]	@ (8007854 <__assert_func+0x34>)
 800783e:	f000 f841 	bl	80078c4 <fiprintf>
 8007842:	f000 f851 	bl	80078e8 <abort>
 8007846:	4b04      	ldr	r3, [pc, #16]	@ (8007858 <__assert_func+0x38>)
 8007848:	e7f4      	b.n	8007834 <__assert_func+0x14>
 800784a:	bf00      	nop
 800784c:	20000038 	.word	0x20000038
 8007850:	08007fd5 	.word	0x08007fd5
 8007854:	08007fa7 	.word	0x08007fa7
 8007858:	08007f9a 	.word	0x08007f9a

0800785c <_calloc_r>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	fba1 5402 	umull	r5, r4, r1, r2
 8007862:	b93c      	cbnz	r4, 8007874 <_calloc_r+0x18>
 8007864:	4629      	mov	r1, r5
 8007866:	f7ff fa7f 	bl	8006d68 <_malloc_r>
 800786a:	4606      	mov	r6, r0
 800786c:	b928      	cbnz	r0, 800787a <_calloc_r+0x1e>
 800786e:	2600      	movs	r6, #0
 8007870:	4630      	mov	r0, r6
 8007872:	bd70      	pop	{r4, r5, r6, pc}
 8007874:	220c      	movs	r2, #12
 8007876:	6002      	str	r2, [r0, #0]
 8007878:	e7f9      	b.n	800786e <_calloc_r+0x12>
 800787a:	462a      	mov	r2, r5
 800787c:	4621      	mov	r1, r4
 800787e:	f7fe fb30 	bl	8005ee2 <memset>
 8007882:	e7f5      	b.n	8007870 <_calloc_r+0x14>

08007884 <__ascii_mbtowc>:
 8007884:	b082      	sub	sp, #8
 8007886:	b901      	cbnz	r1, 800788a <__ascii_mbtowc+0x6>
 8007888:	a901      	add	r1, sp, #4
 800788a:	b142      	cbz	r2, 800789e <__ascii_mbtowc+0x1a>
 800788c:	b14b      	cbz	r3, 80078a2 <__ascii_mbtowc+0x1e>
 800788e:	7813      	ldrb	r3, [r2, #0]
 8007890:	600b      	str	r3, [r1, #0]
 8007892:	7812      	ldrb	r2, [r2, #0]
 8007894:	1e10      	subs	r0, r2, #0
 8007896:	bf18      	it	ne
 8007898:	2001      	movne	r0, #1
 800789a:	b002      	add	sp, #8
 800789c:	4770      	bx	lr
 800789e:	4610      	mov	r0, r2
 80078a0:	e7fb      	b.n	800789a <__ascii_mbtowc+0x16>
 80078a2:	f06f 0001 	mvn.w	r0, #1
 80078a6:	e7f8      	b.n	800789a <__ascii_mbtowc+0x16>

080078a8 <__ascii_wctomb>:
 80078a8:	4603      	mov	r3, r0
 80078aa:	4608      	mov	r0, r1
 80078ac:	b141      	cbz	r1, 80078c0 <__ascii_wctomb+0x18>
 80078ae:	2aff      	cmp	r2, #255	@ 0xff
 80078b0:	d904      	bls.n	80078bc <__ascii_wctomb+0x14>
 80078b2:	228a      	movs	r2, #138	@ 0x8a
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ba:	4770      	bx	lr
 80078bc:	700a      	strb	r2, [r1, #0]
 80078be:	2001      	movs	r0, #1
 80078c0:	4770      	bx	lr
	...

080078c4 <fiprintf>:
 80078c4:	b40e      	push	{r1, r2, r3}
 80078c6:	b503      	push	{r0, r1, lr}
 80078c8:	4601      	mov	r1, r0
 80078ca:	ab03      	add	r3, sp, #12
 80078cc:	4805      	ldr	r0, [pc, #20]	@ (80078e4 <fiprintf+0x20>)
 80078ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80078d2:	6800      	ldr	r0, [r0, #0]
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	f000 f837 	bl	8007948 <_vfiprintf_r>
 80078da:	b002      	add	sp, #8
 80078dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80078e0:	b003      	add	sp, #12
 80078e2:	4770      	bx	lr
 80078e4:	20000038 	.word	0x20000038

080078e8 <abort>:
 80078e8:	b508      	push	{r3, lr}
 80078ea:	2006      	movs	r0, #6
 80078ec:	f000 fa00 	bl	8007cf0 <raise>
 80078f0:	2001      	movs	r0, #1
 80078f2:	f7f9 fe6d 	bl	80015d0 <_exit>

080078f6 <__sfputc_r>:
 80078f6:	6893      	ldr	r3, [r2, #8]
 80078f8:	3b01      	subs	r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	b410      	push	{r4}
 80078fe:	6093      	str	r3, [r2, #8]
 8007900:	da08      	bge.n	8007914 <__sfputc_r+0x1e>
 8007902:	6994      	ldr	r4, [r2, #24]
 8007904:	42a3      	cmp	r3, r4
 8007906:	db01      	blt.n	800790c <__sfputc_r+0x16>
 8007908:	290a      	cmp	r1, #10
 800790a:	d103      	bne.n	8007914 <__sfputc_r+0x1e>
 800790c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007910:	f000 b932 	b.w	8007b78 <__swbuf_r>
 8007914:	6813      	ldr	r3, [r2, #0]
 8007916:	1c58      	adds	r0, r3, #1
 8007918:	6010      	str	r0, [r2, #0]
 800791a:	7019      	strb	r1, [r3, #0]
 800791c:	4608      	mov	r0, r1
 800791e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007922:	4770      	bx	lr

08007924 <__sfputs_r>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	4606      	mov	r6, r0
 8007928:	460f      	mov	r7, r1
 800792a:	4614      	mov	r4, r2
 800792c:	18d5      	adds	r5, r2, r3
 800792e:	42ac      	cmp	r4, r5
 8007930:	d101      	bne.n	8007936 <__sfputs_r+0x12>
 8007932:	2000      	movs	r0, #0
 8007934:	e007      	b.n	8007946 <__sfputs_r+0x22>
 8007936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800793a:	463a      	mov	r2, r7
 800793c:	4630      	mov	r0, r6
 800793e:	f7ff ffda 	bl	80078f6 <__sfputc_r>
 8007942:	1c43      	adds	r3, r0, #1
 8007944:	d1f3      	bne.n	800792e <__sfputs_r+0xa>
 8007946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007948 <_vfiprintf_r>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	460d      	mov	r5, r1
 800794e:	b09d      	sub	sp, #116	@ 0x74
 8007950:	4614      	mov	r4, r2
 8007952:	4698      	mov	r8, r3
 8007954:	4606      	mov	r6, r0
 8007956:	b118      	cbz	r0, 8007960 <_vfiprintf_r+0x18>
 8007958:	6a03      	ldr	r3, [r0, #32]
 800795a:	b90b      	cbnz	r3, 8007960 <_vfiprintf_r+0x18>
 800795c:	f7fe f98c 	bl	8005c78 <__sinit>
 8007960:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007962:	07d9      	lsls	r1, r3, #31
 8007964:	d405      	bmi.n	8007972 <_vfiprintf_r+0x2a>
 8007966:	89ab      	ldrh	r3, [r5, #12]
 8007968:	059a      	lsls	r2, r3, #22
 800796a:	d402      	bmi.n	8007972 <_vfiprintf_r+0x2a>
 800796c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800796e:	f7fe fb36 	bl	8005fde <__retarget_lock_acquire_recursive>
 8007972:	89ab      	ldrh	r3, [r5, #12]
 8007974:	071b      	lsls	r3, r3, #28
 8007976:	d501      	bpl.n	800797c <_vfiprintf_r+0x34>
 8007978:	692b      	ldr	r3, [r5, #16]
 800797a:	b99b      	cbnz	r3, 80079a4 <_vfiprintf_r+0x5c>
 800797c:	4629      	mov	r1, r5
 800797e:	4630      	mov	r0, r6
 8007980:	f000 f938 	bl	8007bf4 <__swsetup_r>
 8007984:	b170      	cbz	r0, 80079a4 <_vfiprintf_r+0x5c>
 8007986:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007988:	07dc      	lsls	r4, r3, #31
 800798a:	d504      	bpl.n	8007996 <_vfiprintf_r+0x4e>
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	b01d      	add	sp, #116	@ 0x74
 8007992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007996:	89ab      	ldrh	r3, [r5, #12]
 8007998:	0598      	lsls	r0, r3, #22
 800799a:	d4f7      	bmi.n	800798c <_vfiprintf_r+0x44>
 800799c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800799e:	f7fe fb1f 	bl	8005fe0 <__retarget_lock_release_recursive>
 80079a2:	e7f3      	b.n	800798c <_vfiprintf_r+0x44>
 80079a4:	2300      	movs	r3, #0
 80079a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80079a8:	2320      	movs	r3, #32
 80079aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80079b2:	2330      	movs	r3, #48	@ 0x30
 80079b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007b64 <_vfiprintf_r+0x21c>
 80079b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079bc:	f04f 0901 	mov.w	r9, #1
 80079c0:	4623      	mov	r3, r4
 80079c2:	469a      	mov	sl, r3
 80079c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079c8:	b10a      	cbz	r2, 80079ce <_vfiprintf_r+0x86>
 80079ca:	2a25      	cmp	r2, #37	@ 0x25
 80079cc:	d1f9      	bne.n	80079c2 <_vfiprintf_r+0x7a>
 80079ce:	ebba 0b04 	subs.w	fp, sl, r4
 80079d2:	d00b      	beq.n	80079ec <_vfiprintf_r+0xa4>
 80079d4:	465b      	mov	r3, fp
 80079d6:	4622      	mov	r2, r4
 80079d8:	4629      	mov	r1, r5
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff ffa2 	bl	8007924 <__sfputs_r>
 80079e0:	3001      	adds	r0, #1
 80079e2:	f000 80a7 	beq.w	8007b34 <_vfiprintf_r+0x1ec>
 80079e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079e8:	445a      	add	r2, fp
 80079ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80079ec:	f89a 3000 	ldrb.w	r3, [sl]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 809f 	beq.w	8007b34 <_vfiprintf_r+0x1ec>
 80079f6:	2300      	movs	r3, #0
 80079f8:	f04f 32ff 	mov.w	r2, #4294967295
 80079fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a00:	f10a 0a01 	add.w	sl, sl, #1
 8007a04:	9304      	str	r3, [sp, #16]
 8007a06:	9307      	str	r3, [sp, #28]
 8007a08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a0e:	4654      	mov	r4, sl
 8007a10:	2205      	movs	r2, #5
 8007a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a16:	4853      	ldr	r0, [pc, #332]	@ (8007b64 <_vfiprintf_r+0x21c>)
 8007a18:	f7f8 fbda 	bl	80001d0 <memchr>
 8007a1c:	9a04      	ldr	r2, [sp, #16]
 8007a1e:	b9d8      	cbnz	r0, 8007a58 <_vfiprintf_r+0x110>
 8007a20:	06d1      	lsls	r1, r2, #27
 8007a22:	bf44      	itt	mi
 8007a24:	2320      	movmi	r3, #32
 8007a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a2a:	0713      	lsls	r3, r2, #28
 8007a2c:	bf44      	itt	mi
 8007a2e:	232b      	movmi	r3, #43	@ 0x2b
 8007a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a34:	f89a 3000 	ldrb.w	r3, [sl]
 8007a38:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a3a:	d015      	beq.n	8007a68 <_vfiprintf_r+0x120>
 8007a3c:	9a07      	ldr	r2, [sp, #28]
 8007a3e:	4654      	mov	r4, sl
 8007a40:	2000      	movs	r0, #0
 8007a42:	f04f 0c0a 	mov.w	ip, #10
 8007a46:	4621      	mov	r1, r4
 8007a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a4c:	3b30      	subs	r3, #48	@ 0x30
 8007a4e:	2b09      	cmp	r3, #9
 8007a50:	d94b      	bls.n	8007aea <_vfiprintf_r+0x1a2>
 8007a52:	b1b0      	cbz	r0, 8007a82 <_vfiprintf_r+0x13a>
 8007a54:	9207      	str	r2, [sp, #28]
 8007a56:	e014      	b.n	8007a82 <_vfiprintf_r+0x13a>
 8007a58:	eba0 0308 	sub.w	r3, r0, r8
 8007a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8007a60:	4313      	orrs	r3, r2
 8007a62:	9304      	str	r3, [sp, #16]
 8007a64:	46a2      	mov	sl, r4
 8007a66:	e7d2      	b.n	8007a0e <_vfiprintf_r+0xc6>
 8007a68:	9b03      	ldr	r3, [sp, #12]
 8007a6a:	1d19      	adds	r1, r3, #4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	9103      	str	r1, [sp, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bfbb      	ittet	lt
 8007a74:	425b      	neglt	r3, r3
 8007a76:	f042 0202 	orrlt.w	r2, r2, #2
 8007a7a:	9307      	strge	r3, [sp, #28]
 8007a7c:	9307      	strlt	r3, [sp, #28]
 8007a7e:	bfb8      	it	lt
 8007a80:	9204      	strlt	r2, [sp, #16]
 8007a82:	7823      	ldrb	r3, [r4, #0]
 8007a84:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a86:	d10a      	bne.n	8007a9e <_vfiprintf_r+0x156>
 8007a88:	7863      	ldrb	r3, [r4, #1]
 8007a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a8c:	d132      	bne.n	8007af4 <_vfiprintf_r+0x1ac>
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	1d1a      	adds	r2, r3, #4
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	9203      	str	r2, [sp, #12]
 8007a96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a9a:	3402      	adds	r4, #2
 8007a9c:	9305      	str	r3, [sp, #20]
 8007a9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007b74 <_vfiprintf_r+0x22c>
 8007aa2:	7821      	ldrb	r1, [r4, #0]
 8007aa4:	2203      	movs	r2, #3
 8007aa6:	4650      	mov	r0, sl
 8007aa8:	f7f8 fb92 	bl	80001d0 <memchr>
 8007aac:	b138      	cbz	r0, 8007abe <_vfiprintf_r+0x176>
 8007aae:	9b04      	ldr	r3, [sp, #16]
 8007ab0:	eba0 000a 	sub.w	r0, r0, sl
 8007ab4:	2240      	movs	r2, #64	@ 0x40
 8007ab6:	4082      	lsls	r2, r0
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	3401      	adds	r4, #1
 8007abc:	9304      	str	r3, [sp, #16]
 8007abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ac2:	4829      	ldr	r0, [pc, #164]	@ (8007b68 <_vfiprintf_r+0x220>)
 8007ac4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ac8:	2206      	movs	r2, #6
 8007aca:	f7f8 fb81 	bl	80001d0 <memchr>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d03f      	beq.n	8007b52 <_vfiprintf_r+0x20a>
 8007ad2:	4b26      	ldr	r3, [pc, #152]	@ (8007b6c <_vfiprintf_r+0x224>)
 8007ad4:	bb1b      	cbnz	r3, 8007b1e <_vfiprintf_r+0x1d6>
 8007ad6:	9b03      	ldr	r3, [sp, #12]
 8007ad8:	3307      	adds	r3, #7
 8007ada:	f023 0307 	bic.w	r3, r3, #7
 8007ade:	3308      	adds	r3, #8
 8007ae0:	9303      	str	r3, [sp, #12]
 8007ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ae4:	443b      	add	r3, r7
 8007ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ae8:	e76a      	b.n	80079c0 <_vfiprintf_r+0x78>
 8007aea:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aee:	460c      	mov	r4, r1
 8007af0:	2001      	movs	r0, #1
 8007af2:	e7a8      	b.n	8007a46 <_vfiprintf_r+0xfe>
 8007af4:	2300      	movs	r3, #0
 8007af6:	3401      	adds	r4, #1
 8007af8:	9305      	str	r3, [sp, #20]
 8007afa:	4619      	mov	r1, r3
 8007afc:	f04f 0c0a 	mov.w	ip, #10
 8007b00:	4620      	mov	r0, r4
 8007b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b06:	3a30      	subs	r2, #48	@ 0x30
 8007b08:	2a09      	cmp	r2, #9
 8007b0a:	d903      	bls.n	8007b14 <_vfiprintf_r+0x1cc>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d0c6      	beq.n	8007a9e <_vfiprintf_r+0x156>
 8007b10:	9105      	str	r1, [sp, #20]
 8007b12:	e7c4      	b.n	8007a9e <_vfiprintf_r+0x156>
 8007b14:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b18:	4604      	mov	r4, r0
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e7f0      	b.n	8007b00 <_vfiprintf_r+0x1b8>
 8007b1e:	ab03      	add	r3, sp, #12
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	462a      	mov	r2, r5
 8007b24:	4b12      	ldr	r3, [pc, #72]	@ (8007b70 <_vfiprintf_r+0x228>)
 8007b26:	a904      	add	r1, sp, #16
 8007b28:	4630      	mov	r0, r6
 8007b2a:	f7fd fc61 	bl	80053f0 <_printf_float>
 8007b2e:	4607      	mov	r7, r0
 8007b30:	1c78      	adds	r0, r7, #1
 8007b32:	d1d6      	bne.n	8007ae2 <_vfiprintf_r+0x19a>
 8007b34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b36:	07d9      	lsls	r1, r3, #31
 8007b38:	d405      	bmi.n	8007b46 <_vfiprintf_r+0x1fe>
 8007b3a:	89ab      	ldrh	r3, [r5, #12]
 8007b3c:	059a      	lsls	r2, r3, #22
 8007b3e:	d402      	bmi.n	8007b46 <_vfiprintf_r+0x1fe>
 8007b40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b42:	f7fe fa4d 	bl	8005fe0 <__retarget_lock_release_recursive>
 8007b46:	89ab      	ldrh	r3, [r5, #12]
 8007b48:	065b      	lsls	r3, r3, #25
 8007b4a:	f53f af1f 	bmi.w	800798c <_vfiprintf_r+0x44>
 8007b4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b50:	e71e      	b.n	8007990 <_vfiprintf_r+0x48>
 8007b52:	ab03      	add	r3, sp, #12
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	462a      	mov	r2, r5
 8007b58:	4b05      	ldr	r3, [pc, #20]	@ (8007b70 <_vfiprintf_r+0x228>)
 8007b5a:	a904      	add	r1, sp, #16
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f7fd fedf 	bl	8005920 <_printf_i>
 8007b62:	e7e4      	b.n	8007b2e <_vfiprintf_r+0x1e6>
 8007b64:	080080d7 	.word	0x080080d7
 8007b68:	080080e1 	.word	0x080080e1
 8007b6c:	080053f1 	.word	0x080053f1
 8007b70:	08007925 	.word	0x08007925
 8007b74:	080080dd 	.word	0x080080dd

08007b78 <__swbuf_r>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	460e      	mov	r6, r1
 8007b7c:	4614      	mov	r4, r2
 8007b7e:	4605      	mov	r5, r0
 8007b80:	b118      	cbz	r0, 8007b8a <__swbuf_r+0x12>
 8007b82:	6a03      	ldr	r3, [r0, #32]
 8007b84:	b90b      	cbnz	r3, 8007b8a <__swbuf_r+0x12>
 8007b86:	f7fe f877 	bl	8005c78 <__sinit>
 8007b8a:	69a3      	ldr	r3, [r4, #24]
 8007b8c:	60a3      	str	r3, [r4, #8]
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	071a      	lsls	r2, r3, #28
 8007b92:	d501      	bpl.n	8007b98 <__swbuf_r+0x20>
 8007b94:	6923      	ldr	r3, [r4, #16]
 8007b96:	b943      	cbnz	r3, 8007baa <__swbuf_r+0x32>
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f000 f82a 	bl	8007bf4 <__swsetup_r>
 8007ba0:	b118      	cbz	r0, 8007baa <__swbuf_r+0x32>
 8007ba2:	f04f 37ff 	mov.w	r7, #4294967295
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	6922      	ldr	r2, [r4, #16]
 8007bae:	1a98      	subs	r0, r3, r2
 8007bb0:	6963      	ldr	r3, [r4, #20]
 8007bb2:	b2f6      	uxtb	r6, r6
 8007bb4:	4283      	cmp	r3, r0
 8007bb6:	4637      	mov	r7, r6
 8007bb8:	dc05      	bgt.n	8007bc6 <__swbuf_r+0x4e>
 8007bba:	4621      	mov	r1, r4
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f7ff fd65 	bl	800768c <_fflush_r>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d1ed      	bne.n	8007ba2 <__swbuf_r+0x2a>
 8007bc6:	68a3      	ldr	r3, [r4, #8]
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	60a3      	str	r3, [r4, #8]
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	6022      	str	r2, [r4, #0]
 8007bd2:	701e      	strb	r6, [r3, #0]
 8007bd4:	6962      	ldr	r2, [r4, #20]
 8007bd6:	1c43      	adds	r3, r0, #1
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d004      	beq.n	8007be6 <__swbuf_r+0x6e>
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	07db      	lsls	r3, r3, #31
 8007be0:	d5e1      	bpl.n	8007ba6 <__swbuf_r+0x2e>
 8007be2:	2e0a      	cmp	r6, #10
 8007be4:	d1df      	bne.n	8007ba6 <__swbuf_r+0x2e>
 8007be6:	4621      	mov	r1, r4
 8007be8:	4628      	mov	r0, r5
 8007bea:	f7ff fd4f 	bl	800768c <_fflush_r>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d0d9      	beq.n	8007ba6 <__swbuf_r+0x2e>
 8007bf2:	e7d6      	b.n	8007ba2 <__swbuf_r+0x2a>

08007bf4 <__swsetup_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4b29      	ldr	r3, [pc, #164]	@ (8007c9c <__swsetup_r+0xa8>)
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	b118      	cbz	r0, 8007c08 <__swsetup_r+0x14>
 8007c00:	6a03      	ldr	r3, [r0, #32]
 8007c02:	b90b      	cbnz	r3, 8007c08 <__swsetup_r+0x14>
 8007c04:	f7fe f838 	bl	8005c78 <__sinit>
 8007c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c0c:	0719      	lsls	r1, r3, #28
 8007c0e:	d422      	bmi.n	8007c56 <__swsetup_r+0x62>
 8007c10:	06da      	lsls	r2, r3, #27
 8007c12:	d407      	bmi.n	8007c24 <__swsetup_r+0x30>
 8007c14:	2209      	movs	r2, #9
 8007c16:	602a      	str	r2, [r5, #0]
 8007c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c1c:	81a3      	strh	r3, [r4, #12]
 8007c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c22:	e033      	b.n	8007c8c <__swsetup_r+0x98>
 8007c24:	0758      	lsls	r0, r3, #29
 8007c26:	d512      	bpl.n	8007c4e <__swsetup_r+0x5a>
 8007c28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c2a:	b141      	cbz	r1, 8007c3e <__swsetup_r+0x4a>
 8007c2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c30:	4299      	cmp	r1, r3
 8007c32:	d002      	beq.n	8007c3a <__swsetup_r+0x46>
 8007c34:	4628      	mov	r0, r5
 8007c36:	f7ff f823 	bl	8006c80 <_free_r>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c44:	81a3      	strh	r3, [r4, #12]
 8007c46:	2300      	movs	r3, #0
 8007c48:	6063      	str	r3, [r4, #4]
 8007c4a:	6923      	ldr	r3, [r4, #16]
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	f043 0308 	orr.w	r3, r3, #8
 8007c54:	81a3      	strh	r3, [r4, #12]
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	b94b      	cbnz	r3, 8007c6e <__swsetup_r+0x7a>
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c64:	d003      	beq.n	8007c6e <__swsetup_r+0x7a>
 8007c66:	4621      	mov	r1, r4
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f7ff fd5d 	bl	8007728 <__smakebuf_r>
 8007c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c72:	f013 0201 	ands.w	r2, r3, #1
 8007c76:	d00a      	beq.n	8007c8e <__swsetup_r+0x9a>
 8007c78:	2200      	movs	r2, #0
 8007c7a:	60a2      	str	r2, [r4, #8]
 8007c7c:	6962      	ldr	r2, [r4, #20]
 8007c7e:	4252      	negs	r2, r2
 8007c80:	61a2      	str	r2, [r4, #24]
 8007c82:	6922      	ldr	r2, [r4, #16]
 8007c84:	b942      	cbnz	r2, 8007c98 <__swsetup_r+0xa4>
 8007c86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c8a:	d1c5      	bne.n	8007c18 <__swsetup_r+0x24>
 8007c8c:	bd38      	pop	{r3, r4, r5, pc}
 8007c8e:	0799      	lsls	r1, r3, #30
 8007c90:	bf58      	it	pl
 8007c92:	6962      	ldrpl	r2, [r4, #20]
 8007c94:	60a2      	str	r2, [r4, #8]
 8007c96:	e7f4      	b.n	8007c82 <__swsetup_r+0x8e>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	e7f7      	b.n	8007c8c <__swsetup_r+0x98>
 8007c9c:	20000038 	.word	0x20000038

08007ca0 <_raise_r>:
 8007ca0:	291f      	cmp	r1, #31
 8007ca2:	b538      	push	{r3, r4, r5, lr}
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	d904      	bls.n	8007cb4 <_raise_r+0x14>
 8007caa:	2316      	movs	r3, #22
 8007cac:	6003      	str	r3, [r0, #0]
 8007cae:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007cb6:	b112      	cbz	r2, 8007cbe <_raise_r+0x1e>
 8007cb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cbc:	b94b      	cbnz	r3, 8007cd2 <_raise_r+0x32>
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f000 f830 	bl	8007d24 <_getpid_r>
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	4601      	mov	r1, r0
 8007cc8:	4628      	mov	r0, r5
 8007cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cce:	f000 b817 	b.w	8007d00 <_kill_r>
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d00a      	beq.n	8007cec <_raise_r+0x4c>
 8007cd6:	1c59      	adds	r1, r3, #1
 8007cd8:	d103      	bne.n	8007ce2 <_raise_r+0x42>
 8007cda:	2316      	movs	r3, #22
 8007cdc:	6003      	str	r3, [r0, #0]
 8007cde:	2001      	movs	r0, #1
 8007ce0:	e7e7      	b.n	8007cb2 <_raise_r+0x12>
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007ce8:	4620      	mov	r0, r4
 8007cea:	4798      	blx	r3
 8007cec:	2000      	movs	r0, #0
 8007cee:	e7e0      	b.n	8007cb2 <_raise_r+0x12>

08007cf0 <raise>:
 8007cf0:	4b02      	ldr	r3, [pc, #8]	@ (8007cfc <raise+0xc>)
 8007cf2:	4601      	mov	r1, r0
 8007cf4:	6818      	ldr	r0, [r3, #0]
 8007cf6:	f7ff bfd3 	b.w	8007ca0 <_raise_r>
 8007cfa:	bf00      	nop
 8007cfc:	20000038 	.word	0x20000038

08007d00 <_kill_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4d07      	ldr	r5, [pc, #28]	@ (8007d20 <_kill_r+0x20>)
 8007d04:	2300      	movs	r3, #0
 8007d06:	4604      	mov	r4, r0
 8007d08:	4608      	mov	r0, r1
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	602b      	str	r3, [r5, #0]
 8007d0e:	f7f9 fc4f 	bl	80015b0 <_kill>
 8007d12:	1c43      	adds	r3, r0, #1
 8007d14:	d102      	bne.n	8007d1c <_kill_r+0x1c>
 8007d16:	682b      	ldr	r3, [r5, #0]
 8007d18:	b103      	cbz	r3, 8007d1c <_kill_r+0x1c>
 8007d1a:	6023      	str	r3, [r4, #0]
 8007d1c:	bd38      	pop	{r3, r4, r5, pc}
 8007d1e:	bf00      	nop
 8007d20:	200004f8 	.word	0x200004f8

08007d24 <_getpid_r>:
 8007d24:	f7f9 bc3c 	b.w	80015a0 <_getpid>

08007d28 <_init>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	bf00      	nop
 8007d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2e:	bc08      	pop	{r3}
 8007d30:	469e      	mov	lr, r3
 8007d32:	4770      	bx	lr

08007d34 <_fini>:
 8007d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d36:	bf00      	nop
 8007d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3a:	bc08      	pop	{r3}
 8007d3c:	469e      	mov	lr, r3
 8007d3e:	4770      	bx	lr
