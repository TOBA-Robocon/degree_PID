
degree_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08007e20  08007e20  00008e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081f8  080081f8  0000a1f4  2**0
                  CONTENTS
  4 .ARM          00000008  080081f8  080081f8  000091f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008200  08008200  0000a1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008200  08008200  00009200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008204  08008204  00009204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08008208  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1f4  2**0
                  CONTENTS
 10 .bss          00000310  200001f8  200001f8  0000a1f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000508  20000508  0000a1f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea24  00000000  00000000  0000a224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eb9  00000000  00000000  00018c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  0001ab08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0b  00000000  00000000  0001b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c364  00000000  00000000  0001c1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fbeb  00000000  00000000  0003854f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6e66  00000000  00000000  0004813a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eefa0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000464c  00000000  00000000  000eefe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000f3630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e04 	.word	0x08007e04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08007e04 	.word	0x08007e04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <constrain>:
double goal_pulse = 0;		//目標角度をエンコーダのパルス数に変換

int sec_count_flag = 0;		//1msec毎に立つ
double cycle = 0.001;		//周期

int constrain(int num, int max, int mini){
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
	if(num > max){
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dd01      	ble.n	8000bc0 <constrain+0x18>
		return max;
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	e006      	b.n	8000bce <constrain+0x26>
	}
	else if(num < mini){
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	da01      	bge.n	8000bcc <constrain+0x24>
		return mini;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	e000      	b.n	8000bce <constrain+0x26>
	}

	return num;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
}//数値の制限
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	0000      	movs	r0, r0
 8000bdc:	0000      	movs	r0, r0
	...

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b5b0      	push	{r4, r5, r7, lr}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 8000be4:	4baa      	ldr	r3, [pc, #680]	@ (8000e90 <main+0x2b0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f005 f8e7 	bl	8005dc0 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf2:	f000 fe17 	bl	8001824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf6:	f000 f97d 	bl	8000ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfa:	f000 fb35 	bl	8001268 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bfe:	f000 fa2d 	bl	800105c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c02:	f000 fa7f 	bl	8001104 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000c06:	f000 faff 	bl	8001208 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000c0a:	f000 f9d3 	bl	8000fb4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000c0e:	213c      	movs	r1, #60	@ 0x3c
 8000c10:	48a0      	ldr	r0, [pc, #640]	@ (8000e94 <main+0x2b4>)
 8000c12:	f002 ff75 	bl	8003b00 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c16:	2100      	movs	r1, #0
 8000c18:	489f      	ldr	r0, [pc, #636]	@ (8000e98 <main+0x2b8>)
 8000c1a:	f002 fddf 	bl	80037dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c1e:	2104      	movs	r1, #4
 8000c20:	489d      	ldr	r0, [pc, #628]	@ (8000e98 <main+0x2b8>)
 8000c22:	f002 fddb 	bl	80037dc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000c26:	489d      	ldr	r0, [pc, #628]	@ (8000e9c <main+0x2bc>)
 8000c28:	f002 fd1a 	bl	8003660 <HAL_TIM_Base_Start_IT>

  TIM2 -> CNT = 5000;	//CNTレジスタを5000(ある程度大きい値)にセット
 8000c2c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c34:	625a      	str	r2, [r3, #36]	@ 0x24

  goal_pulse = 1.666 * 4 * goal_degree;	//目標角度を目標パルス数に変換
 8000c36:	4b9a      	ldr	r3, [pc, #616]	@ (8000ea0 <main+0x2c0>)
 8000c38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c3c:	a392      	add	r3, pc, #584	@ (adr r3, 8000e88 <main+0x2a8>)
 8000c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c42:	f7ff fcd9 	bl	80005f8 <__aeabi_dmul>
 8000c46:	4602      	mov	r2, r0
 8000c48:	460b      	mov	r3, r1
 8000c4a:	4996      	ldr	r1, [pc, #600]	@ (8000ea4 <main+0x2c4>)
 8000c4c:	e9c1 2300 	strd	r2, r3, [r1]
  /*STM32でエンコーダーモードを使うとエンコーダの1パルスが4パルスごとにカウントされてしまうので
   * 一周を2400パルスの360度として変換している
   * 元の計算式は　(2400 / 360) * goal_degree　となる
   */

  HAL_Delay(500);	//0.5秒待つ
 8000c50:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c54:	f000 fe4c 	bl	80018f0 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(sec_count_flag == 1){
 8000c58:	4b93      	ldr	r3, [pc, #588]	@ (8000ea8 <main+0x2c8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d1fb      	bne.n	8000c58 <main+0x78>
		  encoder_count = 5000 - (TIM2 -> CNT);//変動したパルスを計算
 8000c60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c66:	f5c3 539c 	rsb	r3, r3, #4992	@ 0x1380
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b8f      	ldr	r3, [pc, #572]	@ (8000eac <main+0x2cc>)
 8000c70:	601a      	str	r2, [r3, #0]
		  error_now = (goal_pulse - encoder_count)/4;//パルスからエラーを計算
 8000c72:	4b8c      	ldr	r3, [pc, #560]	@ (8000ea4 <main+0x2c4>)
 8000c74:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000c78:	4b8c      	ldr	r3, [pc, #560]	@ (8000eac <main+0x2cc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fc51 	bl	8000524 <__aeabi_i2d>
 8000c82:	4602      	mov	r2, r0
 8000c84:	460b      	mov	r3, r1
 8000c86:	4620      	mov	r0, r4
 8000c88:	4629      	mov	r1, r5
 8000c8a:	f7ff fafd 	bl	8000288 <__aeabi_dsub>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	4610      	mov	r0, r2
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	4b85      	ldr	r3, [pc, #532]	@ (8000eb0 <main+0x2d0>)
 8000c9c:	f7ff fdd6 	bl	800084c <__aeabi_ddiv>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f7ff ff56 	bl	8000b58 <__aeabi_d2iz>
 8000cac:	4603      	mov	r3, r0
 8000cae:	4a81      	ldr	r2, [pc, #516]	@ (8000eb4 <main+0x2d4>)
 8000cb0:	6013      	str	r3, [r2, #0]

		  error_dt = (error_now - error_old)/cycle;//数値微分
 8000cb2:	4b80      	ldr	r3, [pc, #512]	@ (8000eb4 <main+0x2d4>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4b80      	ldr	r3, [pc, #512]	@ (8000eb8 <main+0x2d8>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fc31 	bl	8000524 <__aeabi_i2d>
 8000cc2:	4b7e      	ldr	r3, [pc, #504]	@ (8000ebc <main+0x2dc>)
 8000cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc8:	f7ff fdc0 	bl	800084c <__aeabi_ddiv>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	497b      	ldr	r1, [pc, #492]	@ (8000ec0 <main+0x2e0>)
 8000cd2:	e9c1 2300 	strd	r2, r3, [r1]
		  error_integral = error_integral + ((error_now + error_old) * cycle) / 2;//台形積分
 8000cd6:	4b77      	ldr	r3, [pc, #476]	@ (8000eb4 <main+0x2d4>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b77      	ldr	r3, [pc, #476]	@ (8000eb8 <main+0x2d8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fc1f 	bl	8000524 <__aeabi_i2d>
 8000ce6:	4b75      	ldr	r3, [pc, #468]	@ (8000ebc <main+0x2dc>)
 8000ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cec:	f7ff fc84 	bl	80005f8 <__aeabi_dmul>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d00:	f7ff fda4 	bl	800084c <__aeabi_ddiv>
 8000d04:	4602      	mov	r2, r0
 8000d06:	460b      	mov	r3, r1
 8000d08:	4610      	mov	r0, r2
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4b6d      	ldr	r3, [pc, #436]	@ (8000ec4 <main+0x2e4>)
 8000d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d12:	f7ff fabb 	bl	800028c <__adddf3>
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	496a      	ldr	r1, [pc, #424]	@ (8000ec4 <main+0x2e4>)
 8000d1c:	e9c1 2300 	strd	r2, r3, [r1]

		  motor_PID = kP * error_now + kI * error_integral + kD * error_dt;//PIDを計算
 8000d20:	4b64      	ldr	r3, [pc, #400]	@ (8000eb4 <main+0x2d4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	ee07 3a90 	vmov	s15, r3
 8000d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d2c:	4b66      	ldr	r3, [pc, #408]	@ (8000ec8 <main+0x2e8>)
 8000d2e:	edd3 7a00 	vldr	s15, [r3]
 8000d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d36:	ee17 0a90 	vmov	r0, s15
 8000d3a:	f7ff fc05 	bl	8000548 <__aeabi_f2d>
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
 8000d42:	4b62      	ldr	r3, [pc, #392]	@ (8000ecc <main+0x2ec>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fbfe 	bl	8000548 <__aeabi_f2d>
 8000d4c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ec4 <main+0x2e4>)
 8000d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d52:	f7ff fc51 	bl	80005f8 <__aeabi_dmul>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	4629      	mov	r1, r5
 8000d5e:	f7ff fa95 	bl	800028c <__adddf3>
 8000d62:	4602      	mov	r2, r0
 8000d64:	460b      	mov	r3, r1
 8000d66:	4614      	mov	r4, r2
 8000d68:	461d      	mov	r5, r3
 8000d6a:	4b59      	ldr	r3, [pc, #356]	@ (8000ed0 <main+0x2f0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fbea 	bl	8000548 <__aeabi_f2d>
 8000d74:	4b52      	ldr	r3, [pc, #328]	@ (8000ec0 <main+0x2e0>)
 8000d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7a:	f7ff fc3d 	bl	80005f8 <__aeabi_dmul>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	4620      	mov	r0, r4
 8000d84:	4629      	mov	r1, r5
 8000d86:	f7ff fa81 	bl	800028c <__adddf3>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	f7ff fee1 	bl	8000b58 <__aeabi_d2iz>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a4e      	ldr	r2, [pc, #312]	@ (8000ed4 <main+0x2f4>)
 8000d9a:	6013      	str	r3, [r2, #0]

		  if(motor_PID >= 0){
 8000d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ed4 <main+0x2f4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db14      	blt.n	8000dce <main+0x1ee>
			  motor_pwm = constrain(motor_PID, 999, 0);
 8000da4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ed4 <main+0x2f4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fefa 	bl	8000ba8 <constrain>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4a48      	ldr	r2, [pc, #288]	@ (8000ed8 <main+0x2f8>)
 8000db8:	6013      	str	r3, [r2, #0]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, motor_pwm);
 8000dba:	4b47      	ldr	r3, [pc, #284]	@ (8000ed8 <main+0x2f8>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b36      	ldr	r3, [pc, #216]	@ (8000e98 <main+0x2b8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	635a      	str	r2, [r3, #52]	@ 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000dc4:	4b34      	ldr	r3, [pc, #208]	@ (8000e98 <main+0x2b8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dcc:	e013      	b.n	8000df6 <main+0x216>
		  }//モーター正転
		  else{
			  motor_pwm = -constrain(motor_PID, 0, -999);
 8000dce:	4b41      	ldr	r3, [pc, #260]	@ (8000ed4 <main+0x2f4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a42      	ldr	r2, [pc, #264]	@ (8000edc <main+0x2fc>)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fee6 	bl	8000ba8 <constrain>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	425b      	negs	r3, r3
 8000de0:	4a3d      	ldr	r2, [pc, #244]	@ (8000ed8 <main+0x2f8>)
 8000de2:	6013      	str	r3, [r2, #0]
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000de4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e98 <main+0x2b8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	635a      	str	r2, [r3, #52]	@ 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, motor_pwm);
 8000dec:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed8 <main+0x2f8>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b29      	ldr	r3, [pc, #164]	@ (8000e98 <main+0x2b8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	639a      	str	r2, [r3, #56]	@ 0x38
		  }//モーター逆転

		  printf(" PID:%d", motor_pwm);
 8000df6:	4b38      	ldr	r3, [pc, #224]	@ (8000ed8 <main+0x2f8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4838      	ldr	r0, [pc, #224]	@ (8000ee0 <main+0x300>)
 8000dfe:	f004 ffcd 	bl	8005d9c <iprintf>

		  printf(" P:%lf", kP * error_now);
 8000e02:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb4 <main+0x2d4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	ee07 3a90 	vmov	s15, r3
 8000e0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec8 <main+0x2e8>)
 8000e10:	edd3 7a00 	vldr	s15, [r3]
 8000e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e18:	ee17 0a90 	vmov	r0, s15
 8000e1c:	f7ff fb94 	bl	8000548 <__aeabi_f2d>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	482f      	ldr	r0, [pc, #188]	@ (8000ee4 <main+0x304>)
 8000e26:	f004 ffb9 	bl	8005d9c <iprintf>

		  printf(" I:%lf", kI * error_integral);
 8000e2a:	4b28      	ldr	r3, [pc, #160]	@ (8000ecc <main+0x2ec>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fb8a 	bl	8000548 <__aeabi_f2d>
 8000e34:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <main+0x2e4>)
 8000e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3a:	f7ff fbdd 	bl	80005f8 <__aeabi_dmul>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4829      	ldr	r0, [pc, #164]	@ (8000ee8 <main+0x308>)
 8000e44:	f004 ffaa 	bl	8005d9c <iprintf>

		  printf(" D:%lf", kD * error_dt);
 8000e48:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <main+0x2f0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb7b 	bl	8000548 <__aeabi_f2d>
 8000e52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <main+0x2e0>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	f7ff fbce 	bl	80005f8 <__aeabi_dmul>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4822      	ldr	r0, [pc, #136]	@ (8000eec <main+0x30c>)
 8000e62:	f004 ff9b 	bl	8005d9c <iprintf>

//		  printf(" pulse_count:%d", encoder_count);
//
//		  printf(" encorder_now:%d", TIM2 -> CNT);

		  printf(" error:%d \r\n", error_now);
 8000e66:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <main+0x2d4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4820      	ldr	r0, [pc, #128]	@ (8000ef0 <main+0x310>)
 8000e6e:	f004 ff95 	bl	8005d9c <iprintf>

		  error_old = error_now;
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <main+0x2d4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <main+0x2d8>)
 8000e78:	6013      	str	r3, [r2, #0]
		  sec_count_flag = 0;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <main+0x2c8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
	  if(sec_count_flag == 1){
 8000e80:	e6ea      	b.n	8000c58 <main+0x78>
 8000e82:	bf00      	nop
 8000e84:	f3af 8000 	nop.w
 8000e88:	9db22d0e 	.word	0x9db22d0e
 8000e8c:	401aa7ef 	.word	0x401aa7ef
 8000e90:	20000038 	.word	0x20000038
 8000e94:	20000260 	.word	0x20000260
 8000e98:	200002ac 	.word	0x200002ac
 8000e9c:	20000214 	.word	0x20000214
 8000ea0:	20000010 	.word	0x20000010
 8000ea4:	200003a8 	.word	0x200003a8
 8000ea8:	200003b0 	.word	0x200003b0
 8000eac:	20000380 	.word	0x20000380
 8000eb0:	40100000 	.word	0x40100000
 8000eb4:	2000038c 	.word	0x2000038c
 8000eb8:	20000390 	.word	0x20000390
 8000ebc:	20000018 	.word	0x20000018
 8000ec0:	20000398 	.word	0x20000398
 8000ec4:	200003a0 	.word	0x200003a0
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000004 	.word	0x20000004
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000384 	.word	0x20000384
 8000ed8:	20000388 	.word	0x20000388
 8000edc:	fffffc19 	.word	0xfffffc19
 8000ee0:	08007e20 	.word	0x08007e20
 8000ee4:	08007e28 	.word	0x08007e28
 8000ee8:	08007e30 	.word	0x08007e30
 8000eec:	08007e38 	.word	0x08007e38
 8000ef0:	08007e40 	.word	0x08007e40

08000ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b096      	sub	sp, #88	@ 0x58
 8000ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000efe:	2228      	movs	r2, #40	@ 0x28
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f005 f85b 	bl	8005fbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
 8000f26:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f30:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f36:	2301      	movs	r3, #1
 8000f38:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f42:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000f44:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000f48:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 ffa8 	bl	8001ea4 <HAL_RCC_OscConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000f5a:	f000 f9ef 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	230f      	movs	r3, #15
 8000f60:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f62:	2302      	movs	r3, #2
 8000f64:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 ffd0 	bl	8002f20 <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f86:	f000 f9d9 	bl	800133c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000f8a:	f241 0301 	movw	r3, #4097	@ 0x1001
 8000f8e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 f9e2 	bl	8003364 <HAL_RCCEx_PeriphCLKConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000fa6:	f000 f9c9 	bl	800133c <Error_Handler>
  }
}
 8000faa:	bf00      	nop
 8000fac:	3758      	adds	r7, #88	@ 0x58
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd2:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <MX_TIM1_Init+0xa0>)
 8000fd4:	4a20      	ldr	r2, [pc, #128]	@ (8001058 <MX_TIM1_Init+0xa4>)
 8000fd6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400 -1;
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <MX_TIM1_Init+0xa0>)
 8000fda:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000fde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_TIM1_Init+0xa0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <MX_TIM1_Init+0xa0>)
 8000fe8:	2209      	movs	r2, #9
 8000fea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fec:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <MX_TIM1_Init+0xa0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_TIM1_Init+0xa0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <MX_TIM1_Init+0xa0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ffe:	4815      	ldr	r0, [pc, #84]	@ (8001054 <MX_TIM1_Init+0xa0>)
 8001000:	f002 fad6 	bl	80035b0 <HAL_TIM_Base_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800100a:	f000 f997 	bl	800133c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001012:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	480e      	ldr	r0, [pc, #56]	@ (8001054 <MX_TIM1_Init+0xa0>)
 800101c:	f003 f814 	bl	8004048 <HAL_TIM_ConfigClockSource>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001026:	f000 f989 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	@ (8001054 <MX_TIM1_Init+0xa0>)
 800103c:	f003 fce0 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001046:	f000 f979 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	3720      	adds	r7, #32
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000214 	.word	0x20000214
 8001058:	40012c00 	.word	0x40012c00

0800105c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	@ 0x30
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2224      	movs	r2, #36	@ 0x24
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f004 ffa7 	bl	8005fbe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800107a:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <MX_TIM2_Init+0xa4>)
 800107c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001080:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001082:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <MX_TIM2_Init+0xa4>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001088:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <MX_TIM2_Init+0xa4>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800108e:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <MX_TIM2_Init+0xa4>)
 8001090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001094:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_TIM2_Init+0xa4>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <MX_TIM2_Init+0xa4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010a2:	2303      	movs	r3, #3
 80010a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010aa:	2301      	movs	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ba:	2301      	movs	r3, #1
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	4619      	mov	r1, r3
 80010cc:	480c      	ldr	r0, [pc, #48]	@ (8001100 <MX_TIM2_Init+0xa4>)
 80010ce:	f002 fc71 	bl	80039b4 <HAL_TIM_Encoder_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80010d8:	f000 f930 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	@ (8001100 <MX_TIM2_Init+0xa4>)
 80010ea:	f003 fc89 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80010f4:	f000 f922 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3730      	adds	r7, #48	@ 0x30
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000260 	.word	0x20000260

08001104 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08e      	sub	sp, #56	@ 0x38
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001136:	4b32      	ldr	r3, [pc, #200]	@ (8001200 <MX_TIM3_Init+0xfc>)
 8001138:	4a32      	ldr	r2, [pc, #200]	@ (8001204 <MX_TIM3_Init+0x100>)
 800113a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 800113c:	4b30      	ldr	r3, [pc, #192]	@ (8001200 <MX_TIM3_Init+0xfc>)
 800113e:	2209      	movs	r2, #9
 8001140:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	4b2f      	ldr	r3, [pc, #188]	@ (8001200 <MX_TIM3_Init+0xfc>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001148:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <MX_TIM3_Init+0xfc>)
 800114a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800114e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001150:	4b2b      	ldr	r3, [pc, #172]	@ (8001200 <MX_TIM3_Init+0xfc>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001156:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <MX_TIM3_Init+0xfc>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800115c:	4828      	ldr	r0, [pc, #160]	@ (8001200 <MX_TIM3_Init+0xfc>)
 800115e:	f002 fa27 	bl	80035b0 <HAL_TIM_Base_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001168:	f000 f8e8 	bl	800133c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001170:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001172:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001176:	4619      	mov	r1, r3
 8001178:	4821      	ldr	r0, [pc, #132]	@ (8001200 <MX_TIM3_Init+0xfc>)
 800117a:	f002 ff65 	bl	8004048 <HAL_TIM_ConfigClockSource>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001184:	f000 f8da 	bl	800133c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001188:	481d      	ldr	r0, [pc, #116]	@ (8001200 <MX_TIM3_Init+0xfc>)
 800118a:	f002 fac5 	bl	8003718 <HAL_TIM_PWM_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001194:	f000 f8d2 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4816      	ldr	r0, [pc, #88]	@ (8001200 <MX_TIM3_Init+0xfc>)
 80011a8:	f003 fc2a 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011b2:	f000 f8c3 	bl	800133c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b6:	2360      	movs	r3, #96	@ 0x60
 80011b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <MX_TIM3_Init+0xfc>)
 80011ce:	f002 fe27 	bl	8003e20 <HAL_TIM_PWM_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011d8:	f000 f8b0 	bl	800133c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	2204      	movs	r2, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4807      	ldr	r0, [pc, #28]	@ (8001200 <MX_TIM3_Init+0xfc>)
 80011e4:	f002 fe1c 	bl	8003e20 <HAL_TIM_PWM_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80011ee:	f000 f8a5 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011f2:	4803      	ldr	r0, [pc, #12]	@ (8001200 <MX_TIM3_Init+0xfc>)
 80011f4:	f000 f95e 	bl	80014b4 <HAL_TIM_MspPostInit>

}
 80011f8:	bf00      	nop
 80011fa:	3738      	adds	r7, #56	@ 0x38
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200002ac 	.word	0x200002ac
 8001204:	40000400 	.word	0x40000400

08001208 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <MX_USART1_UART_Init+0x54>)
 800120e:	4a14      	ldr	r2, [pc, #80]	@ (8001260 <MX_USART1_UART_Init+0x58>)
 8001210:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8001212:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_USART1_UART_Init+0x54>)
 8001214:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_USART1_UART_Init+0x5c>)
 8001216:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001218:	4b10      	ldr	r3, [pc, #64]	@ (800125c <MX_USART1_UART_Init+0x54>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_USART1_UART_Init+0x54>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001224:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <MX_USART1_UART_Init+0x54>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_USART1_UART_Init+0x54>)
 800122c:	220c      	movs	r2, #12
 800122e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <MX_USART1_UART_Init+0x54>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_USART1_UART_Init+0x54>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <MX_USART1_UART_Init+0x54>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_USART1_UART_Init+0x54>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_USART1_UART_Init+0x54>)
 800124a:	f003 fc65 	bl	8004b18 <HAL_UART_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001254:	f000 f872 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200002f8 	.word	0x200002f8
 8001260:	40013800 	.word	0x40013800
 8001264:	0003d090 	.word	0x0003d090

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800127e:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <MX_GPIO_Init+0x78>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4a17      	ldr	r2, [pc, #92]	@ (80012e0 <MX_GPIO_Init+0x78>)
 8001284:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001288:	6153      	str	r3, [r2, #20]
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <MX_GPIO_Init+0x78>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <MX_GPIO_Init+0x78>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4a11      	ldr	r2, [pc, #68]	@ (80012e0 <MX_GPIO_Init+0x78>)
 800129c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a0:	6153      	str	r3, [r2, #20]
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <MX_GPIO_Init+0x78>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2120      	movs	r1, #32
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b6:	f000 fdc3 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80012ba:	2320      	movs	r3, #32
 80012bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d4:	f000 fc42 	bl	8001b5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021000 	.word	0x40021000

080012e4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)ptr,len,10);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	230a      	movs	r3, #10
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	4803      	ldr	r0, [pc, #12]	@ (8001308 <_write+0x24>)
 80012fa:	f003 fc5b 	bl	8004bb4 <HAL_UART_Transmit>
  return len;
 80012fe:	687b      	ldr	r3, [r7, #4]
}//PrintfをUART出力として使う
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200002f8 	.word	0x200002f8

0800130c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    if (htim == &htim1){
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a07      	ldr	r2, [pc, #28]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d107      	bne.n	800132c <HAL_TIM_PeriodElapsedCallback+0x20>
    	sec_count_flag = 1;
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001322:	2120      	movs	r1, #32
 8001324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001328:	f000 fda2 	bl	8001e70 <HAL_GPIO_TogglePin>
    }
}//TIM1割り込みハンドラ
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000214 	.word	0x20000214
 8001338:	200003b0 	.word	0x200003b0

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <Error_Handler+0x8>

08001348 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <HAL_MspInit+0x44>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	4a0e      	ldr	r2, [pc, #56]	@ (800138c <HAL_MspInit+0x44>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6193      	str	r3, [r2, #24]
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <HAL_MspInit+0x44>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_MspInit+0x44>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	4a08      	ldr	r2, [pc, #32]	@ (800138c <HAL_MspInit+0x44>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001370:	61d3      	str	r3, [r2, #28]
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_MspInit+0x44>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a22      	ldr	r2, [pc, #136]	@ (8001428 <HAL_TIM_Base_MspInit+0x98>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d12c      	bne.n	80013fc <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013a2:	4b22      	ldr	r3, [pc, #136]	@ (800142c <HAL_TIM_Base_MspInit+0x9c>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	4a21      	ldr	r2, [pc, #132]	@ (800142c <HAL_TIM_Base_MspInit+0x9c>)
 80013a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013ac:	6193      	str	r3, [r2, #24]
 80013ae:	4b1f      	ldr	r3, [pc, #124]	@ (800142c <HAL_TIM_Base_MspInit+0x9c>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2018      	movs	r0, #24
 80013c0:	f000 fb95 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80013c4:	2018      	movs	r0, #24
 80013c6:	f000 fbae 	bl	8001b26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2019      	movs	r0, #25
 80013d0:	f000 fb8d 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013d4:	2019      	movs	r0, #25
 80013d6:	f000 fba6 	bl	8001b26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	201a      	movs	r0, #26
 80013e0:	f000 fb85 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80013e4:	201a      	movs	r0, #26
 80013e6:	f000 fb9e 	bl	8001b26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	201b      	movs	r0, #27
 80013f0:	f000 fb7d 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013f4:	201b      	movs	r0, #27
 80013f6:	f000 fb96 	bl	8001b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013fa:	e010      	b.n	800141e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0b      	ldr	r2, [pc, #44]	@ (8001430 <HAL_TIM_Base_MspInit+0xa0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d10b      	bne.n	800141e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <HAL_TIM_Base_MspInit+0x9c>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a08      	ldr	r2, [pc, #32]	@ (800142c <HAL_TIM_Base_MspInit+0x9c>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_TIM_Base_MspInit+0x9c>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40012c00 	.word	0x40012c00
 800142c:	40021000 	.word	0x40021000
 8001430:	40000400 	.word	0x40000400

08001434 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	@ 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001454:	d128      	bne.n	80014a8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001456:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a15      	ldr	r2, [pc, #84]	@ (80014b0 <HAL_TIM_Encoder_MspInit+0x7c>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a0f      	ldr	r2, [pc, #60]	@ (80014b0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001478:	6153      	str	r3, [r2, #20]
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <HAL_TIM_Encoder_MspInit+0x7c>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001486:	2303      	movs	r3, #3
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148e:	2301      	movs	r3, #1
 8001490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001496:	2301      	movs	r3, #1
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a4:	f000 fb5a 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	@ 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a11      	ldr	r2, [pc, #68]	@ (8001518 <HAL_TIM_MspPostInit+0x64>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d11c      	bne.n	8001510 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <HAL_TIM_MspPostInit+0x68>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	4a10      	ldr	r2, [pc, #64]	@ (800151c <HAL_TIM_MspPostInit+0x68>)
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e0:	6153      	str	r3, [r2, #20]
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <HAL_TIM_MspPostInit+0x68>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80014ee:	2350      	movs	r3, #80	@ 0x50
 80014f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014fe:	2302      	movs	r3, #2
 8001500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800150c:	f000 fb26 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001510:	bf00      	nop
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40000400 	.word	0x40000400
 800151c:	40021000 	.word	0x40021000

08001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	@ 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a18      	ldr	r2, [pc, #96]	@ (80015a0 <HAL_UART_MspInit+0x80>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d129      	bne.n	8001596 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001542:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <HAL_UART_MspInit+0x84>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4a17      	ldr	r2, [pc, #92]	@ (80015a4 <HAL_UART_MspInit+0x84>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800154c:	6193      	str	r3, [r2, #24]
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <HAL_UART_MspInit+0x84>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_UART_MspInit+0x84>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <HAL_UART_MspInit+0x84>)
 8001560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001564:	6153      	str	r3, [r2, #20]
 8001566:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <HAL_UART_MspInit+0x84>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001572:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001584:	2307      	movs	r3, #7
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001592:	f000 fae3 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	@ 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40013800 	.word	0x40013800
 80015a4:	40021000 	.word	0x40021000

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <NMI_Handler+0x4>

080015b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <MemManage_Handler+0x4>

080015c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <UsageFault_Handler+0x4>

080015d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fe:	f000 f957 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800160e:	f002 fb05 	bl	8003c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000214 	.word	0x20000214

0800161c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001622:	f002 fafb 	bl	8003c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000214 	.word	0x20000214

08001630 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001636:	f002 faf1 	bl	8003c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000214 	.word	0x20000214

08001644 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <TIM1_CC_IRQHandler+0x10>)
 800164a:	f002 fae7 	bl	8003c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000214 	.word	0x20000214

08001658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return 1;
 800165c:	2301      	movs	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001672:	f004 fcf7 	bl	8006064 <__errno>
 8001676:	4603      	mov	r3, r0
 8001678:	2216      	movs	r2, #22
 800167a:	601a      	str	r2, [r3, #0]
  return -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_exit>:

void _exit (int status)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ffe7 	bl	8001668 <_kill>
  while (1) {}    /* Make sure we hang here */
 800169a:	bf00      	nop
 800169c:	e7fd      	b.n	800169a <_exit+0x12>

0800169e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e00a      	b.n	80016c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016b0:	f3af 8000 	nop.w
 80016b4:	4601      	mov	r1, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60ba      	str	r2, [r7, #8]
 80016bc:	b2ca      	uxtb	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	dbf0      	blt.n	80016b0 <_read+0x12>
  }

  return len;
 80016ce:	687b      	ldr	r3, [r7, #4]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001700:	605a      	str	r2, [r3, #4]
  return 0;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_isatty>:

int _isatty(int file)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001718:	2301      	movs	r3, #1
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001726:	b480      	push	{r7}
 8001728:	b085      	sub	sp, #20
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001748:	4a14      	ldr	r2, [pc, #80]	@ (800179c <_sbrk+0x5c>)
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <_sbrk+0x60>)
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <_sbrk+0x64>)
 800175e:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <_sbrk+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001762:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	429a      	cmp	r2, r3
 800176e:	d207      	bcs.n	8001780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001770:	f004 fc78 	bl	8006064 <__errno>
 8001774:	4603      	mov	r3, r0
 8001776:	220c      	movs	r2, #12
 8001778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	e009      	b.n	8001794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001780:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <_sbrk+0x64>)
 8001790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20003000 	.word	0x20003000
 80017a0:	00000400 	.word	0x00000400
 80017a4:	200003b4 	.word	0x200003b4
 80017a8:	20000508 	.word	0x20000508

080017ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <SystemInit+0x20>)
 80017b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <SystemInit+0x20>)
 80017b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001808 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80017d4:	f7ff ffea 	bl	80017ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d8:	480c      	ldr	r0, [pc, #48]	@ (800180c <LoopForever+0x6>)
  ldr r1, =_edata
 80017da:	490d      	ldr	r1, [pc, #52]	@ (8001810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <LoopForever+0xe>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017f0:	4c0a      	ldr	r4, [pc, #40]	@ (800181c <LoopForever+0x16>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fe:	f004 fc37 	bl	8006070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001802:	f7ff f9ed 	bl	8000be0 <main>

08001806 <LoopForever>:

LoopForever:
    b LoopForever
 8001806:	e7fe      	b.n	8001806 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001808:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001810:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001814:	08008208 	.word	0x08008208
  ldr r2, =_sbss
 8001818:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800181c:	20000508 	.word	0x20000508

08001820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC1_2_IRQHandler>
	...

08001824 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001828:	4b08      	ldr	r3, [pc, #32]	@ (800184c <HAL_Init+0x28>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a07      	ldr	r2, [pc, #28]	@ (800184c <HAL_Init+0x28>)
 800182e:	f043 0310 	orr.w	r3, r3, #16
 8001832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 f94f 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183a:	200f      	movs	r0, #15
 800183c:	f000 f808 	bl	8001850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001840:	f7ff fd82 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000

08001850 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <HAL_InitTick+0x54>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_InitTick+0x58>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001866:	fbb3 f3f1 	udiv	r3, r3, r1
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f967 	bl	8001b42 <HAL_SYSTICK_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00e      	b.n	800189c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d80a      	bhi.n	800189a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f000 f92f 	bl	8001aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001890:	4a06      	ldr	r2, [pc, #24]	@ (80018ac <HAL_InitTick+0x5c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000020 	.word	0x20000020
 80018a8:	20000028 	.word	0x20000028
 80018ac:	20000024 	.word	0x20000024

080018b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_IncTick+0x20>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_IncTick+0x24>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a04      	ldr	r2, [pc, #16]	@ (80018d4 <HAL_IncTick+0x24>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000028 	.word	0x20000028
 80018d4:	200003b8 	.word	0x200003b8

080018d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;  
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <HAL_GetTick+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	200003b8 	.word	0x200003b8

080018f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff ffee 	bl	80018d8 <HAL_GetTick>
 80018fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d005      	beq.n	8001916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_Delay+0x44>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001916:	bf00      	nop
 8001918:	f7ff ffde 	bl	80018d8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	429a      	cmp	r2, r3
 8001926:	d8f7      	bhi.n	8001918 <HAL_Delay+0x28>
  {
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000028 	.word	0x20000028

08001938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001960:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db0b      	blt.n	80019c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	4907      	ldr	r1, [pc, #28]	@ (80019d4 <__NVIC_EnableIRQ+0x38>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	@ (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	@ (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	@ 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	@ 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa4:	d301      	bcc.n	8001aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00f      	b.n	8001aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <SysTick_Config+0x40>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f7ff ff8e 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abc:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <SysTick_Config+0x40>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <SysTick_Config+0x40>)
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	e000e010 	.word	0xe000e010

08001ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff29 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b00:	f7ff ff3e 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f7ff ff8e 	bl	8001a2c <NVIC_EncodePriority>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff5d 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff31 	bl	800199c <__NVIC_EnableIRQ>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffa2 	bl	8001a94 <SysTick_Config>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6a:	e14e      	b.n	8001e0a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2101      	movs	r1, #1
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8140 	beq.w	8001e04 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d005      	beq.n	8001b9c <HAL_GPIO_Init+0x40>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d130      	bne.n	8001bfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	f003 0201 	and.w	r2, r3, #1
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d017      	beq.n	8001c3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2203      	movs	r2, #3
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d123      	bne.n	8001c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	08da      	lsrs	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3208      	adds	r2, #8
 8001c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	6939      	ldr	r1, [r7, #16]
 8001c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	2203      	movs	r2, #3
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0203 	and.w	r2, r3, #3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 809a 	beq.w	8001e04 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd0:	4b55      	ldr	r3, [pc, #340]	@ (8001e28 <HAL_GPIO_Init+0x2cc>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a54      	ldr	r2, [pc, #336]	@ (8001e28 <HAL_GPIO_Init+0x2cc>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b52      	ldr	r3, [pc, #328]	@ (8001e28 <HAL_GPIO_Init+0x2cc>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ce8:	4a50      	ldr	r2, [pc, #320]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d12:	d013      	beq.n	8001d3c <HAL_GPIO_Init+0x1e0>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a46      	ldr	r2, [pc, #280]	@ (8001e30 <HAL_GPIO_Init+0x2d4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00d      	beq.n	8001d38 <HAL_GPIO_Init+0x1dc>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a45      	ldr	r2, [pc, #276]	@ (8001e34 <HAL_GPIO_Init+0x2d8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d007      	beq.n	8001d34 <HAL_GPIO_Init+0x1d8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a44      	ldr	r2, [pc, #272]	@ (8001e38 <HAL_GPIO_Init+0x2dc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d101      	bne.n	8001d30 <HAL_GPIO_Init+0x1d4>
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e006      	b.n	8001d3e <HAL_GPIO_Init+0x1e2>
 8001d30:	2305      	movs	r3, #5
 8001d32:	e004      	b.n	8001d3e <HAL_GPIO_Init+0x1e2>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e002      	b.n	8001d3e <HAL_GPIO_Init+0x1e2>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_GPIO_Init+0x1e2>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	f002 0203 	and.w	r2, r2, #3
 8001d44:	0092      	lsls	r2, r2, #2
 8001d46:	4093      	lsls	r3, r2
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d4e:	4937      	ldr	r1, [pc, #220]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	3302      	adds	r3, #2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d5c:	4b37      	ldr	r3, [pc, #220]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d80:	4a2e      	ldr	r2, [pc, #184]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d86:	4b2d      	ldr	r3, [pc, #180]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001daa:	4a24      	ldr	r2, [pc, #144]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dd4:	4a19      	ldr	r2, [pc, #100]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dda:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8001e3c <HAL_GPIO_Init+0x2e0>)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f47f aea9 	bne.w	8001b6c <HAL_GPIO_Init+0x10>
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	48000400 	.word	0x48000400
 8001e34:	48000800 	.word	0x48000800
 8001e38:	48000c00 	.word	0x48000c00
 8001e3c:	40010400 	.word	0x40010400

08001e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e50:	787b      	ldrb	r3, [r7, #1]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e5c:	e002      	b.n	8001e64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4013      	ands	r3, r2
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43d9      	mvns	r1, r3
 8001e8e:	887b      	ldrh	r3, [r7, #2]
 8001e90:	400b      	ands	r3, r1
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eb4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f001 b823 	b.w	8002f10 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ece:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 817d 	beq.w	80021da <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ee0:	4bbc      	ldr	r3, [pc, #752]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d00c      	beq.n	8001f06 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eec:	4bb9      	ldr	r3, [pc, #740]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d15c      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x10e>
 8001ef8:	4bb6      	ldr	r3, [pc, #728]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f04:	d155      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x10e>
 8001f06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f0a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <HAL_RCC_OscConfig+0x94>
 8001f32:	4ba8      	ldr	r3, [pc, #672]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	e015      	b.n	8001f64 <HAL_RCC_OscConfig+0xc0>
 8001f38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f3c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001f4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f50:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001f54:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001f60:	4b9c      	ldr	r3, [pc, #624]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f68:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001f6c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001f70:	fa92 f2a2 	rbit	r2, r2
 8001f74:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001f78:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001f7c:	fab2 f282 	clz	r2, r2
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	f042 0220 	orr.w	r2, r2, #32
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	f002 021f 	and.w	r2, r2, #31
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 811f 	beq.w	80021d8 <HAL_RCC_OscConfig+0x334>
 8001f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 8116 	bne.w	80021d8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	f000 bfaf 	b.w	8002f10 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x12e>
 8001fc4:	4b83      	ldr	r3, [pc, #524]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a82      	ldr	r2, [pc, #520]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8001fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e036      	b.n	8002040 <HAL_RCC_OscConfig+0x19c>
 8001fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x158>
 8001fe2:	4b7c      	ldr	r3, [pc, #496]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7b      	ldr	r2, [pc, #492]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8001fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b79      	ldr	r3, [pc, #484]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a78      	ldr	r2, [pc, #480]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8001ff4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e021      	b.n	8002040 <HAL_RCC_OscConfig+0x19c>
 8001ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002000:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x184>
 800200e:	4b71      	ldr	r3, [pc, #452]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a70      	ldr	r2, [pc, #448]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b6e      	ldr	r3, [pc, #440]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6d      	ldr	r2, [pc, #436]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0x19c>
 8002028:	4b6a      	ldr	r3, [pc, #424]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a69      	ldr	r2, [pc, #420]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 800202e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b67      	ldr	r3, [pc, #412]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a66      	ldr	r2, [pc, #408]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 800203a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800203e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002040:	4b64      	ldr	r3, [pc, #400]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8002042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002044:	f023 020f 	bic.w	r2, r3, #15
 8002048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	495f      	ldr	r1, [pc, #380]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 8002056:	4313      	orrs	r3, r2
 8002058:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800205a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d059      	beq.n	800211e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7ff fc35 	bl	80018d8 <HAL_GetTick>
 800206e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	e00a      	b.n	800208a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002074:	f7ff fc30 	bl	80018d8 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b64      	cmp	r3, #100	@ 0x64
 8002082:	d902      	bls.n	800208a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	f000 bf43 	b.w	8002f10 <HAL_RCC_OscConfig+0x106c>
 800208a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800208e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800209e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	095b      	lsrs	r3, r3, #5
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d102      	bne.n	80020bc <HAL_RCC_OscConfig+0x218>
 80020b6:	4b47      	ldr	r3, [pc, #284]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	e015      	b.n	80020e8 <HAL_RCC_OscConfig+0x244>
 80020bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020c0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80020d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020d4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80020d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80020e4:	4b3b      	ldr	r3, [pc, #236]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020ec:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80020f0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80020f4:	fa92 f2a2 	rbit	r2, r2
 80020f8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80020fc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002100:	fab2 f282 	clz	r2, r2
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	f042 0220 	orr.w	r2, r2, #32
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	f002 021f 	and.w	r2, r2, #31
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f202 	lsl.w	r2, r1, r2
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ab      	beq.n	8002074 <HAL_RCC_OscConfig+0x1d0>
 800211c:	e05d      	b.n	80021da <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff fbdb 	bl	80018d8 <HAL_GetTick>
 8002122:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002128:	f7ff fbd6 	bl	80018d8 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b64      	cmp	r3, #100	@ 0x64
 8002136:	d902      	bls.n	800213e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	f000 bee9 	b.w	8002f10 <HAL_RCC_OscConfig+0x106c>
 800213e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002142:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002152:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	095b      	lsrs	r3, r3, #5
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d102      	bne.n	8002170 <HAL_RCC_OscConfig+0x2cc>
 800216a:	4b1a      	ldr	r3, [pc, #104]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	e015      	b.n	800219c <HAL_RCC_OscConfig+0x2f8>
 8002170:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002174:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002184:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002188:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800218c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002198:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <HAL_RCC_OscConfig+0x330>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021a0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80021a4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80021a8:	fa92 f2a2 	rbit	r2, r2
 80021ac:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80021b0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80021b4:	fab2 f282 	clz	r2, r2
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	f042 0220 	orr.w	r2, r2, #32
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f002 021f 	and.w	r2, r2, #31
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ab      	bne.n	8002128 <HAL_RCC_OscConfig+0x284>
 80021d0:	e003      	b.n	80021da <HAL_RCC_OscConfig+0x336>
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 817d 	beq.w	80024ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021f0:	4ba6      	ldr	r3, [pc, #664]	@ (800248c <HAL_RCC_OscConfig+0x5e8>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00b      	beq.n	8002214 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021fc:	4ba3      	ldr	r3, [pc, #652]	@ (800248c <HAL_RCC_OscConfig+0x5e8>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b08      	cmp	r3, #8
 8002206:	d172      	bne.n	80022ee <HAL_RCC_OscConfig+0x44a>
 8002208:	4ba0      	ldr	r3, [pc, #640]	@ (800248c <HAL_RCC_OscConfig+0x5e8>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d16c      	bne.n	80022ee <HAL_RCC_OscConfig+0x44a>
 8002214:	2302      	movs	r3, #2
 8002216:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002226:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d102      	bne.n	8002244 <HAL_RCC_OscConfig+0x3a0>
 800223e:	4b93      	ldr	r3, [pc, #588]	@ (800248c <HAL_RCC_OscConfig+0x5e8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	e013      	b.n	800226c <HAL_RCC_OscConfig+0x3c8>
 8002244:	2302      	movs	r3, #2
 8002246:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002256:	2302      	movs	r3, #2
 8002258:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800225c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002268:	4b88      	ldr	r3, [pc, #544]	@ (800248c <HAL_RCC_OscConfig+0x5e8>)
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	2202      	movs	r2, #2
 800226e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002272:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002276:	fa92 f2a2 	rbit	r2, r2
 800227a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800227e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002282:	fab2 f282 	clz	r2, r2
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	f042 0220 	orr.w	r2, r2, #32
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	f002 021f 	and.w	r2, r2, #31
 8002292:	2101      	movs	r1, #1
 8002294:	fa01 f202 	lsl.w	r2, r1, r2
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCC_OscConfig+0x410>
 800229e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d002      	beq.n	80022b4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	f000 be2e 	b.w	8002f10 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b75      	ldr	r3, [pc, #468]	@ (800248c <HAL_RCC_OscConfig+0x5e8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	21f8      	movs	r1, #248	@ 0xf8
 80022ca:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80022d2:	fa91 f1a1 	rbit	r1, r1
 80022d6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80022da:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80022de:	fab1 f181 	clz	r1, r1
 80022e2:	b2c9      	uxtb	r1, r1
 80022e4:	408b      	lsls	r3, r1
 80022e6:	4969      	ldr	r1, [pc, #420]	@ (800248c <HAL_RCC_OscConfig+0x5e8>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ec:	e0fd      	b.n	80024ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8088 	beq.w	8002410 <HAL_RCC_OscConfig+0x56c>
 8002300:	2301      	movs	r3, #1
 8002302:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002312:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002320:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	461a      	mov	r2, r3
 8002328:	2301      	movs	r3, #1
 800232a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff fad4 	bl	80018d8 <HAL_GetTick>
 8002330:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002334:	e00a      	b.n	800234c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002336:	f7ff facf 	bl	80018d8 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d902      	bls.n	800234c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	f000 bde2 	b.w	8002f10 <HAL_RCC_OscConfig+0x106c>
 800234c:	2302      	movs	r3, #2
 800234e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800235e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d102      	bne.n	800237c <HAL_RCC_OscConfig+0x4d8>
 8002376:	4b45      	ldr	r3, [pc, #276]	@ (800248c <HAL_RCC_OscConfig+0x5e8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	e013      	b.n	80023a4 <HAL_RCC_OscConfig+0x500>
 800237c:	2302      	movs	r3, #2
 800237e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800238e:	2302      	movs	r3, #2
 8002390:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002394:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80023a0:	4b3a      	ldr	r3, [pc, #232]	@ (800248c <HAL_RCC_OscConfig+0x5e8>)
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	2202      	movs	r2, #2
 80023a6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80023aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80023ae:	fa92 f2a2 	rbit	r2, r2
 80023b2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80023b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80023ba:	fab2 f282 	clz	r2, r2
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	f042 0220 	orr.w	r2, r2, #32
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	f002 021f 	and.w	r2, r2, #31
 80023ca:	2101      	movs	r1, #1
 80023cc:	fa01 f202 	lsl.w	r2, r1, r2
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0af      	beq.n	8002336 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d6:	4b2d      	ldr	r3, [pc, #180]	@ (800248c <HAL_RCC_OscConfig+0x5e8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	21f8      	movs	r1, #248	@ 0xf8
 80023ec:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80023f4:	fa91 f1a1 	rbit	r1, r1
 80023f8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80023fc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002400:	fab1 f181 	clz	r1, r1
 8002404:	b2c9      	uxtb	r1, r1
 8002406:	408b      	lsls	r3, r1
 8002408:	4920      	ldr	r1, [pc, #128]	@ (800248c <HAL_RCC_OscConfig+0x5e8>)
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]
 800240e:	e06c      	b.n	80024ea <HAL_RCC_OscConfig+0x646>
 8002410:	2301      	movs	r3, #1
 8002412:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002422:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002430:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	461a      	mov	r2, r3
 8002438:	2300      	movs	r3, #0
 800243a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7ff fa4c 	bl	80018d8 <HAL_GetTick>
 8002440:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002446:	f7ff fa47 	bl	80018d8 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d902      	bls.n	800245c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	f000 bd5a 	b.w	8002f10 <HAL_RCC_OscConfig+0x106c>
 800245c:	2302      	movs	r3, #2
 800245e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800246e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d104      	bne.n	8002490 <HAL_RCC_OscConfig+0x5ec>
 8002486:	4b01      	ldr	r3, [pc, #4]	@ (800248c <HAL_RCC_OscConfig+0x5e8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	e015      	b.n	80024b8 <HAL_RCC_OscConfig+0x614>
 800248c:	40021000 	.word	0x40021000
 8002490:	2302      	movs	r3, #2
 8002492:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80024a2:	2302      	movs	r3, #2
 80024a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80024a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80024b4:	4bc8      	ldr	r3, [pc, #800]	@ (80027d8 <HAL_RCC_OscConfig+0x934>)
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	2202      	movs	r2, #2
 80024ba:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80024be:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80024c2:	fa92 f2a2 	rbit	r2, r2
 80024c6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80024ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80024ce:	fab2 f282 	clz	r2, r2
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	f042 0220 	orr.w	r2, r2, #32
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	f002 021f 	and.w	r2, r2, #31
 80024de:	2101      	movs	r1, #1
 80024e0:	fa01 f202 	lsl.w	r2, r1, r2
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1ad      	bne.n	8002446 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8110 	beq.w	8002720 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002504:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d079      	beq.n	8002604 <HAL_RCC_OscConfig+0x760>
 8002510:	2301      	movs	r3, #1
 8002512:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002522:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	4bab      	ldr	r3, [pc, #684]	@ (80027dc <HAL_RCC_OscConfig+0x938>)
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	461a      	mov	r2, r3
 8002536:	2301      	movs	r3, #1
 8002538:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253a:	f7ff f9cd 	bl	80018d8 <HAL_GetTick>
 800253e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002542:	e00a      	b.n	800255a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002544:	f7ff f9c8 	bl	80018d8 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d902      	bls.n	800255a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	f000 bcdb 	b.w	8002f10 <HAL_RCC_OscConfig+0x106c>
 800255a:	2302      	movs	r3, #2
 800255c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800256c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002570:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002574:	2202      	movs	r2, #2
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	fa93 f2a3 	rbit	r2, r3
 8002586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002598:	2202      	movs	r2, #2
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	fa93 f2a3 	rbit	r2, r3
 80025aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80025b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b4:	4b88      	ldr	r3, [pc, #544]	@ (80027d8 <HAL_RCC_OscConfig+0x934>)
 80025b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80025c0:	2102      	movs	r1, #2
 80025c2:	6019      	str	r1, [r3, #0]
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	fa93 f1a3 	rbit	r1, r3
 80025d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025da:	6019      	str	r1, [r3, #0]
  return result;
 80025dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	2101      	movs	r1, #1
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0a0      	beq.n	8002544 <HAL_RCC_OscConfig+0x6a0>
 8002602:	e08d      	b.n	8002720 <HAL_RCC_OscConfig+0x87c>
 8002604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002608:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002614:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	fa93 f2a3 	rbit	r2, r3
 800261e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002622:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002626:	601a      	str	r2, [r3, #0]
  return result;
 8002628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002630:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	4b68      	ldr	r3, [pc, #416]	@ (80027dc <HAL_RCC_OscConfig+0x938>)
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	461a      	mov	r2, r3
 8002642:	2300      	movs	r3, #0
 8002644:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7ff f947 	bl	80018d8 <HAL_GetTick>
 800264a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264e:	e00a      	b.n	8002666 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002650:	f7ff f942 	bl	80018d8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d902      	bls.n	8002666 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	f000 bc55 	b.w	8002f10 <HAL_RCC_OscConfig+0x106c>
 8002666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800266e:	2202      	movs	r2, #2
 8002670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fa93 f2a3 	rbit	r2, r3
 8002680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002684:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002692:	2202      	movs	r2, #2
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	fa93 f2a3 	rbit	r2, r3
 80026a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80026b6:	2202      	movs	r2, #2
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	fa93 f2a3 	rbit	r2, r3
 80026c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80026d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d2:	4b41      	ldr	r3, [pc, #260]	@ (80027d8 <HAL_RCC_OscConfig+0x934>)
 80026d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80026de:	2102      	movs	r1, #2
 80026e0:	6019      	str	r1, [r3, #0]
 80026e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f1a3 	rbit	r1, r3
 80026f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026f8:	6019      	str	r1, [r3, #0]
  return result;
 80026fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fab3 f383 	clz	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2101      	movs	r1, #1
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d197      	bne.n	8002650 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002724:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 81a1 	beq.w	8002a78 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273c:	4b26      	ldr	r3, [pc, #152]	@ (80027d8 <HAL_RCC_OscConfig+0x934>)
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d116      	bne.n	8002776 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002748:	4b23      	ldr	r3, [pc, #140]	@ (80027d8 <HAL_RCC_OscConfig+0x934>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	4a22      	ldr	r2, [pc, #136]	@ (80027d8 <HAL_RCC_OscConfig+0x934>)
 800274e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002752:	61d3      	str	r3, [r2, #28]
 8002754:	4b20      	ldr	r3, [pc, #128]	@ (80027d8 <HAL_RCC_OscConfig+0x934>)
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800275c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002760:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800276e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002770:	2301      	movs	r3, #1
 8002772:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002776:	4b1a      	ldr	r3, [pc, #104]	@ (80027e0 <HAL_RCC_OscConfig+0x93c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d11a      	bne.n	80027b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002782:	4b17      	ldr	r3, [pc, #92]	@ (80027e0 <HAL_RCC_OscConfig+0x93c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a16      	ldr	r2, [pc, #88]	@ (80027e0 <HAL_RCC_OscConfig+0x93c>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800278c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278e:	f7ff f8a3 	bl	80018d8 <HAL_GetTick>
 8002792:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002796:	e009      	b.n	80027ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002798:	f7ff f89e 	bl	80018d8 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b64      	cmp	r3, #100	@ 0x64
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e3b1      	b.n	8002f10 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <HAL_RCC_OscConfig+0x93c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ef      	beq.n	8002798 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d10d      	bne.n	80027e4 <HAL_RCC_OscConfig+0x940>
 80027c8:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <HAL_RCC_OscConfig+0x934>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4a02      	ldr	r2, [pc, #8]	@ (80027d8 <HAL_RCC_OscConfig+0x934>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6213      	str	r3, [r2, #32]
 80027d4:	e03c      	b.n	8002850 <HAL_RCC_OscConfig+0x9ac>
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000
 80027dc:	10908120 	.word	0x10908120
 80027e0:	40007000 	.word	0x40007000
 80027e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10c      	bne.n	800280e <HAL_RCC_OscConfig+0x96a>
 80027f4:	4bc1      	ldr	r3, [pc, #772]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4ac0      	ldr	r2, [pc, #768]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	4bbe      	ldr	r3, [pc, #760]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	4abd      	ldr	r2, [pc, #756]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 8002806:	f023 0304 	bic.w	r3, r3, #4
 800280a:	6213      	str	r3, [r2, #32]
 800280c:	e020      	b.n	8002850 <HAL_RCC_OscConfig+0x9ac>
 800280e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002812:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b05      	cmp	r3, #5
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x994>
 800281e:	4bb7      	ldr	r3, [pc, #732]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4ab6      	ldr	r2, [pc, #728]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 8002824:	f043 0304 	orr.w	r3, r3, #4
 8002828:	6213      	str	r3, [r2, #32]
 800282a:	4bb4      	ldr	r3, [pc, #720]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4ab3      	ldr	r2, [pc, #716]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6213      	str	r3, [r2, #32]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0x9ac>
 8002838:	4bb0      	ldr	r3, [pc, #704]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4aaf      	ldr	r2, [pc, #700]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	6213      	str	r3, [r2, #32]
 8002844:	4bad      	ldr	r3, [pc, #692]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4aac      	ldr	r2, [pc, #688]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 800284a:	f023 0304 	bic.w	r3, r3, #4
 800284e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002854:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 8081 	beq.w	8002964 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7ff f839 	bl	80018d8 <HAL_GetTick>
 8002866:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7ff f834 	bl	80018d8 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e345      	b.n	8002f10 <HAL_RCC_OscConfig+0x106c>
 8002884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002888:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800288c:	2202      	movs	r2, #2
 800288e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002894:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	fa93 f2a3 	rbit	r2, r3
 800289e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80028b0:	2202      	movs	r2, #2
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	fa93 f2a3 	rbit	r2, r3
 80028c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80028ca:	601a      	str	r2, [r3, #0]
  return result;
 80028cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80028d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	095b      	lsrs	r3, r3, #5
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d102      	bne.n	80028f0 <HAL_RCC_OscConfig+0xa4c>
 80028ea:	4b84      	ldr	r3, [pc, #528]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	e013      	b.n	8002918 <HAL_RCC_OscConfig+0xa74>
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80028f8:	2202      	movs	r2, #2
 80028fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	fa93 f2a3 	rbit	r2, r3
 800290a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	4b79      	ldr	r3, [pc, #484]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800291c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002920:	2102      	movs	r1, #2
 8002922:	6011      	str	r1, [r2, #0]
 8002924:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002928:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	fa92 f1a2 	rbit	r1, r2
 8002932:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002936:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800293a:	6011      	str	r1, [r2, #0]
  return result;
 800293c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002940:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	fab2 f282 	clz	r2, r2
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	f002 021f 	and.w	r2, r2, #31
 8002956:	2101      	movs	r1, #1
 8002958:	fa01 f202 	lsl.w	r2, r1, r2
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d084      	beq.n	800286c <HAL_RCC_OscConfig+0x9c8>
 8002962:	e07f      	b.n	8002a64 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7fe ffb8 	bl	80018d8 <HAL_GetTick>
 8002968:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296c:	e00b      	b.n	8002986 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7fe ffb3 	bl	80018d8 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e2c4      	b.n	8002f10 <HAL_RCC_OscConfig+0x106c>
 8002986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800298e:	2202      	movs	r2, #2
 8002990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002996:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	fa93 f2a3 	rbit	r2, r3
 80029a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80029b2:	2202      	movs	r2, #2
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	fa93 f2a3 	rbit	r2, r3
 80029c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80029cc:	601a      	str	r2, [r3, #0]
  return result;
 80029ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80029d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f043 0302 	orr.w	r3, r3, #2
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d102      	bne.n	80029f2 <HAL_RCC_OscConfig+0xb4e>
 80029ec:	4b43      	ldr	r3, [pc, #268]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	e013      	b.n	8002a1a <HAL_RCC_OscConfig+0xb76>
 80029f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80029fa:	2202      	movs	r2, #2
 80029fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a02:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	fa93 f2a3 	rbit	r2, r3
 8002a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a10:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	4b39      	ldr	r3, [pc, #228]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a1e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002a22:	2102      	movs	r1, #2
 8002a24:	6011      	str	r1, [r2, #0]
 8002a26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a2a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	fa92 f1a2 	rbit	r1, r2
 8002a34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a38:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002a3c:	6011      	str	r1, [r2, #0]
  return result;
 8002a3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a42:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	fab2 f282 	clz	r2, r2
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	f002 021f 	and.w	r2, r2, #31
 8002a58:	2101      	movs	r1, #1
 8002a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d184      	bne.n	800296e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a64:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6c:	4b23      	ldr	r3, [pc, #140]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	4a22      	ldr	r2, [pc, #136]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 8002a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a76:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8242 	beq.w	8002f0e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002afc <HAL_RCC_OscConfig+0xc58>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	f000 8213 	beq.w	8002ebe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	f040 8162 	bne.w	8002d6e <HAL_RCC_OscConfig+0xeca>
 8002aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aae:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002ab2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ab6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	fa93 f2a3 	rbit	r2, r3
 8002ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ace:	601a      	str	r2, [r3, #0]
  return result;
 8002ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ad8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ae4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	461a      	mov	r2, r3
 8002aec:	2300      	movs	r3, #0
 8002aee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fef2 	bl	80018d8 <HAL_GetTick>
 8002af4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af8:	e00c      	b.n	8002b14 <HAL_RCC_OscConfig+0xc70>
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe feea 	bl	80018d8 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e1fd      	b.n	8002f10 <HAL_RCC_OscConfig+0x106c>
 8002b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b18:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002b1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b26:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	fa93 f2a3 	rbit	r2, r3
 8002b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b34:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002b38:	601a      	str	r2, [r3, #0]
  return result;
 8002b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002b42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d102      	bne.n	8002b5e <HAL_RCC_OscConfig+0xcba>
 8002b58:	4bb0      	ldr	r3, [pc, #704]	@ (8002e1c <HAL_RCC_OscConfig+0xf78>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	e027      	b.n	8002bae <HAL_RCC_OscConfig+0xd0a>
 8002b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b62:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002b66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b70:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	fa93 f2a3 	rbit	r2, r3
 8002b7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b88:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b96:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f2a3 	rbit	r2, r3
 8002ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	4b9c      	ldr	r3, [pc, #624]	@ (8002e1c <HAL_RCC_OscConfig+0xf78>)
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bb2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002bb6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002bba:	6011      	str	r1, [r2, #0]
 8002bbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bc0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	fa92 f1a2 	rbit	r1, r2
 8002bca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bce:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002bd2:	6011      	str	r1, [r2, #0]
  return result;
 8002bd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bd8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	fab2 f282 	clz	r2, r2
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	f042 0220 	orr.w	r2, r2, #32
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f002 021f 	and.w	r2, r2, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d182      	bne.n	8002b00 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bfa:	4b88      	ldr	r3, [pc, #544]	@ (8002e1c <HAL_RCC_OscConfig+0xf78>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	497f      	ldr	r1, [pc, #508]	@ (8002e1c <HAL_RCC_OscConfig+0xf78>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]
 8002c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c26:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002c2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c34:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fa93 f2a3 	rbit	r2, r3
 8002c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c42:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002c46:	601a      	str	r2, [r3, #0]
  return result;
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002c50:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	461a      	mov	r2, r3
 8002c64:	2301      	movs	r3, #1
 8002c66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe fe36 	bl	80018d8 <HAL_GetTick>
 8002c6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c70:	e009      	b.n	8002c86 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c72:	f7fe fe31 	bl	80018d8 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e144      	b.n	8002f10 <HAL_RCC_OscConfig+0x106c>
 8002c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c98:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	fa93 f2a3 	rbit	r2, r3
 8002ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002caa:	601a      	str	r2, [r3, #0]
  return result;
 8002cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002cb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d102      	bne.n	8002cd0 <HAL_RCC_OscConfig+0xe2c>
 8002cca:	4b54      	ldr	r3, [pc, #336]	@ (8002e1c <HAL_RCC_OscConfig+0xf78>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	e027      	b.n	8002d20 <HAL_RCC_OscConfig+0xe7c>
 8002cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002cd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	fa93 f2a3 	rbit	r2, r3
 8002cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002cfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d08:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	fa93 f2a3 	rbit	r2, r3
 8002d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d16:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e1c <HAL_RCC_OscConfig+0xf78>)
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d24:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002d28:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d2c:	6011      	str	r1, [r2, #0]
 8002d2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d32:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	fa92 f1a2 	rbit	r1, r2
 8002d3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d40:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002d44:	6011      	str	r1, [r2, #0]
  return result;
 8002d46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d4a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	fab2 f282 	clz	r2, r2
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	f042 0220 	orr.w	r2, r2, #32
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	f002 021f 	and.w	r2, r2, #31
 8002d60:	2101      	movs	r1, #1
 8002d62:	fa01 f202 	lsl.w	r2, r1, r2
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d082      	beq.n	8002c72 <HAL_RCC_OscConfig+0xdce>
 8002d6c:	e0cf      	b.n	8002f0e <HAL_RCC_OscConfig+0x106a>
 8002d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d72:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002d76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d80:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	fa93 f2a3 	rbit	r2, r3
 8002d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d92:	601a      	str	r2, [r3, #0]
  return result;
 8002d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d98:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002da8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	461a      	mov	r2, r3
 8002db0:	2300      	movs	r3, #0
 8002db2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe fd90 	bl	80018d8 <HAL_GetTick>
 8002db8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dbc:	e009      	b.n	8002dd2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fe fd8b 	bl	80018d8 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e09e      	b.n	8002f10 <HAL_RCC_OscConfig+0x106c>
 8002dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002dda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	fa93 f2a3 	rbit	r2, r3
 8002dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002df6:	601a      	str	r2, [r3, #0]
  return result;
 8002df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002e00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d104      	bne.n	8002e20 <HAL_RCC_OscConfig+0xf7c>
 8002e16:	4b01      	ldr	r3, [pc, #4]	@ (8002e1c <HAL_RCC_OscConfig+0xf78>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	e029      	b.n	8002e70 <HAL_RCC_OscConfig+0xfcc>
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e24:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002e28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e32:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	fa93 f2a3 	rbit	r2, r3
 8002e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e40:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002e4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e58:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	fa93 f2a3 	rbit	r2, r3
 8002e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e66:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f1c <HAL_RCC_OscConfig+0x1078>)
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e74:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002e78:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e7c:	6011      	str	r1, [r2, #0]
 8002e7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e82:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	fa92 f1a2 	rbit	r1, r2
 8002e8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e90:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e94:	6011      	str	r1, [r2, #0]
  return result;
 8002e96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e9a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	fab2 f282 	clz	r2, r2
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	f042 0220 	orr.w	r2, r2, #32
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	f002 021f 	and.w	r2, r2, #31
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d180      	bne.n	8002dbe <HAL_RCC_OscConfig+0xf1a>
 8002ebc:	e027      	b.n	8002f0e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e01e      	b.n	8002f10 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ed2:	4b12      	ldr	r3, [pc, #72]	@ (8002f1c <HAL_RCC_OscConfig+0x1078>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002eda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002ede:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ef2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002ef6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d001      	beq.n	8002f0e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000

08002f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b09e      	sub	sp, #120	@ 0x78
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e162      	b.n	80031fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b90      	ldr	r3, [pc, #576]	@ (800317c <HAL_RCC_ClockConfig+0x25c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d910      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b8d      	ldr	r3, [pc, #564]	@ (800317c <HAL_RCC_ClockConfig+0x25c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 0207 	bic.w	r2, r3, #7
 8002f4e:	498b      	ldr	r1, [pc, #556]	@ (800317c <HAL_RCC_ClockConfig+0x25c>)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b89      	ldr	r3, [pc, #548]	@ (800317c <HAL_RCC_ClockConfig+0x25c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e14a      	b.n	80031fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f74:	4b82      	ldr	r3, [pc, #520]	@ (8003180 <HAL_RCC_ClockConfig+0x260>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	497f      	ldr	r1, [pc, #508]	@ (8003180 <HAL_RCC_ClockConfig+0x260>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 80dc 	beq.w	800314c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d13c      	bne.n	8003016 <HAL_RCC_ClockConfig+0xf6>
 8002f9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fa0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fac:	fab3 f383 	clz	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d102      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xa6>
 8002fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8003180 <HAL_RCC_ClockConfig+0x260>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	e00f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0xc6>
 8002fc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fe2:	4b67      	ldr	r3, [pc, #412]	@ (8003180 <HAL_RCC_ClockConfig+0x260>)
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002fec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fee:	fa92 f2a2 	rbit	r2, r2
 8002ff2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002ff4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002ff6:	fab2 f282 	clz	r2, r2
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	f042 0220 	orr.w	r2, r2, #32
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f002 021f 	and.w	r2, r2, #31
 8003006:	2101      	movs	r1, #1
 8003008:	fa01 f202 	lsl.w	r2, r1, r2
 800300c:	4013      	ands	r3, r2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d17b      	bne.n	800310a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e0f3      	b.n	80031fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d13c      	bne.n	8003098 <HAL_RCC_ClockConfig+0x178>
 800301e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003022:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800302c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	b2db      	uxtb	r3, r3
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d102      	bne.n	8003048 <HAL_RCC_ClockConfig+0x128>
 8003042:	4b4f      	ldr	r3, [pc, #316]	@ (8003180 <HAL_RCC_ClockConfig+0x260>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	e00f      	b.n	8003068 <HAL_RCC_ClockConfig+0x148>
 8003048:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800304c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	647b      	str	r3, [r7, #68]	@ 0x44
 8003056:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800305a:	643b      	str	r3, [r7, #64]	@ 0x40
 800305c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003064:	4b46      	ldr	r3, [pc, #280]	@ (8003180 <HAL_RCC_ClockConfig+0x260>)
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800306c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800306e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003070:	fa92 f2a2 	rbit	r2, r2
 8003074:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003076:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003078:	fab2 f282 	clz	r2, r2
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	f042 0220 	orr.w	r2, r2, #32
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	f002 021f 	and.w	r2, r2, #31
 8003088:	2101      	movs	r1, #1
 800308a:	fa01 f202 	lsl.w	r2, r1, r2
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d13a      	bne.n	800310a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b2      	b.n	80031fe <HAL_RCC_ClockConfig+0x2de>
 8003098:	2302      	movs	r3, #2
 800309a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80030a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d102      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x1a0>
 80030ba:	4b31      	ldr	r3, [pc, #196]	@ (8003180 <HAL_RCC_ClockConfig+0x260>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	e00d      	b.n	80030dc <HAL_RCC_ClockConfig+0x1bc>
 80030c0:	2302      	movs	r3, #2
 80030c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80030cc:	2302      	movs	r3, #2
 80030ce:	623b      	str	r3, [r7, #32]
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	fa93 f3a3 	rbit	r3, r3
 80030d6:	61fb      	str	r3, [r7, #28]
 80030d8:	4b29      	ldr	r3, [pc, #164]	@ (8003180 <HAL_RCC_ClockConfig+0x260>)
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	2202      	movs	r2, #2
 80030de:	61ba      	str	r2, [r7, #24]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	fa92 f2a2 	rbit	r2, r2
 80030e6:	617a      	str	r2, [r7, #20]
  return result;
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	fab2 f282 	clz	r2, r2
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	f042 0220 	orr.w	r2, r2, #32
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	f002 021f 	and.w	r2, r2, #31
 80030fa:	2101      	movs	r1, #1
 80030fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e079      	b.n	80031fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310a:	4b1d      	ldr	r3, [pc, #116]	@ (8003180 <HAL_RCC_ClockConfig+0x260>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f023 0203 	bic.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	491a      	ldr	r1, [pc, #104]	@ (8003180 <HAL_RCC_ClockConfig+0x260>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800311c:	f7fe fbdc 	bl	80018d8 <HAL_GetTick>
 8003120:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	e00a      	b.n	800313a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f7fe fbd8 	bl	80018d8 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e061      	b.n	80031fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <HAL_RCC_ClockConfig+0x260>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 020c 	and.w	r2, r3, #12
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	429a      	cmp	r2, r3
 800314a:	d1eb      	bne.n	8003124 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800314c:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <HAL_RCC_ClockConfig+0x25c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d214      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b08      	ldr	r3, [pc, #32]	@ (800317c <HAL_RCC_ClockConfig+0x25c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 0207 	bic.w	r2, r3, #7
 8003162:	4906      	ldr	r1, [pc, #24]	@ (800317c <HAL_RCC_ClockConfig+0x25c>)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b04      	ldr	r3, [pc, #16]	@ (800317c <HAL_RCC_ClockConfig+0x25c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e040      	b.n	80031fe <HAL_RCC_ClockConfig+0x2de>
 800317c:	40022000 	.word	0x40022000
 8003180:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003190:	4b1d      	ldr	r3, [pc, #116]	@ (8003208 <HAL_RCC_ClockConfig+0x2e8>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	491a      	ldr	r1, [pc, #104]	@ (8003208 <HAL_RCC_ClockConfig+0x2e8>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ae:	4b16      	ldr	r3, [pc, #88]	@ (8003208 <HAL_RCC_ClockConfig+0x2e8>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4912      	ldr	r1, [pc, #72]	@ (8003208 <HAL_RCC_ClockConfig+0x2e8>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031c2:	f000 f829 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031c6:	4601      	mov	r1, r0
 80031c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003208 <HAL_RCC_ClockConfig+0x2e8>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031d0:	22f0      	movs	r2, #240	@ 0xf0
 80031d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	fa92 f2a2 	rbit	r2, r2
 80031da:	60fa      	str	r2, [r7, #12]
  return result;
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	fab2 f282 	clz	r2, r2
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	40d3      	lsrs	r3, r2
 80031e6:	4a09      	ldr	r2, [pc, #36]	@ (800320c <HAL_RCC_ClockConfig+0x2ec>)
 80031e8:	5cd3      	ldrb	r3, [r2, r3]
 80031ea:	fa21 f303 	lsr.w	r3, r1, r3
 80031ee:	4a08      	ldr	r2, [pc, #32]	@ (8003210 <HAL_RCC_ClockConfig+0x2f0>)
 80031f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031f2:	4b08      	ldr	r3, [pc, #32]	@ (8003214 <HAL_RCC_ClockConfig+0x2f4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe fb2a 	bl	8001850 <HAL_InitTick>
  
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3778      	adds	r7, #120	@ 0x78
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	08007e50 	.word	0x08007e50
 8003210:	20000020 	.word	0x20000020
 8003214:	20000024 	.word	0x20000024

08003218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	2300      	movs	r3, #0
 800322c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003232:	4b1e      	ldr	r3, [pc, #120]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b04      	cmp	r3, #4
 8003240:	d002      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x30>
 8003242:	2b08      	cmp	r3, #8
 8003244:	d003      	beq.n	800324e <HAL_RCC_GetSysClockFreq+0x36>
 8003246:	e026      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003248:	4b19      	ldr	r3, [pc, #100]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800324a:	613b      	str	r3, [r7, #16]
      break;
 800324c:	e026      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	0c9b      	lsrs	r3, r3, #18
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	4a17      	ldr	r2, [pc, #92]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003258:	5cd3      	ldrb	r3, [r2, r3]
 800325a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800325c:	4b13      	ldr	r3, [pc, #76]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x94>)
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	4a14      	ldr	r2, [pc, #80]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003266:	5cd3      	ldrb	r3, [r2, r3]
 8003268:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003274:	4a0e      	ldr	r2, [pc, #56]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	fbb2 f2f3 	udiv	r2, r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	e004      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a0c      	ldr	r2, [pc, #48]	@ (80032bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	613b      	str	r3, [r7, #16]
      break;
 8003294:	e002      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003296:	4b0a      	ldr	r3, [pc, #40]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003298:	613b      	str	r3, [r7, #16]
      break;
 800329a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329c:	693b      	ldr	r3, [r7, #16]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	00f42400 	.word	0x00f42400
 80032b4:	08007e68 	.word	0x08007e68
 80032b8:	08007e78 	.word	0x08007e78
 80032bc:	003d0900 	.word	0x003d0900
 80032c0:	007a1200 	.word	0x007a1200

080032c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c8:	4b03      	ldr	r3, [pc, #12]	@ (80032d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000020 	.word	0x20000020

080032dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80032e2:	f7ff ffef 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 80032e6:	4601      	mov	r1, r0
 80032e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003318 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032f0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80032f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	fa92 f2a2 	rbit	r2, r2
 80032fc:	603a      	str	r2, [r7, #0]
  return result;
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	fab2 f282 	clz	r2, r2
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	40d3      	lsrs	r3, r2
 8003308:	4a04      	ldr	r2, [pc, #16]	@ (800331c <HAL_RCC_GetPCLK1Freq+0x40>)
 800330a:	5cd3      	ldrb	r3, [r2, r3]
 800330c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	08007e60 	.word	0x08007e60

08003320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003326:	f7ff ffcd 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 800332a:	4601      	mov	r1, r0
 800332c:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003334:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003338:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	fa92 f2a2 	rbit	r2, r2
 8003340:	603a      	str	r2, [r7, #0]
  return result;
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	fab2 f282 	clz	r2, r2
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	40d3      	lsrs	r3, r2
 800334c:	4a04      	ldr	r2, [pc, #16]	@ (8003360 <HAL_RCC_GetPCLK2Freq+0x40>)
 800334e:	5cd3      	ldrb	r3, [r2, r3]
 8003350:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000
 8003360:	08007e60 	.word	0x08007e60

08003364 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b092      	sub	sp, #72	@ 0x48
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003374:	2300      	movs	r3, #0
 8003376:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80cd 	beq.w	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003388:	4b86      	ldr	r3, [pc, #536]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10e      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003394:	4b83      	ldr	r3, [pc, #524]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	4a82      	ldr	r2, [pc, #520]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800339a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800339e:	61d3      	str	r3, [r2, #28]
 80033a0:	4b80      	ldr	r3, [pc, #512]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b2:	4b7d      	ldr	r3, [pc, #500]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d118      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033be:	4b7a      	ldr	r3, [pc, #488]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a79      	ldr	r2, [pc, #484]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80033c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ca:	f7fe fa85 	bl	80018d8 <HAL_GetTick>
 80033ce:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	e008      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d2:	f7fe fa81 	bl	80018d8 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b64      	cmp	r3, #100	@ 0x64
 80033de:	d901      	bls.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e0db      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	4b70      	ldr	r3, [pc, #448]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033f0:	4b6c      	ldr	r3, [pc, #432]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d07d      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003408:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800340a:	429a      	cmp	r2, r3
 800340c:	d076      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800340e:	4b65      	ldr	r3, [pc, #404]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003418:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800341c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003420:	fa93 f3a3 	rbit	r3, r3
 8003424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	4b5e      	ldr	r3, [pc, #376]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	461a      	mov	r2, r3
 8003438:	2301      	movs	r3, #1
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003440:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800344a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800344c:	fab3 f383 	clz	r3, r3
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	4b55      	ldr	r3, [pc, #340]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	461a      	mov	r2, r3
 800345c:	2300      	movs	r3, #0
 800345e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003460:	4a50      	ldr	r2, [pc, #320]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003464:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d045      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe fa32 	bl	80018d8 <HAL_GetTick>
 8003474:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	e00a      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003478:	f7fe fa2e 	bl	80018d8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e086      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800348e:	2302      	movs	r3, #2
 8003490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
 800349a:	2302      	movs	r3, #2
 800349c:	623b      	str	r3, [r7, #32]
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	61fb      	str	r3, [r7, #28]
  return result;
 80034a6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a8:	fab3 f383 	clz	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f043 0302 	orr.w	r3, r3, #2
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d102      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80034bc:	4b39      	ldr	r3, [pc, #228]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	e007      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80034c2:	2302      	movs	r3, #2
 80034c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	4b35      	ldr	r3, [pc, #212]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	2202      	movs	r2, #2
 80034d4:	613a      	str	r2, [r7, #16]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	fa92 f2a2 	rbit	r2, r2
 80034dc:	60fa      	str	r2, [r7, #12]
  return result;
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	fab2 f282 	clz	r2, r2
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	f002 021f 	and.w	r2, r2, #31
 80034f0:	2101      	movs	r1, #1
 80034f2:	fa01 f202 	lsl.w	r2, r1, r2
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0bd      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80034fc:	4b29      	ldr	r3, [pc, #164]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	4926      	ldr	r1, [pc, #152]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800350a:	4313      	orrs	r3, r2
 800350c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800350e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003512:	2b01      	cmp	r3, #1
 8003514:	d105      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003516:	4b23      	ldr	r3, [pc, #140]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	4a22      	ldr	r2, [pc, #136]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003520:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800352e:	4b1d      	ldr	r3, [pc, #116]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	f023 0203 	bic.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	491a      	ldr	r1, [pc, #104]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800353c:	4313      	orrs	r3, r2
 800353e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800354c:	4b15      	ldr	r3, [pc, #84]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003550:	f023 0210 	bic.w	r2, r3, #16
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4912      	ldr	r1, [pc, #72]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800355a:	4313      	orrs	r3, r2
 800355c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800356a:	4b0e      	ldr	r3, [pc, #56]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	490b      	ldr	r1, [pc, #44]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003578:	4313      	orrs	r3, r2
 800357a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003588:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	4903      	ldr	r1, [pc, #12]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003596:	4313      	orrs	r3, r2
 8003598:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3748      	adds	r7, #72	@ 0x48
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40007000 	.word	0x40007000
 80035ac:	10908100 	.word	0x10908100

080035b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e049      	b.n	8003656 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd feda 	bl	8001390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f000 fe1c 	bl	800422c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d001      	beq.n	8003678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e040      	b.n	80036fa <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <HAL_TIM_Base_Start_IT+0xa8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00e      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0x58>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a2:	d009      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0x58>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a18      	ldr	r2, [pc, #96]	@ (800370c <HAL_TIM_Base_Start_IT+0xac>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0x58>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a17      	ldr	r2, [pc, #92]	@ (8003710 <HAL_TIM_Base_Start_IT+0xb0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d115      	bne.n	80036e4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	4b15      	ldr	r3, [pc, #84]	@ (8003714 <HAL_TIM_Base_Start_IT+0xb4>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d015      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x96>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d0:	d011      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	e008      	b.n	80036f6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	e000      	b.n	80036f8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40012c00 	.word	0x40012c00
 800370c:	40000400 	.word	0x40000400
 8003710:	40014000 	.word	0x40014000
 8003714:	00010007 	.word	0x00010007

08003718 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e049      	b.n	80037be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f841 	bl	80037c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f000 fd68 	bl	800422c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <HAL_TIM_PWM_Start+0x24>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	e03c      	b.n	800387a <HAL_TIM_PWM_Start+0x9e>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b04      	cmp	r3, #4
 8003804:	d109      	bne.n	800381a <HAL_TIM_PWM_Start+0x3e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	bf14      	ite	ne
 8003812:	2301      	movne	r3, #1
 8003814:	2300      	moveq	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	e02f      	b.n	800387a <HAL_TIM_PWM_Start+0x9e>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d109      	bne.n	8003834 <HAL_TIM_PWM_Start+0x58>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e022      	b.n	800387a <HAL_TIM_PWM_Start+0x9e>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b0c      	cmp	r3, #12
 8003838:	d109      	bne.n	800384e <HAL_TIM_PWM_Start+0x72>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	bf14      	ite	ne
 8003846:	2301      	movne	r3, #1
 8003848:	2300      	moveq	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	e015      	b.n	800387a <HAL_TIM_PWM_Start+0x9e>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b10      	cmp	r3, #16
 8003852:	d109      	bne.n	8003868 <HAL_TIM_PWM_Start+0x8c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	bf14      	ite	ne
 8003860:	2301      	movne	r3, #1
 8003862:	2300      	moveq	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e008      	b.n	800387a <HAL_TIM_PWM_Start+0x9e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	bf14      	ite	ne
 8003874:	2301      	movne	r3, #1
 8003876:	2300      	moveq	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e088      	b.n	8003994 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <HAL_TIM_PWM_Start+0xb6>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003890:	e023      	b.n	80038da <HAL_TIM_PWM_Start+0xfe>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d104      	bne.n	80038a2 <HAL_TIM_PWM_Start+0xc6>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038a0:	e01b      	b.n	80038da <HAL_TIM_PWM_Start+0xfe>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d104      	bne.n	80038b2 <HAL_TIM_PWM_Start+0xd6>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038b0:	e013      	b.n	80038da <HAL_TIM_PWM_Start+0xfe>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d104      	bne.n	80038c2 <HAL_TIM_PWM_Start+0xe6>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038c0:	e00b      	b.n	80038da <HAL_TIM_PWM_Start+0xfe>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d104      	bne.n	80038d2 <HAL_TIM_PWM_Start+0xf6>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038d0:	e003      	b.n	80038da <HAL_TIM_PWM_Start+0xfe>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2201      	movs	r2, #1
 80038e0:	6839      	ldr	r1, [r7, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 f866 	bl	80049b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2b      	ldr	r2, [pc, #172]	@ (800399c <HAL_TIM_PWM_Start+0x1c0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00e      	beq.n	8003910 <HAL_TIM_PWM_Start+0x134>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2a      	ldr	r2, [pc, #168]	@ (80039a0 <HAL_TIM_PWM_Start+0x1c4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d009      	beq.n	8003910 <HAL_TIM_PWM_Start+0x134>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a28      	ldr	r2, [pc, #160]	@ (80039a4 <HAL_TIM_PWM_Start+0x1c8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <HAL_TIM_PWM_Start+0x134>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a27      	ldr	r2, [pc, #156]	@ (80039a8 <HAL_TIM_PWM_Start+0x1cc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d101      	bne.n	8003914 <HAL_TIM_PWM_Start+0x138>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <HAL_TIM_PWM_Start+0x13a>
 8003914:	2300      	movs	r3, #0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003928:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1b      	ldr	r2, [pc, #108]	@ (800399c <HAL_TIM_PWM_Start+0x1c0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00e      	beq.n	8003952 <HAL_TIM_PWM_Start+0x176>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800393c:	d009      	beq.n	8003952 <HAL_TIM_PWM_Start+0x176>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1a      	ldr	r2, [pc, #104]	@ (80039ac <HAL_TIM_PWM_Start+0x1d0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_TIM_PWM_Start+0x176>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a14      	ldr	r2, [pc, #80]	@ (80039a0 <HAL_TIM_PWM_Start+0x1c4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d115      	bne.n	800397e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <HAL_TIM_PWM_Start+0x1d4>)
 800395a:	4013      	ands	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b06      	cmp	r3, #6
 8003962:	d015      	beq.n	8003990 <HAL_TIM_PWM_Start+0x1b4>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396a:	d011      	beq.n	8003990 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397c:	e008      	b.n	8003990 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	e000      	b.n	8003992 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003990:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40014400 	.word	0x40014400
 80039a8:	40014800 	.word	0x40014800
 80039ac:	40000400 	.word	0x40000400
 80039b0:	00010007 	.word	0x00010007

080039b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e097      	b.n	8003af8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7fd fd29 	bl	8001434 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80039f8:	f023 0307 	bic.w	r3, r3, #7
 80039fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f000 fc0f 	bl	800422c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a36:	f023 0303 	bic.w	r3, r3, #3
 8003a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	4313      	orrs	r3, r2
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003a54:	f023 030c 	bic.w	r3, r3, #12
 8003a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	4313      	orrs	r3, r2
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	011a      	lsls	r2, r3, #4
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	031b      	lsls	r3, r3, #12
 8003a84:	4313      	orrs	r3, r2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003a9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d110      	bne.n	8003b52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d102      	bne.n	8003b3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b36:	7b7b      	ldrb	r3, [r7, #13]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d001      	beq.n	8003b40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e069      	b.n	8003c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b50:	e031      	b.n	8003bb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d110      	bne.n	8003b7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b58:	7bbb      	ldrb	r3, [r7, #14]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d102      	bne.n	8003b64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b5e:	7b3b      	ldrb	r3, [r7, #12]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d001      	beq.n	8003b68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e055      	b.n	8003c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b78:	e01d      	b.n	8003bb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d108      	bne.n	8003b92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b80:	7bbb      	ldrb	r3, [r7, #14]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d105      	bne.n	8003b92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b86:	7b7b      	ldrb	r3, [r7, #13]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d102      	bne.n	8003b92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b8c:	7b3b      	ldrb	r3, [r7, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e03e      	b.n	8003c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_TIM_Encoder_Start+0xc4>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d008      	beq.n	8003bd4 <HAL_TIM_Encoder_Start+0xd4>
 8003bc2:	e00f      	b.n	8003be4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fef1 	bl	80049b4 <TIM_CCxChannelCmd>
      break;
 8003bd2:	e016      	b.n	8003c02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	2104      	movs	r1, #4
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fee9 	bl	80049b4 <TIM_CCxChannelCmd>
      break;
 8003be2:	e00e      	b.n	8003c02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2201      	movs	r2, #1
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fee1 	bl	80049b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	2104      	movs	r1, #4
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 feda 	bl	80049b4 <TIM_CCxChannelCmd>
      break;
 8003c00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d020      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01b      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0202 	mvn.w	r2, #2
 8003c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fac1 	bl	80041ee <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fab3 	bl	80041da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fac4 	bl	8004202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d020      	beq.n	8003ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01b      	beq.n	8003ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0204 	mvn.w	r2, #4
 8003c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fa9b 	bl	80041ee <HAL_TIM_IC_CaptureCallback>
 8003cb8:	e005      	b.n	8003cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fa8d 	bl	80041da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fa9e 	bl	8004202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d020      	beq.n	8003d18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01b      	beq.n	8003d18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0208 	mvn.w	r2, #8
 8003ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2204      	movs	r2, #4
 8003cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fa75 	bl	80041ee <HAL_TIM_IC_CaptureCallback>
 8003d04:	e005      	b.n	8003d12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fa67 	bl	80041da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fa78 	bl	8004202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d020      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01b      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0210 	mvn.w	r2, #16
 8003d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2208      	movs	r2, #8
 8003d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fa4f 	bl	80041ee <HAL_TIM_IC_CaptureCallback>
 8003d50:	e005      	b.n	8003d5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fa41 	bl	80041da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fa52 	bl	8004202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0201 	mvn.w	r2, #1
 8003d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fd fac2 	bl	800130c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00c      	beq.n	8003dac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fea2 	bl	8004af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00c      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fe9a 	bl	8004b04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00c      	beq.n	8003df4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa11 	bl	8004216 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00c      	beq.n	8003e18 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0220 	mvn.w	r2, #32
 8003e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fe62 	bl	8004adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e0ff      	b.n	800403e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b14      	cmp	r3, #20
 8003e4a:	f200 80f0 	bhi.w	800402e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003ea9 	.word	0x08003ea9
 8003e58:	0800402f 	.word	0x0800402f
 8003e5c:	0800402f 	.word	0x0800402f
 8003e60:	0800402f 	.word	0x0800402f
 8003e64:	08003ee9 	.word	0x08003ee9
 8003e68:	0800402f 	.word	0x0800402f
 8003e6c:	0800402f 	.word	0x0800402f
 8003e70:	0800402f 	.word	0x0800402f
 8003e74:	08003f2b 	.word	0x08003f2b
 8003e78:	0800402f 	.word	0x0800402f
 8003e7c:	0800402f 	.word	0x0800402f
 8003e80:	0800402f 	.word	0x0800402f
 8003e84:	08003f6b 	.word	0x08003f6b
 8003e88:	0800402f 	.word	0x0800402f
 8003e8c:	0800402f 	.word	0x0800402f
 8003e90:	0800402f 	.word	0x0800402f
 8003e94:	08003fad 	.word	0x08003fad
 8003e98:	0800402f 	.word	0x0800402f
 8003e9c:	0800402f 	.word	0x0800402f
 8003ea0:	0800402f 	.word	0x0800402f
 8003ea4:	08003fed 	.word	0x08003fed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fa40 	bl	8004334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0208 	orr.w	r2, r2, #8
 8003ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0204 	bic.w	r2, r2, #4
 8003ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6999      	ldr	r1, [r3, #24]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	619a      	str	r2, [r3, #24]
      break;
 8003ee6:	e0a5      	b.n	8004034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 faa6 	bl	8004440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6999      	ldr	r1, [r3, #24]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	021a      	lsls	r2, r3, #8
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	619a      	str	r2, [r3, #24]
      break;
 8003f28:	e084      	b.n	8004034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fb05 	bl	8004540 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0208 	orr.w	r2, r2, #8
 8003f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0204 	bic.w	r2, r2, #4
 8003f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69d9      	ldr	r1, [r3, #28]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	61da      	str	r2, [r3, #28]
      break;
 8003f68:	e064      	b.n	8004034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fb63 	bl	800463c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69d9      	ldr	r1, [r3, #28]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	021a      	lsls	r2, r3, #8
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	61da      	str	r2, [r3, #28]
      break;
 8003faa:	e043      	b.n	8004034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fba6 	bl	8004704 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0208 	orr.w	r2, r2, #8
 8003fc6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0204 	bic.w	r2, r2, #4
 8003fd6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003fea:	e023      	b.n	8004034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fbe4 	bl	80047c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004006:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004016:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	021a      	lsls	r2, r3, #8
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800402c:	e002      	b.n	8004034 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
      break;
 8004032:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800403c:	7dfb      	ldrb	r3, [r7, #23]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop

08004048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIM_ConfigClockSource+0x1c>
 8004060:	2302      	movs	r3, #2
 8004062:	e0b6      	b.n	80041d2 <HAL_TIM_ConfigClockSource+0x18a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004082:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800408e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040a0:	d03e      	beq.n	8004120 <HAL_TIM_ConfigClockSource+0xd8>
 80040a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040a6:	f200 8087 	bhi.w	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ae:	f000 8086 	beq.w	80041be <HAL_TIM_ConfigClockSource+0x176>
 80040b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b6:	d87f      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040b8:	2b70      	cmp	r3, #112	@ 0x70
 80040ba:	d01a      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0xaa>
 80040bc:	2b70      	cmp	r3, #112	@ 0x70
 80040be:	d87b      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040c0:	2b60      	cmp	r3, #96	@ 0x60
 80040c2:	d050      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x11e>
 80040c4:	2b60      	cmp	r3, #96	@ 0x60
 80040c6:	d877      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040c8:	2b50      	cmp	r3, #80	@ 0x50
 80040ca:	d03c      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0xfe>
 80040cc:	2b50      	cmp	r3, #80	@ 0x50
 80040ce:	d873      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040d0:	2b40      	cmp	r3, #64	@ 0x40
 80040d2:	d058      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x13e>
 80040d4:	2b40      	cmp	r3, #64	@ 0x40
 80040d6:	d86f      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040d8:	2b30      	cmp	r3, #48	@ 0x30
 80040da:	d064      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x15e>
 80040dc:	2b30      	cmp	r3, #48	@ 0x30
 80040de:	d86b      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d060      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x15e>
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d867      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d05c      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x15e>
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d05a      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x15e>
 80040f0:	e062      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004102:	f000 fc37 	bl	8004974 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004114:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	609a      	str	r2, [r3, #8]
      break;
 800411e:	e04f      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004130:	f000 fc20 	bl	8004974 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004142:	609a      	str	r2, [r3, #8]
      break;
 8004144:	e03c      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004152:	461a      	mov	r2, r3
 8004154:	f000 fb94 	bl	8004880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2150      	movs	r1, #80	@ 0x50
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fbed 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8004164:	e02c      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004172:	461a      	mov	r2, r3
 8004174:	f000 fbb3 	bl	80048de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2160      	movs	r1, #96	@ 0x60
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fbdd 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8004184:	e01c      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004192:	461a      	mov	r2, r3
 8004194:	f000 fb74 	bl	8004880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2140      	movs	r1, #64	@ 0x40
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fbcd 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80041a4:	e00c      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4619      	mov	r1, r3
 80041b0:	4610      	mov	r0, r2
 80041b2:	f000 fbc4 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80041b6:	e003      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
      break;
 80041bc:	e000      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80041be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a38      	ldr	r2, [pc, #224]	@ (8004320 <TIM_Base_SetConfig+0xf4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d007      	beq.n	8004254 <TIM_Base_SetConfig+0x28>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800424a:	d003      	beq.n	8004254 <TIM_Base_SetConfig+0x28>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a35      	ldr	r2, [pc, #212]	@ (8004324 <TIM_Base_SetConfig+0xf8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d108      	bne.n	8004266 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800425a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a2d      	ldr	r2, [pc, #180]	@ (8004320 <TIM_Base_SetConfig+0xf4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <TIM_Base_SetConfig+0x6a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004274:	d00f      	beq.n	8004296 <TIM_Base_SetConfig+0x6a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a2a      	ldr	r2, [pc, #168]	@ (8004324 <TIM_Base_SetConfig+0xf8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00b      	beq.n	8004296 <TIM_Base_SetConfig+0x6a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a29      	ldr	r2, [pc, #164]	@ (8004328 <TIM_Base_SetConfig+0xfc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <TIM_Base_SetConfig+0x6a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a28      	ldr	r2, [pc, #160]	@ (800432c <TIM_Base_SetConfig+0x100>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <TIM_Base_SetConfig+0x6a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a27      	ldr	r2, [pc, #156]	@ (8004330 <TIM_Base_SetConfig+0x104>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d108      	bne.n	80042a8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800429c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a14      	ldr	r2, [pc, #80]	@ (8004320 <TIM_Base_SetConfig+0xf4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00b      	beq.n	80042ec <TIM_Base_SetConfig+0xc0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a14      	ldr	r2, [pc, #80]	@ (8004328 <TIM_Base_SetConfig+0xfc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d007      	beq.n	80042ec <TIM_Base_SetConfig+0xc0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a13      	ldr	r2, [pc, #76]	@ (800432c <TIM_Base_SetConfig+0x100>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <TIM_Base_SetConfig+0xc0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a12      	ldr	r2, [pc, #72]	@ (8004330 <TIM_Base_SetConfig+0x104>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d103      	bne.n	80042f4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d105      	bne.n	8004312 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f023 0201 	bic.w	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	611a      	str	r2, [r3, #16]
  }
}
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40000400 	.word	0x40000400
 8004328:	40014000 	.word	0x40014000
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800

08004334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f023 0201 	bic.w	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 0302 	bic.w	r3, r3, #2
 8004380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a28      	ldr	r2, [pc, #160]	@ (8004430 <TIM_OC1_SetConfig+0xfc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00b      	beq.n	80043ac <TIM_OC1_SetConfig+0x78>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a27      	ldr	r2, [pc, #156]	@ (8004434 <TIM_OC1_SetConfig+0x100>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d007      	beq.n	80043ac <TIM_OC1_SetConfig+0x78>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a26      	ldr	r2, [pc, #152]	@ (8004438 <TIM_OC1_SetConfig+0x104>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d003      	beq.n	80043ac <TIM_OC1_SetConfig+0x78>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a25      	ldr	r2, [pc, #148]	@ (800443c <TIM_OC1_SetConfig+0x108>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d10c      	bne.n	80043c6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f023 0308 	bic.w	r3, r3, #8
 80043b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f023 0304 	bic.w	r3, r3, #4
 80043c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a19      	ldr	r2, [pc, #100]	@ (8004430 <TIM_OC1_SetConfig+0xfc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00b      	beq.n	80043e6 <TIM_OC1_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a18      	ldr	r2, [pc, #96]	@ (8004434 <TIM_OC1_SetConfig+0x100>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d007      	beq.n	80043e6 <TIM_OC1_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a17      	ldr	r2, [pc, #92]	@ (8004438 <TIM_OC1_SetConfig+0x104>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d003      	beq.n	80043e6 <TIM_OC1_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a16      	ldr	r2, [pc, #88]	@ (800443c <TIM_OC1_SetConfig+0x108>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d111      	bne.n	800440a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	621a      	str	r2, [r3, #32]
}
 8004424:	bf00      	nop
 8004426:	371c      	adds	r7, #28
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40014000 	.word	0x40014000
 8004438:	40014400 	.word	0x40014400
 800443c:	40014800 	.word	0x40014800

08004440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	f023 0210 	bic.w	r2, r3, #16
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800446e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800447a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f023 0320 	bic.w	r3, r3, #32
 800448e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a24      	ldr	r2, [pc, #144]	@ (8004530 <TIM_OC2_SetConfig+0xf0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d10d      	bne.n	80044c0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004530 <TIM_OC2_SetConfig+0xf0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00b      	beq.n	80044e0 <TIM_OC2_SetConfig+0xa0>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004534 <TIM_OC2_SetConfig+0xf4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d007      	beq.n	80044e0 <TIM_OC2_SetConfig+0xa0>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a19      	ldr	r2, [pc, #100]	@ (8004538 <TIM_OC2_SetConfig+0xf8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d003      	beq.n	80044e0 <TIM_OC2_SetConfig+0xa0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a18      	ldr	r2, [pc, #96]	@ (800453c <TIM_OC2_SetConfig+0xfc>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d113      	bne.n	8004508 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044e6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044ee:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	621a      	str	r2, [r3, #32]
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40012c00 	.word	0x40012c00
 8004534:	40014000 	.word	0x40014000
 8004538:	40014400 	.word	0x40014400
 800453c:	40014800 	.word	0x40014800

08004540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800456e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0303 	bic.w	r3, r3, #3
 800457a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800458c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a23      	ldr	r2, [pc, #140]	@ (800462c <TIM_OC3_SetConfig+0xec>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10d      	bne.n	80045be <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045bc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a1a      	ldr	r2, [pc, #104]	@ (800462c <TIM_OC3_SetConfig+0xec>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00b      	beq.n	80045de <TIM_OC3_SetConfig+0x9e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a19      	ldr	r2, [pc, #100]	@ (8004630 <TIM_OC3_SetConfig+0xf0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d007      	beq.n	80045de <TIM_OC3_SetConfig+0x9e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a18      	ldr	r2, [pc, #96]	@ (8004634 <TIM_OC3_SetConfig+0xf4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d003      	beq.n	80045de <TIM_OC3_SetConfig+0x9e>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a17      	ldr	r2, [pc, #92]	@ (8004638 <TIM_OC3_SetConfig+0xf8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d113      	bne.n	8004606 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	621a      	str	r2, [r3, #32]
}
 8004620:	bf00      	nop
 8004622:	371c      	adds	r7, #28
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	40012c00 	.word	0x40012c00
 8004630:	40014000 	.word	0x40014000
 8004634:	40014400 	.word	0x40014400
 8004638:	40014800 	.word	0x40014800

0800463c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800466a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800466e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800468a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	031b      	lsls	r3, r3, #12
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a16      	ldr	r2, [pc, #88]	@ (80046f4 <TIM_OC4_SetConfig+0xb8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00b      	beq.n	80046b8 <TIM_OC4_SetConfig+0x7c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a15      	ldr	r2, [pc, #84]	@ (80046f8 <TIM_OC4_SetConfig+0xbc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <TIM_OC4_SetConfig+0x7c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a14      	ldr	r2, [pc, #80]	@ (80046fc <TIM_OC4_SetConfig+0xc0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_OC4_SetConfig+0x7c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a13      	ldr	r2, [pc, #76]	@ (8004700 <TIM_OC4_SetConfig+0xc4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d109      	bne.n	80046cc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	019b      	lsls	r3, r3, #6
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40012c00 	.word	0x40012c00
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40014400 	.word	0x40014400
 8004700:	40014800 	.word	0x40014800

08004704 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004748:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	041b      	lsls	r3, r3, #16
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a15      	ldr	r2, [pc, #84]	@ (80047b0 <TIM_OC5_SetConfig+0xac>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00b      	beq.n	8004776 <TIM_OC5_SetConfig+0x72>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a14      	ldr	r2, [pc, #80]	@ (80047b4 <TIM_OC5_SetConfig+0xb0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <TIM_OC5_SetConfig+0x72>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a13      	ldr	r2, [pc, #76]	@ (80047b8 <TIM_OC5_SetConfig+0xb4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d003      	beq.n	8004776 <TIM_OC5_SetConfig+0x72>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a12      	ldr	r2, [pc, #72]	@ (80047bc <TIM_OC5_SetConfig+0xb8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d109      	bne.n	800478a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800477c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	621a      	str	r2, [r3, #32]
}
 80047a4:	bf00      	nop
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	40012c00 	.word	0x40012c00
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40014400 	.word	0x40014400
 80047bc:	40014800 	.word	0x40014800

080047c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	051b      	lsls	r3, r3, #20
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a16      	ldr	r2, [pc, #88]	@ (8004870 <TIM_OC6_SetConfig+0xb0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00b      	beq.n	8004834 <TIM_OC6_SetConfig+0x74>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a15      	ldr	r2, [pc, #84]	@ (8004874 <TIM_OC6_SetConfig+0xb4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <TIM_OC6_SetConfig+0x74>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a14      	ldr	r2, [pc, #80]	@ (8004878 <TIM_OC6_SetConfig+0xb8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_OC6_SetConfig+0x74>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a13      	ldr	r2, [pc, #76]	@ (800487c <TIM_OC6_SetConfig+0xbc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d109      	bne.n	8004848 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800483a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	029b      	lsls	r3, r3, #10
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40012c00 	.word	0x40012c00
 8004874:	40014000 	.word	0x40014000
 8004878:	40014400 	.word	0x40014400
 800487c:	40014800 	.word	0x40014800

08004880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0201 	bic.w	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f023 030a 	bic.w	r3, r3, #10
 80048bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048de:	b480      	push	{r7}
 80048e0:	b087      	sub	sp, #28
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f023 0210 	bic.w	r2, r3, #16
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	031b      	lsls	r3, r3, #12
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800491a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	f043 0307 	orr.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800498e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	431a      	orrs	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	609a      	str	r2, [r3, #8]
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	2201      	movs	r2, #1
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1a      	ldr	r2, [r3, #32]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	401a      	ands	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1a      	ldr	r2, [r3, #32]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ec:	431a      	orrs	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	621a      	str	r2, [r3, #32]
}
 80049f2:	bf00      	nop
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e054      	b.n	8004ac2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a24      	ldr	r2, [pc, #144]	@ (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d108      	bne.n	8004a54 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a17      	ldr	r2, [pc, #92]	@ (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00e      	beq.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a80:	d009      	beq.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a13      	ldr	r2, [pc, #76]	@ (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a11      	ldr	r2, [pc, #68]	@ (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d10c      	bne.n	8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40012c00 	.word	0x40012c00
 8004ad4:	40000400 	.word	0x40000400
 8004ad8:	40014000 	.word	0x40014000

08004adc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e040      	b.n	8004bac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fc fcf0 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2224      	movs	r2, #36	@ 0x24
 8004b44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0201 	bic.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f9e8 	bl	8004f34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f8af 	bl	8004cc8 <UART_SetConfig>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e01b      	b.n	8004bac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fa67 	bl	8005078 <UART_CheckIdleState>
 8004baa:	4603      	mov	r3, r0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	@ 0x28
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d177      	bne.n	8004cbc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_UART_Transmit+0x24>
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e070      	b.n	8004cbe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2221      	movs	r2, #33	@ 0x21
 8004be8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bea:	f7fc fe75 	bl	80018d8 <HAL_GetTick>
 8004bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c08:	d108      	bne.n	8004c1c <HAL_UART_Transmit+0x68>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d104      	bne.n	8004c1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	e003      	b.n	8004c24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c24:	e02f      	b.n	8004c86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2180      	movs	r1, #128	@ 0x80
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 fac9 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d004      	beq.n	8004c46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e03b      	b.n	8004cbe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	881a      	ldrh	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	3302      	adds	r3, #2
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e007      	b.n	8004c74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	781a      	ldrb	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3301      	adds	r3, #1
 8004c72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1c9      	bne.n	8004c26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2140      	movs	r1, #64	@ 0x40
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 fa93 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e005      	b.n	8004cbe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e000      	b.n	8004cbe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004cbc:	2302      	movs	r3, #2
  }
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4b8a      	ldr	r3, [pc, #552]	@ (8004f1c <UART_SetConfig+0x254>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	6979      	ldr	r1, [r7, #20]
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a78      	ldr	r2, [pc, #480]	@ (8004f20 <UART_SetConfig+0x258>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d120      	bne.n	8004d86 <UART_SetConfig+0xbe>
 8004d44:	4b77      	ldr	r3, [pc, #476]	@ (8004f24 <UART_SetConfig+0x25c>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d817      	bhi.n	8004d80 <UART_SetConfig+0xb8>
 8004d50:	a201      	add	r2, pc, #4	@ (adr r2, 8004d58 <UART_SetConfig+0x90>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d69 	.word	0x08004d69
 8004d5c:	08004d75 	.word	0x08004d75
 8004d60:	08004d7b 	.word	0x08004d7b
 8004d64:	08004d6f 	.word	0x08004d6f
 8004d68:	2300      	movs	r3, #0
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e01d      	b.n	8004daa <UART_SetConfig+0xe2>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e01a      	b.n	8004daa <UART_SetConfig+0xe2>
 8004d74:	2304      	movs	r3, #4
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e017      	b.n	8004daa <UART_SetConfig+0xe2>
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e014      	b.n	8004daa <UART_SetConfig+0xe2>
 8004d80:	2310      	movs	r3, #16
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e011      	b.n	8004daa <UART_SetConfig+0xe2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a67      	ldr	r2, [pc, #412]	@ (8004f28 <UART_SetConfig+0x260>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d102      	bne.n	8004d96 <UART_SetConfig+0xce>
 8004d90:	2300      	movs	r3, #0
 8004d92:	77fb      	strb	r3, [r7, #31]
 8004d94:	e009      	b.n	8004daa <UART_SetConfig+0xe2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a64      	ldr	r2, [pc, #400]	@ (8004f2c <UART_SetConfig+0x264>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d102      	bne.n	8004da6 <UART_SetConfig+0xde>
 8004da0:	2300      	movs	r3, #0
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e001      	b.n	8004daa <UART_SetConfig+0xe2>
 8004da6:	2310      	movs	r3, #16
 8004da8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db2:	d15a      	bne.n	8004e6a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004db4:	7ffb      	ldrb	r3, [r7, #31]
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d827      	bhi.n	8004e0a <UART_SetConfig+0x142>
 8004dba:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc0 <UART_SetConfig+0xf8>)
 8004dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004ded 	.word	0x08004ded
 8004dc8:	08004df5 	.word	0x08004df5
 8004dcc:	08004e0b 	.word	0x08004e0b
 8004dd0:	08004dfb 	.word	0x08004dfb
 8004dd4:	08004e0b 	.word	0x08004e0b
 8004dd8:	08004e0b 	.word	0x08004e0b
 8004ddc:	08004e0b 	.word	0x08004e0b
 8004de0:	08004e03 	.word	0x08004e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de4:	f7fe fa7a 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8004de8:	61b8      	str	r0, [r7, #24]
        break;
 8004dea:	e013      	b.n	8004e14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dec:	f7fe fa98 	bl	8003320 <HAL_RCC_GetPCLK2Freq>
 8004df0:	61b8      	str	r0, [r7, #24]
        break;
 8004df2:	e00f      	b.n	8004e14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df4:	4b4e      	ldr	r3, [pc, #312]	@ (8004f30 <UART_SetConfig+0x268>)
 8004df6:	61bb      	str	r3, [r7, #24]
        break;
 8004df8:	e00c      	b.n	8004e14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfa:	f7fe fa0d 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8004dfe:	61b8      	str	r0, [r7, #24]
        break;
 8004e00:	e008      	b.n	8004e14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e06:	61bb      	str	r3, [r7, #24]
        break;
 8004e08:	e004      	b.n	8004e14 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	77bb      	strb	r3, [r7, #30]
        break;
 8004e12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d074      	beq.n	8004f04 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	005a      	lsls	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	441a      	add	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	2b0f      	cmp	r3, #15
 8004e34:	d916      	bls.n	8004e64 <UART_SetConfig+0x19c>
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e3c:	d212      	bcs.n	8004e64 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f023 030f 	bic.w	r3, r3, #15
 8004e46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	89fb      	ldrh	r3, [r7, #14]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	89fa      	ldrh	r2, [r7, #14]
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	e04f      	b.n	8004f04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	77bb      	strb	r3, [r7, #30]
 8004e68:	e04c      	b.n	8004f04 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e6a:	7ffb      	ldrb	r3, [r7, #31]
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d828      	bhi.n	8004ec2 <UART_SetConfig+0x1fa>
 8004e70:	a201      	add	r2, pc, #4	@ (adr r2, 8004e78 <UART_SetConfig+0x1b0>)
 8004e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e76:	bf00      	nop
 8004e78:	08004e9d 	.word	0x08004e9d
 8004e7c:	08004ea5 	.word	0x08004ea5
 8004e80:	08004ead 	.word	0x08004ead
 8004e84:	08004ec3 	.word	0x08004ec3
 8004e88:	08004eb3 	.word	0x08004eb3
 8004e8c:	08004ec3 	.word	0x08004ec3
 8004e90:	08004ec3 	.word	0x08004ec3
 8004e94:	08004ec3 	.word	0x08004ec3
 8004e98:	08004ebb 	.word	0x08004ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e9c:	f7fe fa1e 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8004ea0:	61b8      	str	r0, [r7, #24]
        break;
 8004ea2:	e013      	b.n	8004ecc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea4:	f7fe fa3c 	bl	8003320 <HAL_RCC_GetPCLK2Freq>
 8004ea8:	61b8      	str	r0, [r7, #24]
        break;
 8004eaa:	e00f      	b.n	8004ecc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eac:	4b20      	ldr	r3, [pc, #128]	@ (8004f30 <UART_SetConfig+0x268>)
 8004eae:	61bb      	str	r3, [r7, #24]
        break;
 8004eb0:	e00c      	b.n	8004ecc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb2:	f7fe f9b1 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8004eb6:	61b8      	str	r0, [r7, #24]
        break;
 8004eb8:	e008      	b.n	8004ecc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ebe:	61bb      	str	r3, [r7, #24]
        break;
 8004ec0:	e004      	b.n	8004ecc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	77bb      	strb	r3, [r7, #30]
        break;
 8004eca:	bf00      	nop
    }

    if (pclk != 0U)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d018      	beq.n	8004f04 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	085a      	lsrs	r2, r3, #1
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	441a      	add	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b0f      	cmp	r3, #15
 8004eea:	d909      	bls.n	8004f00 <UART_SetConfig+0x238>
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef2:	d205      	bcs.n	8004f00 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60da      	str	r2, [r3, #12]
 8004efe:	e001      	b.n	8004f04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f10:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3720      	adds	r7, #32
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	efff69f3 	.word	0xefff69f3
 8004f20:	40013800 	.word	0x40013800
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40004400 	.word	0x40004400
 8004f2c:	40004800 	.word	0x40004800
 8004f30:	007a1200 	.word	0x007a1200

08004f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01a      	beq.n	800504a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005032:	d10a      	bne.n	800504a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	605a      	str	r2, [r3, #4]
  }
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b098      	sub	sp, #96	@ 0x60
 800507c:	af02      	add	r7, sp, #8
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005088:	f7fc fc26 	bl	80018d8 <HAL_GetTick>
 800508c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b08      	cmp	r3, #8
 800509a:	d12e      	bne.n	80050fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800509c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a4:	2200      	movs	r2, #0
 80050a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f88c 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d021      	beq.n	80050fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e6      	bne.n	80050b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e062      	b.n	80051c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b04      	cmp	r3, #4
 8005106:	d149      	bne.n	800519c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005108:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005110:	2200      	movs	r2, #0
 8005112:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f856 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d03c      	beq.n	800519c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	623b      	str	r3, [r7, #32]
   return(result);
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005140:	633b      	str	r3, [r7, #48]	@ 0x30
 8005142:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800514e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e6      	bne.n	8005122 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3308      	adds	r3, #8
 800515a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	60fb      	str	r3, [r7, #12]
   return(result);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0301 	bic.w	r3, r3, #1
 800516a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3308      	adds	r3, #8
 8005172:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005174:	61fa      	str	r2, [r7, #28]
 8005176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	69b9      	ldr	r1, [r7, #24]
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	617b      	str	r3, [r7, #20]
   return(result);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e5      	bne.n	8005154 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e011      	b.n	80051c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3758      	adds	r7, #88	@ 0x58
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d8:	e04f      	b.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d04b      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e2:	f7fc fb79 	bl	80018d8 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e04e      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d037      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b80      	cmp	r3, #128	@ 0x80
 800520e:	d034      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b40      	cmp	r3, #64	@ 0x40
 8005214:	d031      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b08      	cmp	r3, #8
 8005222:	d110      	bne.n	8005246 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2208      	movs	r2, #8
 800522a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f838 	bl	80052a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2208      	movs	r2, #8
 8005236:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e029      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005254:	d111      	bne.n	800527a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800525e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f81e 	bl	80052a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e00f      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4013      	ands	r3, r2
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	429a      	cmp	r2, r3
 8005288:	bf0c      	ite	eq
 800528a:	2301      	moveq	r3, #1
 800528c:	2300      	movne	r3, #0
 800528e:	b2db      	uxtb	r3, r3
 8005290:	461a      	mov	r2, r3
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	429a      	cmp	r2, r3
 8005296:	d0a0      	beq.n	80051da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b095      	sub	sp, #84	@ 0x54
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80052ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e6      	bne.n	80052aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3308      	adds	r3, #8
 80052e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f023 0301 	bic.w	r3, r3, #1
 80052f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3308      	adds	r3, #8
 80052fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e5      	bne.n	80052dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005314:	2b01      	cmp	r3, #1
 8005316:	d118      	bne.n	800534a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	60bb      	str	r3, [r7, #8]
   return(result);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 0310 	bic.w	r3, r3, #16
 800532c:	647b      	str	r3, [r7, #68]	@ 0x44
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	613b      	str	r3, [r7, #16]
   return(result);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e6      	bne.n	8005318 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800535e:	bf00      	nop
 8005360:	3754      	adds	r7, #84	@ 0x54
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <__cvt>:
 800536a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800536e:	ec57 6b10 	vmov	r6, r7, d0
 8005372:	2f00      	cmp	r7, #0
 8005374:	460c      	mov	r4, r1
 8005376:	4619      	mov	r1, r3
 8005378:	463b      	mov	r3, r7
 800537a:	bfbb      	ittet	lt
 800537c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005380:	461f      	movlt	r7, r3
 8005382:	2300      	movge	r3, #0
 8005384:	232d      	movlt	r3, #45	@ 0x2d
 8005386:	700b      	strb	r3, [r1, #0]
 8005388:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800538a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800538e:	4691      	mov	r9, r2
 8005390:	f023 0820 	bic.w	r8, r3, #32
 8005394:	bfbc      	itt	lt
 8005396:	4632      	movlt	r2, r6
 8005398:	4616      	movlt	r6, r2
 800539a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800539e:	d005      	beq.n	80053ac <__cvt+0x42>
 80053a0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80053a4:	d100      	bne.n	80053a8 <__cvt+0x3e>
 80053a6:	3401      	adds	r4, #1
 80053a8:	2102      	movs	r1, #2
 80053aa:	e000      	b.n	80053ae <__cvt+0x44>
 80053ac:	2103      	movs	r1, #3
 80053ae:	ab03      	add	r3, sp, #12
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	ab02      	add	r3, sp, #8
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	ec47 6b10 	vmov	d0, r6, r7
 80053ba:	4653      	mov	r3, sl
 80053bc:	4622      	mov	r2, r4
 80053be:	f000 ff07 	bl	80061d0 <_dtoa_r>
 80053c2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80053c6:	4605      	mov	r5, r0
 80053c8:	d119      	bne.n	80053fe <__cvt+0x94>
 80053ca:	f019 0f01 	tst.w	r9, #1
 80053ce:	d00e      	beq.n	80053ee <__cvt+0x84>
 80053d0:	eb00 0904 	add.w	r9, r0, r4
 80053d4:	2200      	movs	r2, #0
 80053d6:	2300      	movs	r3, #0
 80053d8:	4630      	mov	r0, r6
 80053da:	4639      	mov	r1, r7
 80053dc:	f7fb fb74 	bl	8000ac8 <__aeabi_dcmpeq>
 80053e0:	b108      	cbz	r0, 80053e6 <__cvt+0x7c>
 80053e2:	f8cd 900c 	str.w	r9, [sp, #12]
 80053e6:	2230      	movs	r2, #48	@ 0x30
 80053e8:	9b03      	ldr	r3, [sp, #12]
 80053ea:	454b      	cmp	r3, r9
 80053ec:	d31e      	bcc.n	800542c <__cvt+0xc2>
 80053ee:	9b03      	ldr	r3, [sp, #12]
 80053f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80053f2:	1b5b      	subs	r3, r3, r5
 80053f4:	4628      	mov	r0, r5
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	b004      	add	sp, #16
 80053fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053fe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005402:	eb00 0904 	add.w	r9, r0, r4
 8005406:	d1e5      	bne.n	80053d4 <__cvt+0x6a>
 8005408:	7803      	ldrb	r3, [r0, #0]
 800540a:	2b30      	cmp	r3, #48	@ 0x30
 800540c:	d10a      	bne.n	8005424 <__cvt+0xba>
 800540e:	2200      	movs	r2, #0
 8005410:	2300      	movs	r3, #0
 8005412:	4630      	mov	r0, r6
 8005414:	4639      	mov	r1, r7
 8005416:	f7fb fb57 	bl	8000ac8 <__aeabi_dcmpeq>
 800541a:	b918      	cbnz	r0, 8005424 <__cvt+0xba>
 800541c:	f1c4 0401 	rsb	r4, r4, #1
 8005420:	f8ca 4000 	str.w	r4, [sl]
 8005424:	f8da 3000 	ldr.w	r3, [sl]
 8005428:	4499      	add	r9, r3
 800542a:	e7d3      	b.n	80053d4 <__cvt+0x6a>
 800542c:	1c59      	adds	r1, r3, #1
 800542e:	9103      	str	r1, [sp, #12]
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	e7d9      	b.n	80053e8 <__cvt+0x7e>

08005434 <__exponent>:
 8005434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005436:	2900      	cmp	r1, #0
 8005438:	bfba      	itte	lt
 800543a:	4249      	neglt	r1, r1
 800543c:	232d      	movlt	r3, #45	@ 0x2d
 800543e:	232b      	movge	r3, #43	@ 0x2b
 8005440:	2909      	cmp	r1, #9
 8005442:	7002      	strb	r2, [r0, #0]
 8005444:	7043      	strb	r3, [r0, #1]
 8005446:	dd29      	ble.n	800549c <__exponent+0x68>
 8005448:	f10d 0307 	add.w	r3, sp, #7
 800544c:	461d      	mov	r5, r3
 800544e:	270a      	movs	r7, #10
 8005450:	461a      	mov	r2, r3
 8005452:	fbb1 f6f7 	udiv	r6, r1, r7
 8005456:	fb07 1416 	mls	r4, r7, r6, r1
 800545a:	3430      	adds	r4, #48	@ 0x30
 800545c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005460:	460c      	mov	r4, r1
 8005462:	2c63      	cmp	r4, #99	@ 0x63
 8005464:	f103 33ff 	add.w	r3, r3, #4294967295
 8005468:	4631      	mov	r1, r6
 800546a:	dcf1      	bgt.n	8005450 <__exponent+0x1c>
 800546c:	3130      	adds	r1, #48	@ 0x30
 800546e:	1e94      	subs	r4, r2, #2
 8005470:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005474:	1c41      	adds	r1, r0, #1
 8005476:	4623      	mov	r3, r4
 8005478:	42ab      	cmp	r3, r5
 800547a:	d30a      	bcc.n	8005492 <__exponent+0x5e>
 800547c:	f10d 0309 	add.w	r3, sp, #9
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	42ac      	cmp	r4, r5
 8005484:	bf88      	it	hi
 8005486:	2300      	movhi	r3, #0
 8005488:	3302      	adds	r3, #2
 800548a:	4403      	add	r3, r0
 800548c:	1a18      	subs	r0, r3, r0
 800548e:	b003      	add	sp, #12
 8005490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005492:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005496:	f801 6f01 	strb.w	r6, [r1, #1]!
 800549a:	e7ed      	b.n	8005478 <__exponent+0x44>
 800549c:	2330      	movs	r3, #48	@ 0x30
 800549e:	3130      	adds	r1, #48	@ 0x30
 80054a0:	7083      	strb	r3, [r0, #2]
 80054a2:	70c1      	strb	r1, [r0, #3]
 80054a4:	1d03      	adds	r3, r0, #4
 80054a6:	e7f1      	b.n	800548c <__exponent+0x58>

080054a8 <_printf_float>:
 80054a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ac:	b08d      	sub	sp, #52	@ 0x34
 80054ae:	460c      	mov	r4, r1
 80054b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80054b4:	4616      	mov	r6, r2
 80054b6:	461f      	mov	r7, r3
 80054b8:	4605      	mov	r5, r0
 80054ba:	f000 fd89 	bl	8005fd0 <_localeconv_r>
 80054be:	6803      	ldr	r3, [r0, #0]
 80054c0:	9304      	str	r3, [sp, #16]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fa fed4 	bl	8000270 <strlen>
 80054c8:	2300      	movs	r3, #0
 80054ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80054cc:	f8d8 3000 	ldr.w	r3, [r8]
 80054d0:	9005      	str	r0, [sp, #20]
 80054d2:	3307      	adds	r3, #7
 80054d4:	f023 0307 	bic.w	r3, r3, #7
 80054d8:	f103 0208 	add.w	r2, r3, #8
 80054dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80054e0:	f8d4 b000 	ldr.w	fp, [r4]
 80054e4:	f8c8 2000 	str.w	r2, [r8]
 80054e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80054f0:	9307      	str	r3, [sp, #28]
 80054f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80054f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80054fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054fe:	4b9c      	ldr	r3, [pc, #624]	@ (8005770 <_printf_float+0x2c8>)
 8005500:	f04f 32ff 	mov.w	r2, #4294967295
 8005504:	f7fb fb12 	bl	8000b2c <__aeabi_dcmpun>
 8005508:	bb70      	cbnz	r0, 8005568 <_printf_float+0xc0>
 800550a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800550e:	4b98      	ldr	r3, [pc, #608]	@ (8005770 <_printf_float+0x2c8>)
 8005510:	f04f 32ff 	mov.w	r2, #4294967295
 8005514:	f7fb faec 	bl	8000af0 <__aeabi_dcmple>
 8005518:	bb30      	cbnz	r0, 8005568 <_printf_float+0xc0>
 800551a:	2200      	movs	r2, #0
 800551c:	2300      	movs	r3, #0
 800551e:	4640      	mov	r0, r8
 8005520:	4649      	mov	r1, r9
 8005522:	f7fb fadb 	bl	8000adc <__aeabi_dcmplt>
 8005526:	b110      	cbz	r0, 800552e <_printf_float+0x86>
 8005528:	232d      	movs	r3, #45	@ 0x2d
 800552a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800552e:	4a91      	ldr	r2, [pc, #580]	@ (8005774 <_printf_float+0x2cc>)
 8005530:	4b91      	ldr	r3, [pc, #580]	@ (8005778 <_printf_float+0x2d0>)
 8005532:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005536:	bf94      	ite	ls
 8005538:	4690      	movls	r8, r2
 800553a:	4698      	movhi	r8, r3
 800553c:	2303      	movs	r3, #3
 800553e:	6123      	str	r3, [r4, #16]
 8005540:	f02b 0304 	bic.w	r3, fp, #4
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	f04f 0900 	mov.w	r9, #0
 800554a:	9700      	str	r7, [sp, #0]
 800554c:	4633      	mov	r3, r6
 800554e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005550:	4621      	mov	r1, r4
 8005552:	4628      	mov	r0, r5
 8005554:	f000 f9d2 	bl	80058fc <_printf_common>
 8005558:	3001      	adds	r0, #1
 800555a:	f040 808d 	bne.w	8005678 <_printf_float+0x1d0>
 800555e:	f04f 30ff 	mov.w	r0, #4294967295
 8005562:	b00d      	add	sp, #52	@ 0x34
 8005564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005568:	4642      	mov	r2, r8
 800556a:	464b      	mov	r3, r9
 800556c:	4640      	mov	r0, r8
 800556e:	4649      	mov	r1, r9
 8005570:	f7fb fadc 	bl	8000b2c <__aeabi_dcmpun>
 8005574:	b140      	cbz	r0, 8005588 <_printf_float+0xe0>
 8005576:	464b      	mov	r3, r9
 8005578:	2b00      	cmp	r3, #0
 800557a:	bfbc      	itt	lt
 800557c:	232d      	movlt	r3, #45	@ 0x2d
 800557e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005582:	4a7e      	ldr	r2, [pc, #504]	@ (800577c <_printf_float+0x2d4>)
 8005584:	4b7e      	ldr	r3, [pc, #504]	@ (8005780 <_printf_float+0x2d8>)
 8005586:	e7d4      	b.n	8005532 <_printf_float+0x8a>
 8005588:	6863      	ldr	r3, [r4, #4]
 800558a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800558e:	9206      	str	r2, [sp, #24]
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	d13b      	bne.n	800560c <_printf_float+0x164>
 8005594:	2306      	movs	r3, #6
 8005596:	6063      	str	r3, [r4, #4]
 8005598:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800559c:	2300      	movs	r3, #0
 800559e:	6022      	str	r2, [r4, #0]
 80055a0:	9303      	str	r3, [sp, #12]
 80055a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80055a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80055a8:	ab09      	add	r3, sp, #36	@ 0x24
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	6861      	ldr	r1, [r4, #4]
 80055ae:	ec49 8b10 	vmov	d0, r8, r9
 80055b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80055b6:	4628      	mov	r0, r5
 80055b8:	f7ff fed7 	bl	800536a <__cvt>
 80055bc:	9b06      	ldr	r3, [sp, #24]
 80055be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80055c0:	2b47      	cmp	r3, #71	@ 0x47
 80055c2:	4680      	mov	r8, r0
 80055c4:	d129      	bne.n	800561a <_printf_float+0x172>
 80055c6:	1cc8      	adds	r0, r1, #3
 80055c8:	db02      	blt.n	80055d0 <_printf_float+0x128>
 80055ca:	6863      	ldr	r3, [r4, #4]
 80055cc:	4299      	cmp	r1, r3
 80055ce:	dd41      	ble.n	8005654 <_printf_float+0x1ac>
 80055d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80055d4:	fa5f fa8a 	uxtb.w	sl, sl
 80055d8:	3901      	subs	r1, #1
 80055da:	4652      	mov	r2, sl
 80055dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80055e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80055e2:	f7ff ff27 	bl	8005434 <__exponent>
 80055e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80055e8:	1813      	adds	r3, r2, r0
 80055ea:	2a01      	cmp	r2, #1
 80055ec:	4681      	mov	r9, r0
 80055ee:	6123      	str	r3, [r4, #16]
 80055f0:	dc02      	bgt.n	80055f8 <_printf_float+0x150>
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	07d2      	lsls	r2, r2, #31
 80055f6:	d501      	bpl.n	80055fc <_printf_float+0x154>
 80055f8:	3301      	adds	r3, #1
 80055fa:	6123      	str	r3, [r4, #16]
 80055fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0a2      	beq.n	800554a <_printf_float+0xa2>
 8005604:	232d      	movs	r3, #45	@ 0x2d
 8005606:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800560a:	e79e      	b.n	800554a <_printf_float+0xa2>
 800560c:	9a06      	ldr	r2, [sp, #24]
 800560e:	2a47      	cmp	r2, #71	@ 0x47
 8005610:	d1c2      	bne.n	8005598 <_printf_float+0xf0>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1c0      	bne.n	8005598 <_printf_float+0xf0>
 8005616:	2301      	movs	r3, #1
 8005618:	e7bd      	b.n	8005596 <_printf_float+0xee>
 800561a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800561e:	d9db      	bls.n	80055d8 <_printf_float+0x130>
 8005620:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005624:	d118      	bne.n	8005658 <_printf_float+0x1b0>
 8005626:	2900      	cmp	r1, #0
 8005628:	6863      	ldr	r3, [r4, #4]
 800562a:	dd0b      	ble.n	8005644 <_printf_float+0x19c>
 800562c:	6121      	str	r1, [r4, #16]
 800562e:	b913      	cbnz	r3, 8005636 <_printf_float+0x18e>
 8005630:	6822      	ldr	r2, [r4, #0]
 8005632:	07d0      	lsls	r0, r2, #31
 8005634:	d502      	bpl.n	800563c <_printf_float+0x194>
 8005636:	3301      	adds	r3, #1
 8005638:	440b      	add	r3, r1
 800563a:	6123      	str	r3, [r4, #16]
 800563c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800563e:	f04f 0900 	mov.w	r9, #0
 8005642:	e7db      	b.n	80055fc <_printf_float+0x154>
 8005644:	b913      	cbnz	r3, 800564c <_printf_float+0x1a4>
 8005646:	6822      	ldr	r2, [r4, #0]
 8005648:	07d2      	lsls	r2, r2, #31
 800564a:	d501      	bpl.n	8005650 <_printf_float+0x1a8>
 800564c:	3302      	adds	r3, #2
 800564e:	e7f4      	b.n	800563a <_printf_float+0x192>
 8005650:	2301      	movs	r3, #1
 8005652:	e7f2      	b.n	800563a <_printf_float+0x192>
 8005654:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005658:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800565a:	4299      	cmp	r1, r3
 800565c:	db05      	blt.n	800566a <_printf_float+0x1c2>
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	6121      	str	r1, [r4, #16]
 8005662:	07d8      	lsls	r0, r3, #31
 8005664:	d5ea      	bpl.n	800563c <_printf_float+0x194>
 8005666:	1c4b      	adds	r3, r1, #1
 8005668:	e7e7      	b.n	800563a <_printf_float+0x192>
 800566a:	2900      	cmp	r1, #0
 800566c:	bfd4      	ite	le
 800566e:	f1c1 0202 	rsble	r2, r1, #2
 8005672:	2201      	movgt	r2, #1
 8005674:	4413      	add	r3, r2
 8005676:	e7e0      	b.n	800563a <_printf_float+0x192>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	055a      	lsls	r2, r3, #21
 800567c:	d407      	bmi.n	800568e <_printf_float+0x1e6>
 800567e:	6923      	ldr	r3, [r4, #16]
 8005680:	4642      	mov	r2, r8
 8005682:	4631      	mov	r1, r6
 8005684:	4628      	mov	r0, r5
 8005686:	47b8      	blx	r7
 8005688:	3001      	adds	r0, #1
 800568a:	d12b      	bne.n	80056e4 <_printf_float+0x23c>
 800568c:	e767      	b.n	800555e <_printf_float+0xb6>
 800568e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005692:	f240 80dd 	bls.w	8005850 <_printf_float+0x3a8>
 8005696:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800569a:	2200      	movs	r2, #0
 800569c:	2300      	movs	r3, #0
 800569e:	f7fb fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d033      	beq.n	800570e <_printf_float+0x266>
 80056a6:	4a37      	ldr	r2, [pc, #220]	@ (8005784 <_printf_float+0x2dc>)
 80056a8:	2301      	movs	r3, #1
 80056aa:	4631      	mov	r1, r6
 80056ac:	4628      	mov	r0, r5
 80056ae:	47b8      	blx	r7
 80056b0:	3001      	adds	r0, #1
 80056b2:	f43f af54 	beq.w	800555e <_printf_float+0xb6>
 80056b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80056ba:	4543      	cmp	r3, r8
 80056bc:	db02      	blt.n	80056c4 <_printf_float+0x21c>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	07d8      	lsls	r0, r3, #31
 80056c2:	d50f      	bpl.n	80056e4 <_printf_float+0x23c>
 80056c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056c8:	4631      	mov	r1, r6
 80056ca:	4628      	mov	r0, r5
 80056cc:	47b8      	blx	r7
 80056ce:	3001      	adds	r0, #1
 80056d0:	f43f af45 	beq.w	800555e <_printf_float+0xb6>
 80056d4:	f04f 0900 	mov.w	r9, #0
 80056d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80056dc:	f104 0a1a 	add.w	sl, r4, #26
 80056e0:	45c8      	cmp	r8, r9
 80056e2:	dc09      	bgt.n	80056f8 <_printf_float+0x250>
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	079b      	lsls	r3, r3, #30
 80056e8:	f100 8103 	bmi.w	80058f2 <_printf_float+0x44a>
 80056ec:	68e0      	ldr	r0, [r4, #12]
 80056ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056f0:	4298      	cmp	r0, r3
 80056f2:	bfb8      	it	lt
 80056f4:	4618      	movlt	r0, r3
 80056f6:	e734      	b.n	8005562 <_printf_float+0xba>
 80056f8:	2301      	movs	r3, #1
 80056fa:	4652      	mov	r2, sl
 80056fc:	4631      	mov	r1, r6
 80056fe:	4628      	mov	r0, r5
 8005700:	47b8      	blx	r7
 8005702:	3001      	adds	r0, #1
 8005704:	f43f af2b 	beq.w	800555e <_printf_float+0xb6>
 8005708:	f109 0901 	add.w	r9, r9, #1
 800570c:	e7e8      	b.n	80056e0 <_printf_float+0x238>
 800570e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005710:	2b00      	cmp	r3, #0
 8005712:	dc39      	bgt.n	8005788 <_printf_float+0x2e0>
 8005714:	4a1b      	ldr	r2, [pc, #108]	@ (8005784 <_printf_float+0x2dc>)
 8005716:	2301      	movs	r3, #1
 8005718:	4631      	mov	r1, r6
 800571a:	4628      	mov	r0, r5
 800571c:	47b8      	blx	r7
 800571e:	3001      	adds	r0, #1
 8005720:	f43f af1d 	beq.w	800555e <_printf_float+0xb6>
 8005724:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005728:	ea59 0303 	orrs.w	r3, r9, r3
 800572c:	d102      	bne.n	8005734 <_printf_float+0x28c>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	07d9      	lsls	r1, r3, #31
 8005732:	d5d7      	bpl.n	80056e4 <_printf_float+0x23c>
 8005734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005738:	4631      	mov	r1, r6
 800573a:	4628      	mov	r0, r5
 800573c:	47b8      	blx	r7
 800573e:	3001      	adds	r0, #1
 8005740:	f43f af0d 	beq.w	800555e <_printf_float+0xb6>
 8005744:	f04f 0a00 	mov.w	sl, #0
 8005748:	f104 0b1a 	add.w	fp, r4, #26
 800574c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800574e:	425b      	negs	r3, r3
 8005750:	4553      	cmp	r3, sl
 8005752:	dc01      	bgt.n	8005758 <_printf_float+0x2b0>
 8005754:	464b      	mov	r3, r9
 8005756:	e793      	b.n	8005680 <_printf_float+0x1d8>
 8005758:	2301      	movs	r3, #1
 800575a:	465a      	mov	r2, fp
 800575c:	4631      	mov	r1, r6
 800575e:	4628      	mov	r0, r5
 8005760:	47b8      	blx	r7
 8005762:	3001      	adds	r0, #1
 8005764:	f43f aefb 	beq.w	800555e <_printf_float+0xb6>
 8005768:	f10a 0a01 	add.w	sl, sl, #1
 800576c:	e7ee      	b.n	800574c <_printf_float+0x2a4>
 800576e:	bf00      	nop
 8005770:	7fefffff 	.word	0x7fefffff
 8005774:	08007e88 	.word	0x08007e88
 8005778:	08007e8c 	.word	0x08007e8c
 800577c:	08007e90 	.word	0x08007e90
 8005780:	08007e94 	.word	0x08007e94
 8005784:	08007e98 	.word	0x08007e98
 8005788:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800578a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800578e:	4553      	cmp	r3, sl
 8005790:	bfa8      	it	ge
 8005792:	4653      	movge	r3, sl
 8005794:	2b00      	cmp	r3, #0
 8005796:	4699      	mov	r9, r3
 8005798:	dc36      	bgt.n	8005808 <_printf_float+0x360>
 800579a:	f04f 0b00 	mov.w	fp, #0
 800579e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057a2:	f104 021a 	add.w	r2, r4, #26
 80057a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057a8:	9306      	str	r3, [sp, #24]
 80057aa:	eba3 0309 	sub.w	r3, r3, r9
 80057ae:	455b      	cmp	r3, fp
 80057b0:	dc31      	bgt.n	8005816 <_printf_float+0x36e>
 80057b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057b4:	459a      	cmp	sl, r3
 80057b6:	dc3a      	bgt.n	800582e <_printf_float+0x386>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	07da      	lsls	r2, r3, #31
 80057bc:	d437      	bmi.n	800582e <_printf_float+0x386>
 80057be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c0:	ebaa 0903 	sub.w	r9, sl, r3
 80057c4:	9b06      	ldr	r3, [sp, #24]
 80057c6:	ebaa 0303 	sub.w	r3, sl, r3
 80057ca:	4599      	cmp	r9, r3
 80057cc:	bfa8      	it	ge
 80057ce:	4699      	movge	r9, r3
 80057d0:	f1b9 0f00 	cmp.w	r9, #0
 80057d4:	dc33      	bgt.n	800583e <_printf_float+0x396>
 80057d6:	f04f 0800 	mov.w	r8, #0
 80057da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057de:	f104 0b1a 	add.w	fp, r4, #26
 80057e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e4:	ebaa 0303 	sub.w	r3, sl, r3
 80057e8:	eba3 0309 	sub.w	r3, r3, r9
 80057ec:	4543      	cmp	r3, r8
 80057ee:	f77f af79 	ble.w	80056e4 <_printf_float+0x23c>
 80057f2:	2301      	movs	r3, #1
 80057f4:	465a      	mov	r2, fp
 80057f6:	4631      	mov	r1, r6
 80057f8:	4628      	mov	r0, r5
 80057fa:	47b8      	blx	r7
 80057fc:	3001      	adds	r0, #1
 80057fe:	f43f aeae 	beq.w	800555e <_printf_float+0xb6>
 8005802:	f108 0801 	add.w	r8, r8, #1
 8005806:	e7ec      	b.n	80057e2 <_printf_float+0x33a>
 8005808:	4642      	mov	r2, r8
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	d1c2      	bne.n	800579a <_printf_float+0x2f2>
 8005814:	e6a3      	b.n	800555e <_printf_float+0xb6>
 8005816:	2301      	movs	r3, #1
 8005818:	4631      	mov	r1, r6
 800581a:	4628      	mov	r0, r5
 800581c:	9206      	str	r2, [sp, #24]
 800581e:	47b8      	blx	r7
 8005820:	3001      	adds	r0, #1
 8005822:	f43f ae9c 	beq.w	800555e <_printf_float+0xb6>
 8005826:	9a06      	ldr	r2, [sp, #24]
 8005828:	f10b 0b01 	add.w	fp, fp, #1
 800582c:	e7bb      	b.n	80057a6 <_printf_float+0x2fe>
 800582e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005832:	4631      	mov	r1, r6
 8005834:	4628      	mov	r0, r5
 8005836:	47b8      	blx	r7
 8005838:	3001      	adds	r0, #1
 800583a:	d1c0      	bne.n	80057be <_printf_float+0x316>
 800583c:	e68f      	b.n	800555e <_printf_float+0xb6>
 800583e:	9a06      	ldr	r2, [sp, #24]
 8005840:	464b      	mov	r3, r9
 8005842:	4442      	add	r2, r8
 8005844:	4631      	mov	r1, r6
 8005846:	4628      	mov	r0, r5
 8005848:	47b8      	blx	r7
 800584a:	3001      	adds	r0, #1
 800584c:	d1c3      	bne.n	80057d6 <_printf_float+0x32e>
 800584e:	e686      	b.n	800555e <_printf_float+0xb6>
 8005850:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005854:	f1ba 0f01 	cmp.w	sl, #1
 8005858:	dc01      	bgt.n	800585e <_printf_float+0x3b6>
 800585a:	07db      	lsls	r3, r3, #31
 800585c:	d536      	bpl.n	80058cc <_printf_float+0x424>
 800585e:	2301      	movs	r3, #1
 8005860:	4642      	mov	r2, r8
 8005862:	4631      	mov	r1, r6
 8005864:	4628      	mov	r0, r5
 8005866:	47b8      	blx	r7
 8005868:	3001      	adds	r0, #1
 800586a:	f43f ae78 	beq.w	800555e <_printf_float+0xb6>
 800586e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005872:	4631      	mov	r1, r6
 8005874:	4628      	mov	r0, r5
 8005876:	47b8      	blx	r7
 8005878:	3001      	adds	r0, #1
 800587a:	f43f ae70 	beq.w	800555e <_printf_float+0xb6>
 800587e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005882:	2200      	movs	r2, #0
 8005884:	2300      	movs	r3, #0
 8005886:	f10a 3aff 	add.w	sl, sl, #4294967295
 800588a:	f7fb f91d 	bl	8000ac8 <__aeabi_dcmpeq>
 800588e:	b9c0      	cbnz	r0, 80058c2 <_printf_float+0x41a>
 8005890:	4653      	mov	r3, sl
 8005892:	f108 0201 	add.w	r2, r8, #1
 8005896:	4631      	mov	r1, r6
 8005898:	4628      	mov	r0, r5
 800589a:	47b8      	blx	r7
 800589c:	3001      	adds	r0, #1
 800589e:	d10c      	bne.n	80058ba <_printf_float+0x412>
 80058a0:	e65d      	b.n	800555e <_printf_float+0xb6>
 80058a2:	2301      	movs	r3, #1
 80058a4:	465a      	mov	r2, fp
 80058a6:	4631      	mov	r1, r6
 80058a8:	4628      	mov	r0, r5
 80058aa:	47b8      	blx	r7
 80058ac:	3001      	adds	r0, #1
 80058ae:	f43f ae56 	beq.w	800555e <_printf_float+0xb6>
 80058b2:	f108 0801 	add.w	r8, r8, #1
 80058b6:	45d0      	cmp	r8, sl
 80058b8:	dbf3      	blt.n	80058a2 <_printf_float+0x3fa>
 80058ba:	464b      	mov	r3, r9
 80058bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80058c0:	e6df      	b.n	8005682 <_printf_float+0x1da>
 80058c2:	f04f 0800 	mov.w	r8, #0
 80058c6:	f104 0b1a 	add.w	fp, r4, #26
 80058ca:	e7f4      	b.n	80058b6 <_printf_float+0x40e>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4642      	mov	r2, r8
 80058d0:	e7e1      	b.n	8005896 <_printf_float+0x3ee>
 80058d2:	2301      	movs	r3, #1
 80058d4:	464a      	mov	r2, r9
 80058d6:	4631      	mov	r1, r6
 80058d8:	4628      	mov	r0, r5
 80058da:	47b8      	blx	r7
 80058dc:	3001      	adds	r0, #1
 80058de:	f43f ae3e 	beq.w	800555e <_printf_float+0xb6>
 80058e2:	f108 0801 	add.w	r8, r8, #1
 80058e6:	68e3      	ldr	r3, [r4, #12]
 80058e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80058ea:	1a5b      	subs	r3, r3, r1
 80058ec:	4543      	cmp	r3, r8
 80058ee:	dcf0      	bgt.n	80058d2 <_printf_float+0x42a>
 80058f0:	e6fc      	b.n	80056ec <_printf_float+0x244>
 80058f2:	f04f 0800 	mov.w	r8, #0
 80058f6:	f104 0919 	add.w	r9, r4, #25
 80058fa:	e7f4      	b.n	80058e6 <_printf_float+0x43e>

080058fc <_printf_common>:
 80058fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005900:	4616      	mov	r6, r2
 8005902:	4698      	mov	r8, r3
 8005904:	688a      	ldr	r2, [r1, #8]
 8005906:	690b      	ldr	r3, [r1, #16]
 8005908:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800590c:	4293      	cmp	r3, r2
 800590e:	bfb8      	it	lt
 8005910:	4613      	movlt	r3, r2
 8005912:	6033      	str	r3, [r6, #0]
 8005914:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005918:	4607      	mov	r7, r0
 800591a:	460c      	mov	r4, r1
 800591c:	b10a      	cbz	r2, 8005922 <_printf_common+0x26>
 800591e:	3301      	adds	r3, #1
 8005920:	6033      	str	r3, [r6, #0]
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	0699      	lsls	r1, r3, #26
 8005926:	bf42      	ittt	mi
 8005928:	6833      	ldrmi	r3, [r6, #0]
 800592a:	3302      	addmi	r3, #2
 800592c:	6033      	strmi	r3, [r6, #0]
 800592e:	6825      	ldr	r5, [r4, #0]
 8005930:	f015 0506 	ands.w	r5, r5, #6
 8005934:	d106      	bne.n	8005944 <_printf_common+0x48>
 8005936:	f104 0a19 	add.w	sl, r4, #25
 800593a:	68e3      	ldr	r3, [r4, #12]
 800593c:	6832      	ldr	r2, [r6, #0]
 800593e:	1a9b      	subs	r3, r3, r2
 8005940:	42ab      	cmp	r3, r5
 8005942:	dc26      	bgt.n	8005992 <_printf_common+0x96>
 8005944:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005948:	6822      	ldr	r2, [r4, #0]
 800594a:	3b00      	subs	r3, #0
 800594c:	bf18      	it	ne
 800594e:	2301      	movne	r3, #1
 8005950:	0692      	lsls	r2, r2, #26
 8005952:	d42b      	bmi.n	80059ac <_printf_common+0xb0>
 8005954:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005958:	4641      	mov	r1, r8
 800595a:	4638      	mov	r0, r7
 800595c:	47c8      	blx	r9
 800595e:	3001      	adds	r0, #1
 8005960:	d01e      	beq.n	80059a0 <_printf_common+0xa4>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	6922      	ldr	r2, [r4, #16]
 8005966:	f003 0306 	and.w	r3, r3, #6
 800596a:	2b04      	cmp	r3, #4
 800596c:	bf02      	ittt	eq
 800596e:	68e5      	ldreq	r5, [r4, #12]
 8005970:	6833      	ldreq	r3, [r6, #0]
 8005972:	1aed      	subeq	r5, r5, r3
 8005974:	68a3      	ldr	r3, [r4, #8]
 8005976:	bf0c      	ite	eq
 8005978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800597c:	2500      	movne	r5, #0
 800597e:	4293      	cmp	r3, r2
 8005980:	bfc4      	itt	gt
 8005982:	1a9b      	subgt	r3, r3, r2
 8005984:	18ed      	addgt	r5, r5, r3
 8005986:	2600      	movs	r6, #0
 8005988:	341a      	adds	r4, #26
 800598a:	42b5      	cmp	r5, r6
 800598c:	d11a      	bne.n	80059c4 <_printf_common+0xc8>
 800598e:	2000      	movs	r0, #0
 8005990:	e008      	b.n	80059a4 <_printf_common+0xa8>
 8005992:	2301      	movs	r3, #1
 8005994:	4652      	mov	r2, sl
 8005996:	4641      	mov	r1, r8
 8005998:	4638      	mov	r0, r7
 800599a:	47c8      	blx	r9
 800599c:	3001      	adds	r0, #1
 800599e:	d103      	bne.n	80059a8 <_printf_common+0xac>
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295
 80059a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a8:	3501      	adds	r5, #1
 80059aa:	e7c6      	b.n	800593a <_printf_common+0x3e>
 80059ac:	18e1      	adds	r1, r4, r3
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	2030      	movs	r0, #48	@ 0x30
 80059b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059b6:	4422      	add	r2, r4
 80059b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059c0:	3302      	adds	r3, #2
 80059c2:	e7c7      	b.n	8005954 <_printf_common+0x58>
 80059c4:	2301      	movs	r3, #1
 80059c6:	4622      	mov	r2, r4
 80059c8:	4641      	mov	r1, r8
 80059ca:	4638      	mov	r0, r7
 80059cc:	47c8      	blx	r9
 80059ce:	3001      	adds	r0, #1
 80059d0:	d0e6      	beq.n	80059a0 <_printf_common+0xa4>
 80059d2:	3601      	adds	r6, #1
 80059d4:	e7d9      	b.n	800598a <_printf_common+0x8e>
	...

080059d8 <_printf_i>:
 80059d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059dc:	7e0f      	ldrb	r7, [r1, #24]
 80059de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059e0:	2f78      	cmp	r7, #120	@ 0x78
 80059e2:	4691      	mov	r9, r2
 80059e4:	4680      	mov	r8, r0
 80059e6:	460c      	mov	r4, r1
 80059e8:	469a      	mov	sl, r3
 80059ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059ee:	d807      	bhi.n	8005a00 <_printf_i+0x28>
 80059f0:	2f62      	cmp	r7, #98	@ 0x62
 80059f2:	d80a      	bhi.n	8005a0a <_printf_i+0x32>
 80059f4:	2f00      	cmp	r7, #0
 80059f6:	f000 80d2 	beq.w	8005b9e <_printf_i+0x1c6>
 80059fa:	2f58      	cmp	r7, #88	@ 0x58
 80059fc:	f000 80b9 	beq.w	8005b72 <_printf_i+0x19a>
 8005a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a08:	e03a      	b.n	8005a80 <_printf_i+0xa8>
 8005a0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a0e:	2b15      	cmp	r3, #21
 8005a10:	d8f6      	bhi.n	8005a00 <_printf_i+0x28>
 8005a12:	a101      	add	r1, pc, #4	@ (adr r1, 8005a18 <_printf_i+0x40>)
 8005a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a18:	08005a71 	.word	0x08005a71
 8005a1c:	08005a85 	.word	0x08005a85
 8005a20:	08005a01 	.word	0x08005a01
 8005a24:	08005a01 	.word	0x08005a01
 8005a28:	08005a01 	.word	0x08005a01
 8005a2c:	08005a01 	.word	0x08005a01
 8005a30:	08005a85 	.word	0x08005a85
 8005a34:	08005a01 	.word	0x08005a01
 8005a38:	08005a01 	.word	0x08005a01
 8005a3c:	08005a01 	.word	0x08005a01
 8005a40:	08005a01 	.word	0x08005a01
 8005a44:	08005b85 	.word	0x08005b85
 8005a48:	08005aaf 	.word	0x08005aaf
 8005a4c:	08005b3f 	.word	0x08005b3f
 8005a50:	08005a01 	.word	0x08005a01
 8005a54:	08005a01 	.word	0x08005a01
 8005a58:	08005ba7 	.word	0x08005ba7
 8005a5c:	08005a01 	.word	0x08005a01
 8005a60:	08005aaf 	.word	0x08005aaf
 8005a64:	08005a01 	.word	0x08005a01
 8005a68:	08005a01 	.word	0x08005a01
 8005a6c:	08005b47 	.word	0x08005b47
 8005a70:	6833      	ldr	r3, [r6, #0]
 8005a72:	1d1a      	adds	r2, r3, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6032      	str	r2, [r6, #0]
 8005a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a80:	2301      	movs	r3, #1
 8005a82:	e09d      	b.n	8005bc0 <_printf_i+0x1e8>
 8005a84:	6833      	ldr	r3, [r6, #0]
 8005a86:	6820      	ldr	r0, [r4, #0]
 8005a88:	1d19      	adds	r1, r3, #4
 8005a8a:	6031      	str	r1, [r6, #0]
 8005a8c:	0606      	lsls	r6, r0, #24
 8005a8e:	d501      	bpl.n	8005a94 <_printf_i+0xbc>
 8005a90:	681d      	ldr	r5, [r3, #0]
 8005a92:	e003      	b.n	8005a9c <_printf_i+0xc4>
 8005a94:	0645      	lsls	r5, r0, #25
 8005a96:	d5fb      	bpl.n	8005a90 <_printf_i+0xb8>
 8005a98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a9c:	2d00      	cmp	r5, #0
 8005a9e:	da03      	bge.n	8005aa8 <_printf_i+0xd0>
 8005aa0:	232d      	movs	r3, #45	@ 0x2d
 8005aa2:	426d      	negs	r5, r5
 8005aa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005aa8:	4859      	ldr	r0, [pc, #356]	@ (8005c10 <_printf_i+0x238>)
 8005aaa:	230a      	movs	r3, #10
 8005aac:	e011      	b.n	8005ad2 <_printf_i+0xfa>
 8005aae:	6821      	ldr	r1, [r4, #0]
 8005ab0:	6833      	ldr	r3, [r6, #0]
 8005ab2:	0608      	lsls	r0, r1, #24
 8005ab4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ab8:	d402      	bmi.n	8005ac0 <_printf_i+0xe8>
 8005aba:	0649      	lsls	r1, r1, #25
 8005abc:	bf48      	it	mi
 8005abe:	b2ad      	uxthmi	r5, r5
 8005ac0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ac2:	4853      	ldr	r0, [pc, #332]	@ (8005c10 <_printf_i+0x238>)
 8005ac4:	6033      	str	r3, [r6, #0]
 8005ac6:	bf14      	ite	ne
 8005ac8:	230a      	movne	r3, #10
 8005aca:	2308      	moveq	r3, #8
 8005acc:	2100      	movs	r1, #0
 8005ace:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ad2:	6866      	ldr	r6, [r4, #4]
 8005ad4:	60a6      	str	r6, [r4, #8]
 8005ad6:	2e00      	cmp	r6, #0
 8005ad8:	bfa2      	ittt	ge
 8005ada:	6821      	ldrge	r1, [r4, #0]
 8005adc:	f021 0104 	bicge.w	r1, r1, #4
 8005ae0:	6021      	strge	r1, [r4, #0]
 8005ae2:	b90d      	cbnz	r5, 8005ae8 <_printf_i+0x110>
 8005ae4:	2e00      	cmp	r6, #0
 8005ae6:	d04b      	beq.n	8005b80 <_printf_i+0x1a8>
 8005ae8:	4616      	mov	r6, r2
 8005aea:	fbb5 f1f3 	udiv	r1, r5, r3
 8005aee:	fb03 5711 	mls	r7, r3, r1, r5
 8005af2:	5dc7      	ldrb	r7, [r0, r7]
 8005af4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005af8:	462f      	mov	r7, r5
 8005afa:	42bb      	cmp	r3, r7
 8005afc:	460d      	mov	r5, r1
 8005afe:	d9f4      	bls.n	8005aea <_printf_i+0x112>
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d10b      	bne.n	8005b1c <_printf_i+0x144>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	07df      	lsls	r7, r3, #31
 8005b08:	d508      	bpl.n	8005b1c <_printf_i+0x144>
 8005b0a:	6923      	ldr	r3, [r4, #16]
 8005b0c:	6861      	ldr	r1, [r4, #4]
 8005b0e:	4299      	cmp	r1, r3
 8005b10:	bfde      	ittt	le
 8005b12:	2330      	movle	r3, #48	@ 0x30
 8005b14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b1c:	1b92      	subs	r2, r2, r6
 8005b1e:	6122      	str	r2, [r4, #16]
 8005b20:	f8cd a000 	str.w	sl, [sp]
 8005b24:	464b      	mov	r3, r9
 8005b26:	aa03      	add	r2, sp, #12
 8005b28:	4621      	mov	r1, r4
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	f7ff fee6 	bl	80058fc <_printf_common>
 8005b30:	3001      	adds	r0, #1
 8005b32:	d14a      	bne.n	8005bca <_printf_i+0x1f2>
 8005b34:	f04f 30ff 	mov.w	r0, #4294967295
 8005b38:	b004      	add	sp, #16
 8005b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	f043 0320 	orr.w	r3, r3, #32
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	4833      	ldr	r0, [pc, #204]	@ (8005c14 <_printf_i+0x23c>)
 8005b48:	2778      	movs	r7, #120	@ 0x78
 8005b4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	6831      	ldr	r1, [r6, #0]
 8005b52:	061f      	lsls	r7, r3, #24
 8005b54:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b58:	d402      	bmi.n	8005b60 <_printf_i+0x188>
 8005b5a:	065f      	lsls	r7, r3, #25
 8005b5c:	bf48      	it	mi
 8005b5e:	b2ad      	uxthmi	r5, r5
 8005b60:	6031      	str	r1, [r6, #0]
 8005b62:	07d9      	lsls	r1, r3, #31
 8005b64:	bf44      	itt	mi
 8005b66:	f043 0320 	orrmi.w	r3, r3, #32
 8005b6a:	6023      	strmi	r3, [r4, #0]
 8005b6c:	b11d      	cbz	r5, 8005b76 <_printf_i+0x19e>
 8005b6e:	2310      	movs	r3, #16
 8005b70:	e7ac      	b.n	8005acc <_printf_i+0xf4>
 8005b72:	4827      	ldr	r0, [pc, #156]	@ (8005c10 <_printf_i+0x238>)
 8005b74:	e7e9      	b.n	8005b4a <_printf_i+0x172>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	f023 0320 	bic.w	r3, r3, #32
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	e7f6      	b.n	8005b6e <_printf_i+0x196>
 8005b80:	4616      	mov	r6, r2
 8005b82:	e7bd      	b.n	8005b00 <_printf_i+0x128>
 8005b84:	6833      	ldr	r3, [r6, #0]
 8005b86:	6825      	ldr	r5, [r4, #0]
 8005b88:	6961      	ldr	r1, [r4, #20]
 8005b8a:	1d18      	adds	r0, r3, #4
 8005b8c:	6030      	str	r0, [r6, #0]
 8005b8e:	062e      	lsls	r6, r5, #24
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	d501      	bpl.n	8005b98 <_printf_i+0x1c0>
 8005b94:	6019      	str	r1, [r3, #0]
 8005b96:	e002      	b.n	8005b9e <_printf_i+0x1c6>
 8005b98:	0668      	lsls	r0, r5, #25
 8005b9a:	d5fb      	bpl.n	8005b94 <_printf_i+0x1bc>
 8005b9c:	8019      	strh	r1, [r3, #0]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	6123      	str	r3, [r4, #16]
 8005ba2:	4616      	mov	r6, r2
 8005ba4:	e7bc      	b.n	8005b20 <_printf_i+0x148>
 8005ba6:	6833      	ldr	r3, [r6, #0]
 8005ba8:	1d1a      	adds	r2, r3, #4
 8005baa:	6032      	str	r2, [r6, #0]
 8005bac:	681e      	ldr	r6, [r3, #0]
 8005bae:	6862      	ldr	r2, [r4, #4]
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	f7fa fb0c 	bl	80001d0 <memchr>
 8005bb8:	b108      	cbz	r0, 8005bbe <_printf_i+0x1e6>
 8005bba:	1b80      	subs	r0, r0, r6
 8005bbc:	6060      	str	r0, [r4, #4]
 8005bbe:	6863      	ldr	r3, [r4, #4]
 8005bc0:	6123      	str	r3, [r4, #16]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bc8:	e7aa      	b.n	8005b20 <_printf_i+0x148>
 8005bca:	6923      	ldr	r3, [r4, #16]
 8005bcc:	4632      	mov	r2, r6
 8005bce:	4649      	mov	r1, r9
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	47d0      	blx	sl
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d0ad      	beq.n	8005b34 <_printf_i+0x15c>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	079b      	lsls	r3, r3, #30
 8005bdc:	d413      	bmi.n	8005c06 <_printf_i+0x22e>
 8005bde:	68e0      	ldr	r0, [r4, #12]
 8005be0:	9b03      	ldr	r3, [sp, #12]
 8005be2:	4298      	cmp	r0, r3
 8005be4:	bfb8      	it	lt
 8005be6:	4618      	movlt	r0, r3
 8005be8:	e7a6      	b.n	8005b38 <_printf_i+0x160>
 8005bea:	2301      	movs	r3, #1
 8005bec:	4632      	mov	r2, r6
 8005bee:	4649      	mov	r1, r9
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	47d0      	blx	sl
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d09d      	beq.n	8005b34 <_printf_i+0x15c>
 8005bf8:	3501      	adds	r5, #1
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	9903      	ldr	r1, [sp, #12]
 8005bfe:	1a5b      	subs	r3, r3, r1
 8005c00:	42ab      	cmp	r3, r5
 8005c02:	dcf2      	bgt.n	8005bea <_printf_i+0x212>
 8005c04:	e7eb      	b.n	8005bde <_printf_i+0x206>
 8005c06:	2500      	movs	r5, #0
 8005c08:	f104 0619 	add.w	r6, r4, #25
 8005c0c:	e7f5      	b.n	8005bfa <_printf_i+0x222>
 8005c0e:	bf00      	nop
 8005c10:	08007e9a 	.word	0x08007e9a
 8005c14:	08007eab 	.word	0x08007eab

08005c18 <std>:
 8005c18:	2300      	movs	r3, #0
 8005c1a:	b510      	push	{r4, lr}
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8005c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c26:	6083      	str	r3, [r0, #8]
 8005c28:	8181      	strh	r1, [r0, #12]
 8005c2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c2c:	81c2      	strh	r2, [r0, #14]
 8005c2e:	6183      	str	r3, [r0, #24]
 8005c30:	4619      	mov	r1, r3
 8005c32:	2208      	movs	r2, #8
 8005c34:	305c      	adds	r0, #92	@ 0x5c
 8005c36:	f000 f9c2 	bl	8005fbe <memset>
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c70 <std+0x58>)
 8005c3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c74 <std+0x5c>)
 8005c40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c42:	4b0d      	ldr	r3, [pc, #52]	@ (8005c78 <std+0x60>)
 8005c44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c46:	4b0d      	ldr	r3, [pc, #52]	@ (8005c7c <std+0x64>)
 8005c48:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c80 <std+0x68>)
 8005c4c:	6224      	str	r4, [r4, #32]
 8005c4e:	429c      	cmp	r4, r3
 8005c50:	d006      	beq.n	8005c60 <std+0x48>
 8005c52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c56:	4294      	cmp	r4, r2
 8005c58:	d002      	beq.n	8005c60 <std+0x48>
 8005c5a:	33d0      	adds	r3, #208	@ 0xd0
 8005c5c:	429c      	cmp	r4, r3
 8005c5e:	d105      	bne.n	8005c6c <std+0x54>
 8005c60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c68:	f000 ba26 	b.w	80060b8 <__retarget_lock_init_recursive>
 8005c6c:	bd10      	pop	{r4, pc}
 8005c6e:	bf00      	nop
 8005c70:	08005f39 	.word	0x08005f39
 8005c74:	08005f5b 	.word	0x08005f5b
 8005c78:	08005f93 	.word	0x08005f93
 8005c7c:	08005fb7 	.word	0x08005fb7
 8005c80:	200003bc 	.word	0x200003bc

08005c84 <stdio_exit_handler>:
 8005c84:	4a02      	ldr	r2, [pc, #8]	@ (8005c90 <stdio_exit_handler+0xc>)
 8005c86:	4903      	ldr	r1, [pc, #12]	@ (8005c94 <stdio_exit_handler+0x10>)
 8005c88:	4803      	ldr	r0, [pc, #12]	@ (8005c98 <stdio_exit_handler+0x14>)
 8005c8a:	f000 b869 	b.w	8005d60 <_fwalk_sglue>
 8005c8e:	bf00      	nop
 8005c90:	2000002c 	.word	0x2000002c
 8005c94:	080079e9 	.word	0x080079e9
 8005c98:	2000003c 	.word	0x2000003c

08005c9c <cleanup_stdio>:
 8005c9c:	6841      	ldr	r1, [r0, #4]
 8005c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd0 <cleanup_stdio+0x34>)
 8005ca0:	4299      	cmp	r1, r3
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	d001      	beq.n	8005cac <cleanup_stdio+0x10>
 8005ca8:	f001 fe9e 	bl	80079e8 <_fflush_r>
 8005cac:	68a1      	ldr	r1, [r4, #8]
 8005cae:	4b09      	ldr	r3, [pc, #36]	@ (8005cd4 <cleanup_stdio+0x38>)
 8005cb0:	4299      	cmp	r1, r3
 8005cb2:	d002      	beq.n	8005cba <cleanup_stdio+0x1e>
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f001 fe97 	bl	80079e8 <_fflush_r>
 8005cba:	68e1      	ldr	r1, [r4, #12]
 8005cbc:	4b06      	ldr	r3, [pc, #24]	@ (8005cd8 <cleanup_stdio+0x3c>)
 8005cbe:	4299      	cmp	r1, r3
 8005cc0:	d004      	beq.n	8005ccc <cleanup_stdio+0x30>
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc8:	f001 be8e 	b.w	80079e8 <_fflush_r>
 8005ccc:	bd10      	pop	{r4, pc}
 8005cce:	bf00      	nop
 8005cd0:	200003bc 	.word	0x200003bc
 8005cd4:	20000424 	.word	0x20000424
 8005cd8:	2000048c 	.word	0x2000048c

08005cdc <global_stdio_init.part.0>:
 8005cdc:	b510      	push	{r4, lr}
 8005cde:	4b0b      	ldr	r3, [pc, #44]	@ (8005d0c <global_stdio_init.part.0+0x30>)
 8005ce0:	4c0b      	ldr	r4, [pc, #44]	@ (8005d10 <global_stdio_init.part.0+0x34>)
 8005ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8005d14 <global_stdio_init.part.0+0x38>)
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2104      	movs	r1, #4
 8005cec:	f7ff ff94 	bl	8005c18 <std>
 8005cf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	2109      	movs	r1, #9
 8005cf8:	f7ff ff8e 	bl	8005c18 <std>
 8005cfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d00:	2202      	movs	r2, #2
 8005d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d06:	2112      	movs	r1, #18
 8005d08:	f7ff bf86 	b.w	8005c18 <std>
 8005d0c:	200004f4 	.word	0x200004f4
 8005d10:	200003bc 	.word	0x200003bc
 8005d14:	08005c85 	.word	0x08005c85

08005d18 <__sfp_lock_acquire>:
 8005d18:	4801      	ldr	r0, [pc, #4]	@ (8005d20 <__sfp_lock_acquire+0x8>)
 8005d1a:	f000 b9ce 	b.w	80060ba <__retarget_lock_acquire_recursive>
 8005d1e:	bf00      	nop
 8005d20:	200004fd 	.word	0x200004fd

08005d24 <__sfp_lock_release>:
 8005d24:	4801      	ldr	r0, [pc, #4]	@ (8005d2c <__sfp_lock_release+0x8>)
 8005d26:	f000 b9c9 	b.w	80060bc <__retarget_lock_release_recursive>
 8005d2a:	bf00      	nop
 8005d2c:	200004fd 	.word	0x200004fd

08005d30 <__sinit>:
 8005d30:	b510      	push	{r4, lr}
 8005d32:	4604      	mov	r4, r0
 8005d34:	f7ff fff0 	bl	8005d18 <__sfp_lock_acquire>
 8005d38:	6a23      	ldr	r3, [r4, #32]
 8005d3a:	b11b      	cbz	r3, 8005d44 <__sinit+0x14>
 8005d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d40:	f7ff bff0 	b.w	8005d24 <__sfp_lock_release>
 8005d44:	4b04      	ldr	r3, [pc, #16]	@ (8005d58 <__sinit+0x28>)
 8005d46:	6223      	str	r3, [r4, #32]
 8005d48:	4b04      	ldr	r3, [pc, #16]	@ (8005d5c <__sinit+0x2c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1f5      	bne.n	8005d3c <__sinit+0xc>
 8005d50:	f7ff ffc4 	bl	8005cdc <global_stdio_init.part.0>
 8005d54:	e7f2      	b.n	8005d3c <__sinit+0xc>
 8005d56:	bf00      	nop
 8005d58:	08005c9d 	.word	0x08005c9d
 8005d5c:	200004f4 	.word	0x200004f4

08005d60 <_fwalk_sglue>:
 8005d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d64:	4607      	mov	r7, r0
 8005d66:	4688      	mov	r8, r1
 8005d68:	4614      	mov	r4, r2
 8005d6a:	2600      	movs	r6, #0
 8005d6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d70:	f1b9 0901 	subs.w	r9, r9, #1
 8005d74:	d505      	bpl.n	8005d82 <_fwalk_sglue+0x22>
 8005d76:	6824      	ldr	r4, [r4, #0]
 8005d78:	2c00      	cmp	r4, #0
 8005d7a:	d1f7      	bne.n	8005d6c <_fwalk_sglue+0xc>
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d82:	89ab      	ldrh	r3, [r5, #12]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d907      	bls.n	8005d98 <_fwalk_sglue+0x38>
 8005d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	d003      	beq.n	8005d98 <_fwalk_sglue+0x38>
 8005d90:	4629      	mov	r1, r5
 8005d92:	4638      	mov	r0, r7
 8005d94:	47c0      	blx	r8
 8005d96:	4306      	orrs	r6, r0
 8005d98:	3568      	adds	r5, #104	@ 0x68
 8005d9a:	e7e9      	b.n	8005d70 <_fwalk_sglue+0x10>

08005d9c <iprintf>:
 8005d9c:	b40f      	push	{r0, r1, r2, r3}
 8005d9e:	b507      	push	{r0, r1, r2, lr}
 8005da0:	4906      	ldr	r1, [pc, #24]	@ (8005dbc <iprintf+0x20>)
 8005da2:	ab04      	add	r3, sp, #16
 8005da4:	6808      	ldr	r0, [r1, #0]
 8005da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005daa:	6881      	ldr	r1, [r0, #8]
 8005dac:	9301      	str	r3, [sp, #4]
 8005dae:	f001 fc7f 	bl	80076b0 <_vfiprintf_r>
 8005db2:	b003      	add	sp, #12
 8005db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005db8:	b004      	add	sp, #16
 8005dba:	4770      	bx	lr
 8005dbc:	20000038 	.word	0x20000038

08005dc0 <setbuf>:
 8005dc0:	fab1 f281 	clz	r2, r1
 8005dc4:	0952      	lsrs	r2, r2, #5
 8005dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dca:	0052      	lsls	r2, r2, #1
 8005dcc:	f000 b800 	b.w	8005dd0 <setvbuf>

08005dd0 <setvbuf>:
 8005dd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005dd4:	461d      	mov	r5, r3
 8005dd6:	4b57      	ldr	r3, [pc, #348]	@ (8005f34 <setvbuf+0x164>)
 8005dd8:	681f      	ldr	r7, [r3, #0]
 8005dda:	4604      	mov	r4, r0
 8005ddc:	460e      	mov	r6, r1
 8005dde:	4690      	mov	r8, r2
 8005de0:	b127      	cbz	r7, 8005dec <setvbuf+0x1c>
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	b913      	cbnz	r3, 8005dec <setvbuf+0x1c>
 8005de6:	4638      	mov	r0, r7
 8005de8:	f7ff ffa2 	bl	8005d30 <__sinit>
 8005dec:	f1b8 0f02 	cmp.w	r8, #2
 8005df0:	d006      	beq.n	8005e00 <setvbuf+0x30>
 8005df2:	f1b8 0f01 	cmp.w	r8, #1
 8005df6:	f200 809a 	bhi.w	8005f2e <setvbuf+0x15e>
 8005dfa:	2d00      	cmp	r5, #0
 8005dfc:	f2c0 8097 	blt.w	8005f2e <setvbuf+0x15e>
 8005e00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e02:	07d9      	lsls	r1, r3, #31
 8005e04:	d405      	bmi.n	8005e12 <setvbuf+0x42>
 8005e06:	89a3      	ldrh	r3, [r4, #12]
 8005e08:	059a      	lsls	r2, r3, #22
 8005e0a:	d402      	bmi.n	8005e12 <setvbuf+0x42>
 8005e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e0e:	f000 f954 	bl	80060ba <__retarget_lock_acquire_recursive>
 8005e12:	4621      	mov	r1, r4
 8005e14:	4638      	mov	r0, r7
 8005e16:	f001 fde7 	bl	80079e8 <_fflush_r>
 8005e1a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e1c:	b141      	cbz	r1, 8005e30 <setvbuf+0x60>
 8005e1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e22:	4299      	cmp	r1, r3
 8005e24:	d002      	beq.n	8005e2c <setvbuf+0x5c>
 8005e26:	4638      	mov	r0, r7
 8005e28:	f000 ff96 	bl	8006d58 <_free_r>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e30:	2300      	movs	r3, #0
 8005e32:	61a3      	str	r3, [r4, #24]
 8005e34:	6063      	str	r3, [r4, #4]
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	061b      	lsls	r3, r3, #24
 8005e3a:	d503      	bpl.n	8005e44 <setvbuf+0x74>
 8005e3c:	6921      	ldr	r1, [r4, #16]
 8005e3e:	4638      	mov	r0, r7
 8005e40:	f000 ff8a 	bl	8006d58 <_free_r>
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005e4a:	f023 0303 	bic.w	r3, r3, #3
 8005e4e:	f1b8 0f02 	cmp.w	r8, #2
 8005e52:	81a3      	strh	r3, [r4, #12]
 8005e54:	d061      	beq.n	8005f1a <setvbuf+0x14a>
 8005e56:	ab01      	add	r3, sp, #4
 8005e58:	466a      	mov	r2, sp
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	f001 fdeb 	bl	8007a38 <__swhatbuf_r>
 8005e62:	89a3      	ldrh	r3, [r4, #12]
 8005e64:	4318      	orrs	r0, r3
 8005e66:	81a0      	strh	r0, [r4, #12]
 8005e68:	bb2d      	cbnz	r5, 8005eb6 <setvbuf+0xe6>
 8005e6a:	9d00      	ldr	r5, [sp, #0]
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f000 ffbd 	bl	8006dec <malloc>
 8005e72:	4606      	mov	r6, r0
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d152      	bne.n	8005f1e <setvbuf+0x14e>
 8005e78:	f8dd 9000 	ldr.w	r9, [sp]
 8005e7c:	45a9      	cmp	r9, r5
 8005e7e:	d140      	bne.n	8005f02 <setvbuf+0x132>
 8005e80:	f04f 35ff 	mov.w	r5, #4294967295
 8005e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e88:	f043 0202 	orr.w	r2, r3, #2
 8005e8c:	81a2      	strh	r2, [r4, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	60a2      	str	r2, [r4, #8]
 8005e92:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005e96:	6022      	str	r2, [r4, #0]
 8005e98:	6122      	str	r2, [r4, #16]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	6162      	str	r2, [r4, #20]
 8005e9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ea0:	07d6      	lsls	r6, r2, #31
 8005ea2:	d404      	bmi.n	8005eae <setvbuf+0xde>
 8005ea4:	0598      	lsls	r0, r3, #22
 8005ea6:	d402      	bmi.n	8005eae <setvbuf+0xde>
 8005ea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eaa:	f000 f907 	bl	80060bc <__retarget_lock_release_recursive>
 8005eae:	4628      	mov	r0, r5
 8005eb0:	b003      	add	sp, #12
 8005eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eb6:	2e00      	cmp	r6, #0
 8005eb8:	d0d8      	beq.n	8005e6c <setvbuf+0x9c>
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	b913      	cbnz	r3, 8005ec4 <setvbuf+0xf4>
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	f7ff ff36 	bl	8005d30 <__sinit>
 8005ec4:	f1b8 0f01 	cmp.w	r8, #1
 8005ec8:	bf08      	it	eq
 8005eca:	89a3      	ldrheq	r3, [r4, #12]
 8005ecc:	6026      	str	r6, [r4, #0]
 8005ece:	bf04      	itt	eq
 8005ed0:	f043 0301 	orreq.w	r3, r3, #1
 8005ed4:	81a3      	strheq	r3, [r4, #12]
 8005ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eda:	f013 0208 	ands.w	r2, r3, #8
 8005ede:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005ee2:	d01e      	beq.n	8005f22 <setvbuf+0x152>
 8005ee4:	07d9      	lsls	r1, r3, #31
 8005ee6:	bf41      	itttt	mi
 8005ee8:	2200      	movmi	r2, #0
 8005eea:	426d      	negmi	r5, r5
 8005eec:	60a2      	strmi	r2, [r4, #8]
 8005eee:	61a5      	strmi	r5, [r4, #24]
 8005ef0:	bf58      	it	pl
 8005ef2:	60a5      	strpl	r5, [r4, #8]
 8005ef4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ef6:	07d2      	lsls	r2, r2, #31
 8005ef8:	d401      	bmi.n	8005efe <setvbuf+0x12e>
 8005efa:	059b      	lsls	r3, r3, #22
 8005efc:	d513      	bpl.n	8005f26 <setvbuf+0x156>
 8005efe:	2500      	movs	r5, #0
 8005f00:	e7d5      	b.n	8005eae <setvbuf+0xde>
 8005f02:	4648      	mov	r0, r9
 8005f04:	f000 ff72 	bl	8006dec <malloc>
 8005f08:	4606      	mov	r6, r0
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d0b8      	beq.n	8005e80 <setvbuf+0xb0>
 8005f0e:	89a3      	ldrh	r3, [r4, #12]
 8005f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f14:	81a3      	strh	r3, [r4, #12]
 8005f16:	464d      	mov	r5, r9
 8005f18:	e7cf      	b.n	8005eba <setvbuf+0xea>
 8005f1a:	2500      	movs	r5, #0
 8005f1c:	e7b2      	b.n	8005e84 <setvbuf+0xb4>
 8005f1e:	46a9      	mov	r9, r5
 8005f20:	e7f5      	b.n	8005f0e <setvbuf+0x13e>
 8005f22:	60a2      	str	r2, [r4, #8]
 8005f24:	e7e6      	b.n	8005ef4 <setvbuf+0x124>
 8005f26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f28:	f000 f8c8 	bl	80060bc <__retarget_lock_release_recursive>
 8005f2c:	e7e7      	b.n	8005efe <setvbuf+0x12e>
 8005f2e:	f04f 35ff 	mov.w	r5, #4294967295
 8005f32:	e7bc      	b.n	8005eae <setvbuf+0xde>
 8005f34:	20000038 	.word	0x20000038

08005f38 <__sread>:
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f40:	f000 f86c 	bl	800601c <_read_r>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	bfab      	itete	ge
 8005f48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f4c:	181b      	addge	r3, r3, r0
 8005f4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f52:	bfac      	ite	ge
 8005f54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f56:	81a3      	strhlt	r3, [r4, #12]
 8005f58:	bd10      	pop	{r4, pc}

08005f5a <__swrite>:
 8005f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5e:	461f      	mov	r7, r3
 8005f60:	898b      	ldrh	r3, [r1, #12]
 8005f62:	05db      	lsls	r3, r3, #23
 8005f64:	4605      	mov	r5, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	4616      	mov	r6, r2
 8005f6a:	d505      	bpl.n	8005f78 <__swrite+0x1e>
 8005f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f70:	2302      	movs	r3, #2
 8005f72:	2200      	movs	r2, #0
 8005f74:	f000 f840 	bl	8005ff8 <_lseek_r>
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f82:	81a3      	strh	r3, [r4, #12]
 8005f84:	4632      	mov	r2, r6
 8005f86:	463b      	mov	r3, r7
 8005f88:	4628      	mov	r0, r5
 8005f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f8e:	f000 b857 	b.w	8006040 <_write_r>

08005f92 <__sseek>:
 8005f92:	b510      	push	{r4, lr}
 8005f94:	460c      	mov	r4, r1
 8005f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9a:	f000 f82d 	bl	8005ff8 <_lseek_r>
 8005f9e:	1c43      	adds	r3, r0, #1
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	bf15      	itete	ne
 8005fa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005faa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005fae:	81a3      	strheq	r3, [r4, #12]
 8005fb0:	bf18      	it	ne
 8005fb2:	81a3      	strhne	r3, [r4, #12]
 8005fb4:	bd10      	pop	{r4, pc}

08005fb6 <__sclose>:
 8005fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fba:	f000 b80d 	b.w	8005fd8 <_close_r>

08005fbe <memset>:
 8005fbe:	4402      	add	r2, r0
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d100      	bne.n	8005fc8 <memset+0xa>
 8005fc6:	4770      	bx	lr
 8005fc8:	f803 1b01 	strb.w	r1, [r3], #1
 8005fcc:	e7f9      	b.n	8005fc2 <memset+0x4>
	...

08005fd0 <_localeconv_r>:
 8005fd0:	4800      	ldr	r0, [pc, #0]	@ (8005fd4 <_localeconv_r+0x4>)
 8005fd2:	4770      	bx	lr
 8005fd4:	20000178 	.word	0x20000178

08005fd8 <_close_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4d06      	ldr	r5, [pc, #24]	@ (8005ff4 <_close_r+0x1c>)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	4604      	mov	r4, r0
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	602b      	str	r3, [r5, #0]
 8005fe4:	f7fb fb78 	bl	80016d8 <_close>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d102      	bne.n	8005ff2 <_close_r+0x1a>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	b103      	cbz	r3, 8005ff2 <_close_r+0x1a>
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
 8005ff4:	200004f8 	.word	0x200004f8

08005ff8 <_lseek_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4d07      	ldr	r5, [pc, #28]	@ (8006018 <_lseek_r+0x20>)
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	4608      	mov	r0, r1
 8006000:	4611      	mov	r1, r2
 8006002:	2200      	movs	r2, #0
 8006004:	602a      	str	r2, [r5, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	f7fb fb8d 	bl	8001726 <_lseek>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_lseek_r+0x1e>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_lseek_r+0x1e>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	200004f8 	.word	0x200004f8

0800601c <_read_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4d07      	ldr	r5, [pc, #28]	@ (800603c <_read_r+0x20>)
 8006020:	4604      	mov	r4, r0
 8006022:	4608      	mov	r0, r1
 8006024:	4611      	mov	r1, r2
 8006026:	2200      	movs	r2, #0
 8006028:	602a      	str	r2, [r5, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	f7fb fb37 	bl	800169e <_read>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_read_r+0x1e>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b103      	cbz	r3, 800603a <_read_r+0x1e>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	200004f8 	.word	0x200004f8

08006040 <_write_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4d07      	ldr	r5, [pc, #28]	@ (8006060 <_write_r+0x20>)
 8006044:	4604      	mov	r4, r0
 8006046:	4608      	mov	r0, r1
 8006048:	4611      	mov	r1, r2
 800604a:	2200      	movs	r2, #0
 800604c:	602a      	str	r2, [r5, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	f7fb f948 	bl	80012e4 <_write>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_write_r+0x1e>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	b103      	cbz	r3, 800605e <_write_r+0x1e>
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	200004f8 	.word	0x200004f8

08006064 <__errno>:
 8006064:	4b01      	ldr	r3, [pc, #4]	@ (800606c <__errno+0x8>)
 8006066:	6818      	ldr	r0, [r3, #0]
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	20000038 	.word	0x20000038

08006070 <__libc_init_array>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	4d0d      	ldr	r5, [pc, #52]	@ (80060a8 <__libc_init_array+0x38>)
 8006074:	4c0d      	ldr	r4, [pc, #52]	@ (80060ac <__libc_init_array+0x3c>)
 8006076:	1b64      	subs	r4, r4, r5
 8006078:	10a4      	asrs	r4, r4, #2
 800607a:	2600      	movs	r6, #0
 800607c:	42a6      	cmp	r6, r4
 800607e:	d109      	bne.n	8006094 <__libc_init_array+0x24>
 8006080:	4d0b      	ldr	r5, [pc, #44]	@ (80060b0 <__libc_init_array+0x40>)
 8006082:	4c0c      	ldr	r4, [pc, #48]	@ (80060b4 <__libc_init_array+0x44>)
 8006084:	f001 febe 	bl	8007e04 <_init>
 8006088:	1b64      	subs	r4, r4, r5
 800608a:	10a4      	asrs	r4, r4, #2
 800608c:	2600      	movs	r6, #0
 800608e:	42a6      	cmp	r6, r4
 8006090:	d105      	bne.n	800609e <__libc_init_array+0x2e>
 8006092:	bd70      	pop	{r4, r5, r6, pc}
 8006094:	f855 3b04 	ldr.w	r3, [r5], #4
 8006098:	4798      	blx	r3
 800609a:	3601      	adds	r6, #1
 800609c:	e7ee      	b.n	800607c <__libc_init_array+0xc>
 800609e:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a2:	4798      	blx	r3
 80060a4:	3601      	adds	r6, #1
 80060a6:	e7f2      	b.n	800608e <__libc_init_array+0x1e>
 80060a8:	08008200 	.word	0x08008200
 80060ac:	08008200 	.word	0x08008200
 80060b0:	08008200 	.word	0x08008200
 80060b4:	08008204 	.word	0x08008204

080060b8 <__retarget_lock_init_recursive>:
 80060b8:	4770      	bx	lr

080060ba <__retarget_lock_acquire_recursive>:
 80060ba:	4770      	bx	lr

080060bc <__retarget_lock_release_recursive>:
 80060bc:	4770      	bx	lr

080060be <quorem>:
 80060be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c2:	6903      	ldr	r3, [r0, #16]
 80060c4:	690c      	ldr	r4, [r1, #16]
 80060c6:	42a3      	cmp	r3, r4
 80060c8:	4607      	mov	r7, r0
 80060ca:	db7e      	blt.n	80061ca <quorem+0x10c>
 80060cc:	3c01      	subs	r4, #1
 80060ce:	f101 0814 	add.w	r8, r1, #20
 80060d2:	00a3      	lsls	r3, r4, #2
 80060d4:	f100 0514 	add.w	r5, r0, #20
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060e8:	3301      	adds	r3, #1
 80060ea:	429a      	cmp	r2, r3
 80060ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80060f4:	d32e      	bcc.n	8006154 <quorem+0x96>
 80060f6:	f04f 0a00 	mov.w	sl, #0
 80060fa:	46c4      	mov	ip, r8
 80060fc:	46ae      	mov	lr, r5
 80060fe:	46d3      	mov	fp, sl
 8006100:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006104:	b298      	uxth	r0, r3
 8006106:	fb06 a000 	mla	r0, r6, r0, sl
 800610a:	0c02      	lsrs	r2, r0, #16
 800610c:	0c1b      	lsrs	r3, r3, #16
 800610e:	fb06 2303 	mla	r3, r6, r3, r2
 8006112:	f8de 2000 	ldr.w	r2, [lr]
 8006116:	b280      	uxth	r0, r0
 8006118:	b292      	uxth	r2, r2
 800611a:	1a12      	subs	r2, r2, r0
 800611c:	445a      	add	r2, fp
 800611e:	f8de 0000 	ldr.w	r0, [lr]
 8006122:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006126:	b29b      	uxth	r3, r3
 8006128:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800612c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006130:	b292      	uxth	r2, r2
 8006132:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006136:	45e1      	cmp	r9, ip
 8006138:	f84e 2b04 	str.w	r2, [lr], #4
 800613c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006140:	d2de      	bcs.n	8006100 <quorem+0x42>
 8006142:	9b00      	ldr	r3, [sp, #0]
 8006144:	58eb      	ldr	r3, [r5, r3]
 8006146:	b92b      	cbnz	r3, 8006154 <quorem+0x96>
 8006148:	9b01      	ldr	r3, [sp, #4]
 800614a:	3b04      	subs	r3, #4
 800614c:	429d      	cmp	r5, r3
 800614e:	461a      	mov	r2, r3
 8006150:	d32f      	bcc.n	80061b2 <quorem+0xf4>
 8006152:	613c      	str	r4, [r7, #16]
 8006154:	4638      	mov	r0, r7
 8006156:	f001 f979 	bl	800744c <__mcmp>
 800615a:	2800      	cmp	r0, #0
 800615c:	db25      	blt.n	80061aa <quorem+0xec>
 800615e:	4629      	mov	r1, r5
 8006160:	2000      	movs	r0, #0
 8006162:	f858 2b04 	ldr.w	r2, [r8], #4
 8006166:	f8d1 c000 	ldr.w	ip, [r1]
 800616a:	fa1f fe82 	uxth.w	lr, r2
 800616e:	fa1f f38c 	uxth.w	r3, ip
 8006172:	eba3 030e 	sub.w	r3, r3, lr
 8006176:	4403      	add	r3, r0
 8006178:	0c12      	lsrs	r2, r2, #16
 800617a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800617e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006182:	b29b      	uxth	r3, r3
 8006184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006188:	45c1      	cmp	r9, r8
 800618a:	f841 3b04 	str.w	r3, [r1], #4
 800618e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006192:	d2e6      	bcs.n	8006162 <quorem+0xa4>
 8006194:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006198:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800619c:	b922      	cbnz	r2, 80061a8 <quorem+0xea>
 800619e:	3b04      	subs	r3, #4
 80061a0:	429d      	cmp	r5, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	d30b      	bcc.n	80061be <quorem+0x100>
 80061a6:	613c      	str	r4, [r7, #16]
 80061a8:	3601      	adds	r6, #1
 80061aa:	4630      	mov	r0, r6
 80061ac:	b003      	add	sp, #12
 80061ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	3b04      	subs	r3, #4
 80061b6:	2a00      	cmp	r2, #0
 80061b8:	d1cb      	bne.n	8006152 <quorem+0x94>
 80061ba:	3c01      	subs	r4, #1
 80061bc:	e7c6      	b.n	800614c <quorem+0x8e>
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	3b04      	subs	r3, #4
 80061c2:	2a00      	cmp	r2, #0
 80061c4:	d1ef      	bne.n	80061a6 <quorem+0xe8>
 80061c6:	3c01      	subs	r4, #1
 80061c8:	e7ea      	b.n	80061a0 <quorem+0xe2>
 80061ca:	2000      	movs	r0, #0
 80061cc:	e7ee      	b.n	80061ac <quorem+0xee>
	...

080061d0 <_dtoa_r>:
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	69c7      	ldr	r7, [r0, #28]
 80061d6:	b099      	sub	sp, #100	@ 0x64
 80061d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80061dc:	ec55 4b10 	vmov	r4, r5, d0
 80061e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80061e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80061e4:	4683      	mov	fp, r0
 80061e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80061e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80061ea:	b97f      	cbnz	r7, 800620c <_dtoa_r+0x3c>
 80061ec:	2010      	movs	r0, #16
 80061ee:	f000 fdfd 	bl	8006dec <malloc>
 80061f2:	4602      	mov	r2, r0
 80061f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80061f8:	b920      	cbnz	r0, 8006204 <_dtoa_r+0x34>
 80061fa:	4ba7      	ldr	r3, [pc, #668]	@ (8006498 <_dtoa_r+0x2c8>)
 80061fc:	21ef      	movs	r1, #239	@ 0xef
 80061fe:	48a7      	ldr	r0, [pc, #668]	@ (800649c <_dtoa_r+0x2cc>)
 8006200:	f001 fd50 	bl	8007ca4 <__assert_func>
 8006204:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006208:	6007      	str	r7, [r0, #0]
 800620a:	60c7      	str	r7, [r0, #12]
 800620c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006210:	6819      	ldr	r1, [r3, #0]
 8006212:	b159      	cbz	r1, 800622c <_dtoa_r+0x5c>
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	604a      	str	r2, [r1, #4]
 8006218:	2301      	movs	r3, #1
 800621a:	4093      	lsls	r3, r2
 800621c:	608b      	str	r3, [r1, #8]
 800621e:	4658      	mov	r0, fp
 8006220:	f000 feda 	bl	8006fd8 <_Bfree>
 8006224:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	1e2b      	subs	r3, r5, #0
 800622e:	bfb9      	ittee	lt
 8006230:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006234:	9303      	strlt	r3, [sp, #12]
 8006236:	2300      	movge	r3, #0
 8006238:	6033      	strge	r3, [r6, #0]
 800623a:	9f03      	ldr	r7, [sp, #12]
 800623c:	4b98      	ldr	r3, [pc, #608]	@ (80064a0 <_dtoa_r+0x2d0>)
 800623e:	bfbc      	itt	lt
 8006240:	2201      	movlt	r2, #1
 8006242:	6032      	strlt	r2, [r6, #0]
 8006244:	43bb      	bics	r3, r7
 8006246:	d112      	bne.n	800626e <_dtoa_r+0x9e>
 8006248:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800624a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006254:	4323      	orrs	r3, r4
 8006256:	f000 854d 	beq.w	8006cf4 <_dtoa_r+0xb24>
 800625a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800625c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80064b4 <_dtoa_r+0x2e4>
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 854f 	beq.w	8006d04 <_dtoa_r+0xb34>
 8006266:	f10a 0303 	add.w	r3, sl, #3
 800626a:	f000 bd49 	b.w	8006d00 <_dtoa_r+0xb30>
 800626e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006272:	2200      	movs	r2, #0
 8006274:	ec51 0b17 	vmov	r0, r1, d7
 8006278:	2300      	movs	r3, #0
 800627a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800627e:	f7fa fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 8006282:	4680      	mov	r8, r0
 8006284:	b158      	cbz	r0, 800629e <_dtoa_r+0xce>
 8006286:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006288:	2301      	movs	r3, #1
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800628e:	b113      	cbz	r3, 8006296 <_dtoa_r+0xc6>
 8006290:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006292:	4b84      	ldr	r3, [pc, #528]	@ (80064a4 <_dtoa_r+0x2d4>)
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80064b8 <_dtoa_r+0x2e8>
 800629a:	f000 bd33 	b.w	8006d04 <_dtoa_r+0xb34>
 800629e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80062a2:	aa16      	add	r2, sp, #88	@ 0x58
 80062a4:	a917      	add	r1, sp, #92	@ 0x5c
 80062a6:	4658      	mov	r0, fp
 80062a8:	f001 f980 	bl	80075ac <__d2b>
 80062ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80062b0:	4681      	mov	r9, r0
 80062b2:	2e00      	cmp	r6, #0
 80062b4:	d077      	beq.n	80063a6 <_dtoa_r+0x1d6>
 80062b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80062bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062d0:	4619      	mov	r1, r3
 80062d2:	2200      	movs	r2, #0
 80062d4:	4b74      	ldr	r3, [pc, #464]	@ (80064a8 <_dtoa_r+0x2d8>)
 80062d6:	f7f9 ffd7 	bl	8000288 <__aeabi_dsub>
 80062da:	a369      	add	r3, pc, #420	@ (adr r3, 8006480 <_dtoa_r+0x2b0>)
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f7fa f98a 	bl	80005f8 <__aeabi_dmul>
 80062e4:	a368      	add	r3, pc, #416	@ (adr r3, 8006488 <_dtoa_r+0x2b8>)
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f7f9 ffcf 	bl	800028c <__adddf3>
 80062ee:	4604      	mov	r4, r0
 80062f0:	4630      	mov	r0, r6
 80062f2:	460d      	mov	r5, r1
 80062f4:	f7fa f916 	bl	8000524 <__aeabi_i2d>
 80062f8:	a365      	add	r3, pc, #404	@ (adr r3, 8006490 <_dtoa_r+0x2c0>)
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	f7fa f97b 	bl	80005f8 <__aeabi_dmul>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4620      	mov	r0, r4
 8006308:	4629      	mov	r1, r5
 800630a:	f7f9 ffbf 	bl	800028c <__adddf3>
 800630e:	4604      	mov	r4, r0
 8006310:	460d      	mov	r5, r1
 8006312:	f7fa fc21 	bl	8000b58 <__aeabi_d2iz>
 8006316:	2200      	movs	r2, #0
 8006318:	4607      	mov	r7, r0
 800631a:	2300      	movs	r3, #0
 800631c:	4620      	mov	r0, r4
 800631e:	4629      	mov	r1, r5
 8006320:	f7fa fbdc 	bl	8000adc <__aeabi_dcmplt>
 8006324:	b140      	cbz	r0, 8006338 <_dtoa_r+0x168>
 8006326:	4638      	mov	r0, r7
 8006328:	f7fa f8fc 	bl	8000524 <__aeabi_i2d>
 800632c:	4622      	mov	r2, r4
 800632e:	462b      	mov	r3, r5
 8006330:	f7fa fbca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006334:	b900      	cbnz	r0, 8006338 <_dtoa_r+0x168>
 8006336:	3f01      	subs	r7, #1
 8006338:	2f16      	cmp	r7, #22
 800633a:	d851      	bhi.n	80063e0 <_dtoa_r+0x210>
 800633c:	4b5b      	ldr	r3, [pc, #364]	@ (80064ac <_dtoa_r+0x2dc>)
 800633e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800634a:	f7fa fbc7 	bl	8000adc <__aeabi_dcmplt>
 800634e:	2800      	cmp	r0, #0
 8006350:	d048      	beq.n	80063e4 <_dtoa_r+0x214>
 8006352:	3f01      	subs	r7, #1
 8006354:	2300      	movs	r3, #0
 8006356:	9312      	str	r3, [sp, #72]	@ 0x48
 8006358:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800635a:	1b9b      	subs	r3, r3, r6
 800635c:	1e5a      	subs	r2, r3, #1
 800635e:	bf44      	itt	mi
 8006360:	f1c3 0801 	rsbmi	r8, r3, #1
 8006364:	2300      	movmi	r3, #0
 8006366:	9208      	str	r2, [sp, #32]
 8006368:	bf54      	ite	pl
 800636a:	f04f 0800 	movpl.w	r8, #0
 800636e:	9308      	strmi	r3, [sp, #32]
 8006370:	2f00      	cmp	r7, #0
 8006372:	db39      	blt.n	80063e8 <_dtoa_r+0x218>
 8006374:	9b08      	ldr	r3, [sp, #32]
 8006376:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006378:	443b      	add	r3, r7
 800637a:	9308      	str	r3, [sp, #32]
 800637c:	2300      	movs	r3, #0
 800637e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006382:	2b09      	cmp	r3, #9
 8006384:	d864      	bhi.n	8006450 <_dtoa_r+0x280>
 8006386:	2b05      	cmp	r3, #5
 8006388:	bfc4      	itt	gt
 800638a:	3b04      	subgt	r3, #4
 800638c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800638e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006390:	f1a3 0302 	sub.w	r3, r3, #2
 8006394:	bfcc      	ite	gt
 8006396:	2400      	movgt	r4, #0
 8006398:	2401      	movle	r4, #1
 800639a:	2b03      	cmp	r3, #3
 800639c:	d863      	bhi.n	8006466 <_dtoa_r+0x296>
 800639e:	e8df f003 	tbb	[pc, r3]
 80063a2:	372a      	.short	0x372a
 80063a4:	5535      	.short	0x5535
 80063a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80063aa:	441e      	add	r6, r3
 80063ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	bfc1      	itttt	gt
 80063b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80063b8:	409f      	lslgt	r7, r3
 80063ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063c2:	bfd6      	itet	le
 80063c4:	f1c3 0320 	rsble	r3, r3, #32
 80063c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80063cc:	fa04 f003 	lslle.w	r0, r4, r3
 80063d0:	f7fa f898 	bl	8000504 <__aeabi_ui2d>
 80063d4:	2201      	movs	r2, #1
 80063d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063da:	3e01      	subs	r6, #1
 80063dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80063de:	e777      	b.n	80062d0 <_dtoa_r+0x100>
 80063e0:	2301      	movs	r3, #1
 80063e2:	e7b8      	b.n	8006356 <_dtoa_r+0x186>
 80063e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80063e6:	e7b7      	b.n	8006358 <_dtoa_r+0x188>
 80063e8:	427b      	negs	r3, r7
 80063ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80063ec:	2300      	movs	r3, #0
 80063ee:	eba8 0807 	sub.w	r8, r8, r7
 80063f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80063f4:	e7c4      	b.n	8006380 <_dtoa_r+0x1b0>
 80063f6:	2300      	movs	r3, #0
 80063f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	dc35      	bgt.n	800646c <_dtoa_r+0x29c>
 8006400:	2301      	movs	r3, #1
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	9307      	str	r3, [sp, #28]
 8006406:	461a      	mov	r2, r3
 8006408:	920e      	str	r2, [sp, #56]	@ 0x38
 800640a:	e00b      	b.n	8006424 <_dtoa_r+0x254>
 800640c:	2301      	movs	r3, #1
 800640e:	e7f3      	b.n	80063f8 <_dtoa_r+0x228>
 8006410:	2300      	movs	r3, #0
 8006412:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006416:	18fb      	adds	r3, r7, r3
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	3301      	adds	r3, #1
 800641c:	2b01      	cmp	r3, #1
 800641e:	9307      	str	r3, [sp, #28]
 8006420:	bfb8      	it	lt
 8006422:	2301      	movlt	r3, #1
 8006424:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006428:	2100      	movs	r1, #0
 800642a:	2204      	movs	r2, #4
 800642c:	f102 0514 	add.w	r5, r2, #20
 8006430:	429d      	cmp	r5, r3
 8006432:	d91f      	bls.n	8006474 <_dtoa_r+0x2a4>
 8006434:	6041      	str	r1, [r0, #4]
 8006436:	4658      	mov	r0, fp
 8006438:	f000 fd8e 	bl	8006f58 <_Balloc>
 800643c:	4682      	mov	sl, r0
 800643e:	2800      	cmp	r0, #0
 8006440:	d13c      	bne.n	80064bc <_dtoa_r+0x2ec>
 8006442:	4b1b      	ldr	r3, [pc, #108]	@ (80064b0 <_dtoa_r+0x2e0>)
 8006444:	4602      	mov	r2, r0
 8006446:	f240 11af 	movw	r1, #431	@ 0x1af
 800644a:	e6d8      	b.n	80061fe <_dtoa_r+0x2e>
 800644c:	2301      	movs	r3, #1
 800644e:	e7e0      	b.n	8006412 <_dtoa_r+0x242>
 8006450:	2401      	movs	r4, #1
 8006452:	2300      	movs	r3, #0
 8006454:	9309      	str	r3, [sp, #36]	@ 0x24
 8006456:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006458:	f04f 33ff 	mov.w	r3, #4294967295
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	9307      	str	r3, [sp, #28]
 8006460:	2200      	movs	r2, #0
 8006462:	2312      	movs	r3, #18
 8006464:	e7d0      	b.n	8006408 <_dtoa_r+0x238>
 8006466:	2301      	movs	r3, #1
 8006468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800646a:	e7f5      	b.n	8006458 <_dtoa_r+0x288>
 800646c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	9307      	str	r3, [sp, #28]
 8006472:	e7d7      	b.n	8006424 <_dtoa_r+0x254>
 8006474:	3101      	adds	r1, #1
 8006476:	0052      	lsls	r2, r2, #1
 8006478:	e7d8      	b.n	800642c <_dtoa_r+0x25c>
 800647a:	bf00      	nop
 800647c:	f3af 8000 	nop.w
 8006480:	636f4361 	.word	0x636f4361
 8006484:	3fd287a7 	.word	0x3fd287a7
 8006488:	8b60c8b3 	.word	0x8b60c8b3
 800648c:	3fc68a28 	.word	0x3fc68a28
 8006490:	509f79fb 	.word	0x509f79fb
 8006494:	3fd34413 	.word	0x3fd34413
 8006498:	08007ec9 	.word	0x08007ec9
 800649c:	08007ee0 	.word	0x08007ee0
 80064a0:	7ff00000 	.word	0x7ff00000
 80064a4:	08007e99 	.word	0x08007e99
 80064a8:	3ff80000 	.word	0x3ff80000
 80064ac:	08007fd8 	.word	0x08007fd8
 80064b0:	08007f38 	.word	0x08007f38
 80064b4:	08007ec5 	.word	0x08007ec5
 80064b8:	08007e98 	.word	0x08007e98
 80064bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064c0:	6018      	str	r0, [r3, #0]
 80064c2:	9b07      	ldr	r3, [sp, #28]
 80064c4:	2b0e      	cmp	r3, #14
 80064c6:	f200 80a4 	bhi.w	8006612 <_dtoa_r+0x442>
 80064ca:	2c00      	cmp	r4, #0
 80064cc:	f000 80a1 	beq.w	8006612 <_dtoa_r+0x442>
 80064d0:	2f00      	cmp	r7, #0
 80064d2:	dd33      	ble.n	800653c <_dtoa_r+0x36c>
 80064d4:	4bad      	ldr	r3, [pc, #692]	@ (800678c <_dtoa_r+0x5bc>)
 80064d6:	f007 020f 	and.w	r2, r7, #15
 80064da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064de:	ed93 7b00 	vldr	d7, [r3]
 80064e2:	05f8      	lsls	r0, r7, #23
 80064e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80064e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064ec:	d516      	bpl.n	800651c <_dtoa_r+0x34c>
 80064ee:	4ba8      	ldr	r3, [pc, #672]	@ (8006790 <_dtoa_r+0x5c0>)
 80064f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064f8:	f7fa f9a8 	bl	800084c <__aeabi_ddiv>
 80064fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006500:	f004 040f 	and.w	r4, r4, #15
 8006504:	2603      	movs	r6, #3
 8006506:	4da2      	ldr	r5, [pc, #648]	@ (8006790 <_dtoa_r+0x5c0>)
 8006508:	b954      	cbnz	r4, 8006520 <_dtoa_r+0x350>
 800650a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800650e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006512:	f7fa f99b 	bl	800084c <__aeabi_ddiv>
 8006516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800651a:	e028      	b.n	800656e <_dtoa_r+0x39e>
 800651c:	2602      	movs	r6, #2
 800651e:	e7f2      	b.n	8006506 <_dtoa_r+0x336>
 8006520:	07e1      	lsls	r1, r4, #31
 8006522:	d508      	bpl.n	8006536 <_dtoa_r+0x366>
 8006524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006528:	e9d5 2300 	ldrd	r2, r3, [r5]
 800652c:	f7fa f864 	bl	80005f8 <__aeabi_dmul>
 8006530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006534:	3601      	adds	r6, #1
 8006536:	1064      	asrs	r4, r4, #1
 8006538:	3508      	adds	r5, #8
 800653a:	e7e5      	b.n	8006508 <_dtoa_r+0x338>
 800653c:	f000 80d2 	beq.w	80066e4 <_dtoa_r+0x514>
 8006540:	427c      	negs	r4, r7
 8006542:	4b92      	ldr	r3, [pc, #584]	@ (800678c <_dtoa_r+0x5bc>)
 8006544:	4d92      	ldr	r5, [pc, #584]	@ (8006790 <_dtoa_r+0x5c0>)
 8006546:	f004 020f 	and.w	r2, r4, #15
 800654a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006556:	f7fa f84f 	bl	80005f8 <__aeabi_dmul>
 800655a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800655e:	1124      	asrs	r4, r4, #4
 8006560:	2300      	movs	r3, #0
 8006562:	2602      	movs	r6, #2
 8006564:	2c00      	cmp	r4, #0
 8006566:	f040 80b2 	bne.w	80066ce <_dtoa_r+0x4fe>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1d3      	bne.n	8006516 <_dtoa_r+0x346>
 800656e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006570:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 80b7 	beq.w	80066e8 <_dtoa_r+0x518>
 800657a:	4b86      	ldr	r3, [pc, #536]	@ (8006794 <_dtoa_r+0x5c4>)
 800657c:	2200      	movs	r2, #0
 800657e:	4620      	mov	r0, r4
 8006580:	4629      	mov	r1, r5
 8006582:	f7fa faab 	bl	8000adc <__aeabi_dcmplt>
 8006586:	2800      	cmp	r0, #0
 8006588:	f000 80ae 	beq.w	80066e8 <_dtoa_r+0x518>
 800658c:	9b07      	ldr	r3, [sp, #28]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 80aa 	beq.w	80066e8 <_dtoa_r+0x518>
 8006594:	9b00      	ldr	r3, [sp, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	dd37      	ble.n	800660a <_dtoa_r+0x43a>
 800659a:	1e7b      	subs	r3, r7, #1
 800659c:	9304      	str	r3, [sp, #16]
 800659e:	4620      	mov	r0, r4
 80065a0:	4b7d      	ldr	r3, [pc, #500]	@ (8006798 <_dtoa_r+0x5c8>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	4629      	mov	r1, r5
 80065a6:	f7fa f827 	bl	80005f8 <__aeabi_dmul>
 80065aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ae:	9c00      	ldr	r4, [sp, #0]
 80065b0:	3601      	adds	r6, #1
 80065b2:	4630      	mov	r0, r6
 80065b4:	f7f9 ffb6 	bl	8000524 <__aeabi_i2d>
 80065b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065bc:	f7fa f81c 	bl	80005f8 <__aeabi_dmul>
 80065c0:	4b76      	ldr	r3, [pc, #472]	@ (800679c <_dtoa_r+0x5cc>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	f7f9 fe62 	bl	800028c <__adddf3>
 80065c8:	4605      	mov	r5, r0
 80065ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065ce:	2c00      	cmp	r4, #0
 80065d0:	f040 808d 	bne.w	80066ee <_dtoa_r+0x51e>
 80065d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065d8:	4b71      	ldr	r3, [pc, #452]	@ (80067a0 <_dtoa_r+0x5d0>)
 80065da:	2200      	movs	r2, #0
 80065dc:	f7f9 fe54 	bl	8000288 <__aeabi_dsub>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065e8:	462a      	mov	r2, r5
 80065ea:	4633      	mov	r3, r6
 80065ec:	f7fa fa94 	bl	8000b18 <__aeabi_dcmpgt>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	f040 828b 	bne.w	8006b0c <_dtoa_r+0x93c>
 80065f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065fa:	462a      	mov	r2, r5
 80065fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006600:	f7fa fa6c 	bl	8000adc <__aeabi_dcmplt>
 8006604:	2800      	cmp	r0, #0
 8006606:	f040 8128 	bne.w	800685a <_dtoa_r+0x68a>
 800660a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800660e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006612:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006614:	2b00      	cmp	r3, #0
 8006616:	f2c0 815a 	blt.w	80068ce <_dtoa_r+0x6fe>
 800661a:	2f0e      	cmp	r7, #14
 800661c:	f300 8157 	bgt.w	80068ce <_dtoa_r+0x6fe>
 8006620:	4b5a      	ldr	r3, [pc, #360]	@ (800678c <_dtoa_r+0x5bc>)
 8006622:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006626:	ed93 7b00 	vldr	d7, [r3]
 800662a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800662c:	2b00      	cmp	r3, #0
 800662e:	ed8d 7b00 	vstr	d7, [sp]
 8006632:	da03      	bge.n	800663c <_dtoa_r+0x46c>
 8006634:	9b07      	ldr	r3, [sp, #28]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f340 8101 	ble.w	800683e <_dtoa_r+0x66e>
 800663c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006640:	4656      	mov	r6, sl
 8006642:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006646:	4620      	mov	r0, r4
 8006648:	4629      	mov	r1, r5
 800664a:	f7fa f8ff 	bl	800084c <__aeabi_ddiv>
 800664e:	f7fa fa83 	bl	8000b58 <__aeabi_d2iz>
 8006652:	4680      	mov	r8, r0
 8006654:	f7f9 ff66 	bl	8000524 <__aeabi_i2d>
 8006658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800665c:	f7f9 ffcc 	bl	80005f8 <__aeabi_dmul>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4620      	mov	r0, r4
 8006666:	4629      	mov	r1, r5
 8006668:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800666c:	f7f9 fe0c 	bl	8000288 <__aeabi_dsub>
 8006670:	f806 4b01 	strb.w	r4, [r6], #1
 8006674:	9d07      	ldr	r5, [sp, #28]
 8006676:	eba6 040a 	sub.w	r4, r6, sl
 800667a:	42a5      	cmp	r5, r4
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	f040 8117 	bne.w	80068b2 <_dtoa_r+0x6e2>
 8006684:	f7f9 fe02 	bl	800028c <__adddf3>
 8006688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800668c:	4604      	mov	r4, r0
 800668e:	460d      	mov	r5, r1
 8006690:	f7fa fa42 	bl	8000b18 <__aeabi_dcmpgt>
 8006694:	2800      	cmp	r0, #0
 8006696:	f040 80f9 	bne.w	800688c <_dtoa_r+0x6bc>
 800669a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800669e:	4620      	mov	r0, r4
 80066a0:	4629      	mov	r1, r5
 80066a2:	f7fa fa11 	bl	8000ac8 <__aeabi_dcmpeq>
 80066a6:	b118      	cbz	r0, 80066b0 <_dtoa_r+0x4e0>
 80066a8:	f018 0f01 	tst.w	r8, #1
 80066ac:	f040 80ee 	bne.w	800688c <_dtoa_r+0x6bc>
 80066b0:	4649      	mov	r1, r9
 80066b2:	4658      	mov	r0, fp
 80066b4:	f000 fc90 	bl	8006fd8 <_Bfree>
 80066b8:	2300      	movs	r3, #0
 80066ba:	7033      	strb	r3, [r6, #0]
 80066bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80066be:	3701      	adds	r7, #1
 80066c0:	601f      	str	r7, [r3, #0]
 80066c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 831d 	beq.w	8006d04 <_dtoa_r+0xb34>
 80066ca:	601e      	str	r6, [r3, #0]
 80066cc:	e31a      	b.n	8006d04 <_dtoa_r+0xb34>
 80066ce:	07e2      	lsls	r2, r4, #31
 80066d0:	d505      	bpl.n	80066de <_dtoa_r+0x50e>
 80066d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066d6:	f7f9 ff8f 	bl	80005f8 <__aeabi_dmul>
 80066da:	3601      	adds	r6, #1
 80066dc:	2301      	movs	r3, #1
 80066de:	1064      	asrs	r4, r4, #1
 80066e0:	3508      	adds	r5, #8
 80066e2:	e73f      	b.n	8006564 <_dtoa_r+0x394>
 80066e4:	2602      	movs	r6, #2
 80066e6:	e742      	b.n	800656e <_dtoa_r+0x39e>
 80066e8:	9c07      	ldr	r4, [sp, #28]
 80066ea:	9704      	str	r7, [sp, #16]
 80066ec:	e761      	b.n	80065b2 <_dtoa_r+0x3e2>
 80066ee:	4b27      	ldr	r3, [pc, #156]	@ (800678c <_dtoa_r+0x5bc>)
 80066f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066fa:	4454      	add	r4, sl
 80066fc:	2900      	cmp	r1, #0
 80066fe:	d053      	beq.n	80067a8 <_dtoa_r+0x5d8>
 8006700:	4928      	ldr	r1, [pc, #160]	@ (80067a4 <_dtoa_r+0x5d4>)
 8006702:	2000      	movs	r0, #0
 8006704:	f7fa f8a2 	bl	800084c <__aeabi_ddiv>
 8006708:	4633      	mov	r3, r6
 800670a:	462a      	mov	r2, r5
 800670c:	f7f9 fdbc 	bl	8000288 <__aeabi_dsub>
 8006710:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006714:	4656      	mov	r6, sl
 8006716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800671a:	f7fa fa1d 	bl	8000b58 <__aeabi_d2iz>
 800671e:	4605      	mov	r5, r0
 8006720:	f7f9 ff00 	bl	8000524 <__aeabi_i2d>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800672c:	f7f9 fdac 	bl	8000288 <__aeabi_dsub>
 8006730:	3530      	adds	r5, #48	@ 0x30
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800673a:	f806 5b01 	strb.w	r5, [r6], #1
 800673e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006742:	f7fa f9cb 	bl	8000adc <__aeabi_dcmplt>
 8006746:	2800      	cmp	r0, #0
 8006748:	d171      	bne.n	800682e <_dtoa_r+0x65e>
 800674a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800674e:	4911      	ldr	r1, [pc, #68]	@ (8006794 <_dtoa_r+0x5c4>)
 8006750:	2000      	movs	r0, #0
 8006752:	f7f9 fd99 	bl	8000288 <__aeabi_dsub>
 8006756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800675a:	f7fa f9bf 	bl	8000adc <__aeabi_dcmplt>
 800675e:	2800      	cmp	r0, #0
 8006760:	f040 8095 	bne.w	800688e <_dtoa_r+0x6be>
 8006764:	42a6      	cmp	r6, r4
 8006766:	f43f af50 	beq.w	800660a <_dtoa_r+0x43a>
 800676a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800676e:	4b0a      	ldr	r3, [pc, #40]	@ (8006798 <_dtoa_r+0x5c8>)
 8006770:	2200      	movs	r2, #0
 8006772:	f7f9 ff41 	bl	80005f8 <__aeabi_dmul>
 8006776:	4b08      	ldr	r3, [pc, #32]	@ (8006798 <_dtoa_r+0x5c8>)
 8006778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800677c:	2200      	movs	r2, #0
 800677e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006782:	f7f9 ff39 	bl	80005f8 <__aeabi_dmul>
 8006786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800678a:	e7c4      	b.n	8006716 <_dtoa_r+0x546>
 800678c:	08007fd8 	.word	0x08007fd8
 8006790:	08007fb0 	.word	0x08007fb0
 8006794:	3ff00000 	.word	0x3ff00000
 8006798:	40240000 	.word	0x40240000
 800679c:	401c0000 	.word	0x401c0000
 80067a0:	40140000 	.word	0x40140000
 80067a4:	3fe00000 	.word	0x3fe00000
 80067a8:	4631      	mov	r1, r6
 80067aa:	4628      	mov	r0, r5
 80067ac:	f7f9 ff24 	bl	80005f8 <__aeabi_dmul>
 80067b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80067b6:	4656      	mov	r6, sl
 80067b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067bc:	f7fa f9cc 	bl	8000b58 <__aeabi_d2iz>
 80067c0:	4605      	mov	r5, r0
 80067c2:	f7f9 feaf 	bl	8000524 <__aeabi_i2d>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ce:	f7f9 fd5b 	bl	8000288 <__aeabi_dsub>
 80067d2:	3530      	adds	r5, #48	@ 0x30
 80067d4:	f806 5b01 	strb.w	r5, [r6], #1
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	42a6      	cmp	r6, r4
 80067de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067e2:	f04f 0200 	mov.w	r2, #0
 80067e6:	d124      	bne.n	8006832 <_dtoa_r+0x662>
 80067e8:	4bac      	ldr	r3, [pc, #688]	@ (8006a9c <_dtoa_r+0x8cc>)
 80067ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80067ee:	f7f9 fd4d 	bl	800028c <__adddf3>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067fa:	f7fa f98d 	bl	8000b18 <__aeabi_dcmpgt>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d145      	bne.n	800688e <_dtoa_r+0x6be>
 8006802:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006806:	49a5      	ldr	r1, [pc, #660]	@ (8006a9c <_dtoa_r+0x8cc>)
 8006808:	2000      	movs	r0, #0
 800680a:	f7f9 fd3d 	bl	8000288 <__aeabi_dsub>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006816:	f7fa f961 	bl	8000adc <__aeabi_dcmplt>
 800681a:	2800      	cmp	r0, #0
 800681c:	f43f aef5 	beq.w	800660a <_dtoa_r+0x43a>
 8006820:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006822:	1e73      	subs	r3, r6, #1
 8006824:	9315      	str	r3, [sp, #84]	@ 0x54
 8006826:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800682a:	2b30      	cmp	r3, #48	@ 0x30
 800682c:	d0f8      	beq.n	8006820 <_dtoa_r+0x650>
 800682e:	9f04      	ldr	r7, [sp, #16]
 8006830:	e73e      	b.n	80066b0 <_dtoa_r+0x4e0>
 8006832:	4b9b      	ldr	r3, [pc, #620]	@ (8006aa0 <_dtoa_r+0x8d0>)
 8006834:	f7f9 fee0 	bl	80005f8 <__aeabi_dmul>
 8006838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800683c:	e7bc      	b.n	80067b8 <_dtoa_r+0x5e8>
 800683e:	d10c      	bne.n	800685a <_dtoa_r+0x68a>
 8006840:	4b98      	ldr	r3, [pc, #608]	@ (8006aa4 <_dtoa_r+0x8d4>)
 8006842:	2200      	movs	r2, #0
 8006844:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006848:	f7f9 fed6 	bl	80005f8 <__aeabi_dmul>
 800684c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006850:	f7fa f958 	bl	8000b04 <__aeabi_dcmpge>
 8006854:	2800      	cmp	r0, #0
 8006856:	f000 8157 	beq.w	8006b08 <_dtoa_r+0x938>
 800685a:	2400      	movs	r4, #0
 800685c:	4625      	mov	r5, r4
 800685e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006860:	43db      	mvns	r3, r3
 8006862:	9304      	str	r3, [sp, #16]
 8006864:	4656      	mov	r6, sl
 8006866:	2700      	movs	r7, #0
 8006868:	4621      	mov	r1, r4
 800686a:	4658      	mov	r0, fp
 800686c:	f000 fbb4 	bl	8006fd8 <_Bfree>
 8006870:	2d00      	cmp	r5, #0
 8006872:	d0dc      	beq.n	800682e <_dtoa_r+0x65e>
 8006874:	b12f      	cbz	r7, 8006882 <_dtoa_r+0x6b2>
 8006876:	42af      	cmp	r7, r5
 8006878:	d003      	beq.n	8006882 <_dtoa_r+0x6b2>
 800687a:	4639      	mov	r1, r7
 800687c:	4658      	mov	r0, fp
 800687e:	f000 fbab 	bl	8006fd8 <_Bfree>
 8006882:	4629      	mov	r1, r5
 8006884:	4658      	mov	r0, fp
 8006886:	f000 fba7 	bl	8006fd8 <_Bfree>
 800688a:	e7d0      	b.n	800682e <_dtoa_r+0x65e>
 800688c:	9704      	str	r7, [sp, #16]
 800688e:	4633      	mov	r3, r6
 8006890:	461e      	mov	r6, r3
 8006892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006896:	2a39      	cmp	r2, #57	@ 0x39
 8006898:	d107      	bne.n	80068aa <_dtoa_r+0x6da>
 800689a:	459a      	cmp	sl, r3
 800689c:	d1f8      	bne.n	8006890 <_dtoa_r+0x6c0>
 800689e:	9a04      	ldr	r2, [sp, #16]
 80068a0:	3201      	adds	r2, #1
 80068a2:	9204      	str	r2, [sp, #16]
 80068a4:	2230      	movs	r2, #48	@ 0x30
 80068a6:	f88a 2000 	strb.w	r2, [sl]
 80068aa:	781a      	ldrb	r2, [r3, #0]
 80068ac:	3201      	adds	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
 80068b0:	e7bd      	b.n	800682e <_dtoa_r+0x65e>
 80068b2:	4b7b      	ldr	r3, [pc, #492]	@ (8006aa0 <_dtoa_r+0x8d0>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	f7f9 fe9f 	bl	80005f8 <__aeabi_dmul>
 80068ba:	2200      	movs	r2, #0
 80068bc:	2300      	movs	r3, #0
 80068be:	4604      	mov	r4, r0
 80068c0:	460d      	mov	r5, r1
 80068c2:	f7fa f901 	bl	8000ac8 <__aeabi_dcmpeq>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	f43f aebb 	beq.w	8006642 <_dtoa_r+0x472>
 80068cc:	e6f0      	b.n	80066b0 <_dtoa_r+0x4e0>
 80068ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	f000 80db 	beq.w	8006a8c <_dtoa_r+0x8bc>
 80068d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068d8:	2a01      	cmp	r2, #1
 80068da:	f300 80bf 	bgt.w	8006a5c <_dtoa_r+0x88c>
 80068de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80068e0:	2a00      	cmp	r2, #0
 80068e2:	f000 80b7 	beq.w	8006a54 <_dtoa_r+0x884>
 80068e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80068ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068ec:	4646      	mov	r6, r8
 80068ee:	9a08      	ldr	r2, [sp, #32]
 80068f0:	2101      	movs	r1, #1
 80068f2:	441a      	add	r2, r3
 80068f4:	4658      	mov	r0, fp
 80068f6:	4498      	add	r8, r3
 80068f8:	9208      	str	r2, [sp, #32]
 80068fa:	f000 fc21 	bl	8007140 <__i2b>
 80068fe:	4605      	mov	r5, r0
 8006900:	b15e      	cbz	r6, 800691a <_dtoa_r+0x74a>
 8006902:	9b08      	ldr	r3, [sp, #32]
 8006904:	2b00      	cmp	r3, #0
 8006906:	dd08      	ble.n	800691a <_dtoa_r+0x74a>
 8006908:	42b3      	cmp	r3, r6
 800690a:	9a08      	ldr	r2, [sp, #32]
 800690c:	bfa8      	it	ge
 800690e:	4633      	movge	r3, r6
 8006910:	eba8 0803 	sub.w	r8, r8, r3
 8006914:	1af6      	subs	r6, r6, r3
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	9308      	str	r3, [sp, #32]
 800691a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800691c:	b1f3      	cbz	r3, 800695c <_dtoa_r+0x78c>
 800691e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80b7 	beq.w	8006a94 <_dtoa_r+0x8c4>
 8006926:	b18c      	cbz	r4, 800694c <_dtoa_r+0x77c>
 8006928:	4629      	mov	r1, r5
 800692a:	4622      	mov	r2, r4
 800692c:	4658      	mov	r0, fp
 800692e:	f000 fcc7 	bl	80072c0 <__pow5mult>
 8006932:	464a      	mov	r2, r9
 8006934:	4601      	mov	r1, r0
 8006936:	4605      	mov	r5, r0
 8006938:	4658      	mov	r0, fp
 800693a:	f000 fc17 	bl	800716c <__multiply>
 800693e:	4649      	mov	r1, r9
 8006940:	9004      	str	r0, [sp, #16]
 8006942:	4658      	mov	r0, fp
 8006944:	f000 fb48 	bl	8006fd8 <_Bfree>
 8006948:	9b04      	ldr	r3, [sp, #16]
 800694a:	4699      	mov	r9, r3
 800694c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800694e:	1b1a      	subs	r2, r3, r4
 8006950:	d004      	beq.n	800695c <_dtoa_r+0x78c>
 8006952:	4649      	mov	r1, r9
 8006954:	4658      	mov	r0, fp
 8006956:	f000 fcb3 	bl	80072c0 <__pow5mult>
 800695a:	4681      	mov	r9, r0
 800695c:	2101      	movs	r1, #1
 800695e:	4658      	mov	r0, fp
 8006960:	f000 fbee 	bl	8007140 <__i2b>
 8006964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006966:	4604      	mov	r4, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 81cf 	beq.w	8006d0c <_dtoa_r+0xb3c>
 800696e:	461a      	mov	r2, r3
 8006970:	4601      	mov	r1, r0
 8006972:	4658      	mov	r0, fp
 8006974:	f000 fca4 	bl	80072c0 <__pow5mult>
 8006978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800697a:	2b01      	cmp	r3, #1
 800697c:	4604      	mov	r4, r0
 800697e:	f300 8095 	bgt.w	8006aac <_dtoa_r+0x8dc>
 8006982:	9b02      	ldr	r3, [sp, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f040 8087 	bne.w	8006a98 <_dtoa_r+0x8c8>
 800698a:	9b03      	ldr	r3, [sp, #12]
 800698c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006990:	2b00      	cmp	r3, #0
 8006992:	f040 8089 	bne.w	8006aa8 <_dtoa_r+0x8d8>
 8006996:	9b03      	ldr	r3, [sp, #12]
 8006998:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800699c:	0d1b      	lsrs	r3, r3, #20
 800699e:	051b      	lsls	r3, r3, #20
 80069a0:	b12b      	cbz	r3, 80069ae <_dtoa_r+0x7de>
 80069a2:	9b08      	ldr	r3, [sp, #32]
 80069a4:	3301      	adds	r3, #1
 80069a6:	9308      	str	r3, [sp, #32]
 80069a8:	f108 0801 	add.w	r8, r8, #1
 80069ac:	2301      	movs	r3, #1
 80069ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80069b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 81b0 	beq.w	8006d18 <_dtoa_r+0xb48>
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069be:	6918      	ldr	r0, [r3, #16]
 80069c0:	f000 fb72 	bl	80070a8 <__hi0bits>
 80069c4:	f1c0 0020 	rsb	r0, r0, #32
 80069c8:	9b08      	ldr	r3, [sp, #32]
 80069ca:	4418      	add	r0, r3
 80069cc:	f010 001f 	ands.w	r0, r0, #31
 80069d0:	d077      	beq.n	8006ac2 <_dtoa_r+0x8f2>
 80069d2:	f1c0 0320 	rsb	r3, r0, #32
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	dd6b      	ble.n	8006ab2 <_dtoa_r+0x8e2>
 80069da:	9b08      	ldr	r3, [sp, #32]
 80069dc:	f1c0 001c 	rsb	r0, r0, #28
 80069e0:	4403      	add	r3, r0
 80069e2:	4480      	add	r8, r0
 80069e4:	4406      	add	r6, r0
 80069e6:	9308      	str	r3, [sp, #32]
 80069e8:	f1b8 0f00 	cmp.w	r8, #0
 80069ec:	dd05      	ble.n	80069fa <_dtoa_r+0x82a>
 80069ee:	4649      	mov	r1, r9
 80069f0:	4642      	mov	r2, r8
 80069f2:	4658      	mov	r0, fp
 80069f4:	f000 fcbe 	bl	8007374 <__lshift>
 80069f8:	4681      	mov	r9, r0
 80069fa:	9b08      	ldr	r3, [sp, #32]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	dd05      	ble.n	8006a0c <_dtoa_r+0x83c>
 8006a00:	4621      	mov	r1, r4
 8006a02:	461a      	mov	r2, r3
 8006a04:	4658      	mov	r0, fp
 8006a06:	f000 fcb5 	bl	8007374 <__lshift>
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d059      	beq.n	8006ac6 <_dtoa_r+0x8f6>
 8006a12:	4621      	mov	r1, r4
 8006a14:	4648      	mov	r0, r9
 8006a16:	f000 fd19 	bl	800744c <__mcmp>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	da53      	bge.n	8006ac6 <_dtoa_r+0x8f6>
 8006a1e:	1e7b      	subs	r3, r7, #1
 8006a20:	9304      	str	r3, [sp, #16]
 8006a22:	4649      	mov	r1, r9
 8006a24:	2300      	movs	r3, #0
 8006a26:	220a      	movs	r2, #10
 8006a28:	4658      	mov	r0, fp
 8006a2a:	f000 faf7 	bl	800701c <__multadd>
 8006a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a30:	4681      	mov	r9, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 8172 	beq.w	8006d1c <_dtoa_r+0xb4c>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	220a      	movs	r2, #10
 8006a3e:	4658      	mov	r0, fp
 8006a40:	f000 faec 	bl	800701c <__multadd>
 8006a44:	9b00      	ldr	r3, [sp, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	4605      	mov	r5, r0
 8006a4a:	dc67      	bgt.n	8006b1c <_dtoa_r+0x94c>
 8006a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	dc41      	bgt.n	8006ad6 <_dtoa_r+0x906>
 8006a52:	e063      	b.n	8006b1c <_dtoa_r+0x94c>
 8006a54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a5a:	e746      	b.n	80068ea <_dtoa_r+0x71a>
 8006a5c:	9b07      	ldr	r3, [sp, #28]
 8006a5e:	1e5c      	subs	r4, r3, #1
 8006a60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a62:	42a3      	cmp	r3, r4
 8006a64:	bfbf      	itttt	lt
 8006a66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006a6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a6c:	1ae3      	sublt	r3, r4, r3
 8006a6e:	bfb4      	ite	lt
 8006a70:	18d2      	addlt	r2, r2, r3
 8006a72:	1b1c      	subge	r4, r3, r4
 8006a74:	9b07      	ldr	r3, [sp, #28]
 8006a76:	bfbc      	itt	lt
 8006a78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006a7a:	2400      	movlt	r4, #0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	bfb5      	itete	lt
 8006a80:	eba8 0603 	sublt.w	r6, r8, r3
 8006a84:	9b07      	ldrge	r3, [sp, #28]
 8006a86:	2300      	movlt	r3, #0
 8006a88:	4646      	movge	r6, r8
 8006a8a:	e730      	b.n	80068ee <_dtoa_r+0x71e>
 8006a8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a90:	4646      	mov	r6, r8
 8006a92:	e735      	b.n	8006900 <_dtoa_r+0x730>
 8006a94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a96:	e75c      	b.n	8006952 <_dtoa_r+0x782>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e788      	b.n	80069ae <_dtoa_r+0x7de>
 8006a9c:	3fe00000 	.word	0x3fe00000
 8006aa0:	40240000 	.word	0x40240000
 8006aa4:	40140000 	.word	0x40140000
 8006aa8:	9b02      	ldr	r3, [sp, #8]
 8006aaa:	e780      	b.n	80069ae <_dtoa_r+0x7de>
 8006aac:	2300      	movs	r3, #0
 8006aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ab0:	e782      	b.n	80069b8 <_dtoa_r+0x7e8>
 8006ab2:	d099      	beq.n	80069e8 <_dtoa_r+0x818>
 8006ab4:	9a08      	ldr	r2, [sp, #32]
 8006ab6:	331c      	adds	r3, #28
 8006ab8:	441a      	add	r2, r3
 8006aba:	4498      	add	r8, r3
 8006abc:	441e      	add	r6, r3
 8006abe:	9208      	str	r2, [sp, #32]
 8006ac0:	e792      	b.n	80069e8 <_dtoa_r+0x818>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	e7f6      	b.n	8006ab4 <_dtoa_r+0x8e4>
 8006ac6:	9b07      	ldr	r3, [sp, #28]
 8006ac8:	9704      	str	r7, [sp, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	dc20      	bgt.n	8006b10 <_dtoa_r+0x940>
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	dd1e      	ble.n	8006b14 <_dtoa_r+0x944>
 8006ad6:	9b00      	ldr	r3, [sp, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f47f aec0 	bne.w	800685e <_dtoa_r+0x68e>
 8006ade:	4621      	mov	r1, r4
 8006ae0:	2205      	movs	r2, #5
 8006ae2:	4658      	mov	r0, fp
 8006ae4:	f000 fa9a 	bl	800701c <__multadd>
 8006ae8:	4601      	mov	r1, r0
 8006aea:	4604      	mov	r4, r0
 8006aec:	4648      	mov	r0, r9
 8006aee:	f000 fcad 	bl	800744c <__mcmp>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	f77f aeb3 	ble.w	800685e <_dtoa_r+0x68e>
 8006af8:	4656      	mov	r6, sl
 8006afa:	2331      	movs	r3, #49	@ 0x31
 8006afc:	f806 3b01 	strb.w	r3, [r6], #1
 8006b00:	9b04      	ldr	r3, [sp, #16]
 8006b02:	3301      	adds	r3, #1
 8006b04:	9304      	str	r3, [sp, #16]
 8006b06:	e6ae      	b.n	8006866 <_dtoa_r+0x696>
 8006b08:	9c07      	ldr	r4, [sp, #28]
 8006b0a:	9704      	str	r7, [sp, #16]
 8006b0c:	4625      	mov	r5, r4
 8006b0e:	e7f3      	b.n	8006af8 <_dtoa_r+0x928>
 8006b10:	9b07      	ldr	r3, [sp, #28]
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 8104 	beq.w	8006d24 <_dtoa_r+0xb54>
 8006b1c:	2e00      	cmp	r6, #0
 8006b1e:	dd05      	ble.n	8006b2c <_dtoa_r+0x95c>
 8006b20:	4629      	mov	r1, r5
 8006b22:	4632      	mov	r2, r6
 8006b24:	4658      	mov	r0, fp
 8006b26:	f000 fc25 	bl	8007374 <__lshift>
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d05a      	beq.n	8006be8 <_dtoa_r+0xa18>
 8006b32:	6869      	ldr	r1, [r5, #4]
 8006b34:	4658      	mov	r0, fp
 8006b36:	f000 fa0f 	bl	8006f58 <_Balloc>
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	b928      	cbnz	r0, 8006b4a <_dtoa_r+0x97a>
 8006b3e:	4b84      	ldr	r3, [pc, #528]	@ (8006d50 <_dtoa_r+0xb80>)
 8006b40:	4602      	mov	r2, r0
 8006b42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b46:	f7ff bb5a 	b.w	80061fe <_dtoa_r+0x2e>
 8006b4a:	692a      	ldr	r2, [r5, #16]
 8006b4c:	3202      	adds	r2, #2
 8006b4e:	0092      	lsls	r2, r2, #2
 8006b50:	f105 010c 	add.w	r1, r5, #12
 8006b54:	300c      	adds	r0, #12
 8006b56:	f001 f897 	bl	8007c88 <memcpy>
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4658      	mov	r0, fp
 8006b60:	f000 fc08 	bl	8007374 <__lshift>
 8006b64:	f10a 0301 	add.w	r3, sl, #1
 8006b68:	9307      	str	r3, [sp, #28]
 8006b6a:	9b00      	ldr	r3, [sp, #0]
 8006b6c:	4453      	add	r3, sl
 8006b6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b70:	9b02      	ldr	r3, [sp, #8]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	462f      	mov	r7, r5
 8006b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	9b07      	ldr	r3, [sp, #28]
 8006b7e:	4621      	mov	r1, r4
 8006b80:	3b01      	subs	r3, #1
 8006b82:	4648      	mov	r0, r9
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	f7ff fa9a 	bl	80060be <quorem>
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	9002      	str	r0, [sp, #8]
 8006b8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b92:	4648      	mov	r0, r9
 8006b94:	f000 fc5a 	bl	800744c <__mcmp>
 8006b98:	462a      	mov	r2, r5
 8006b9a:	9008      	str	r0, [sp, #32]
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	4658      	mov	r0, fp
 8006ba0:	f000 fc70 	bl	8007484 <__mdiff>
 8006ba4:	68c2      	ldr	r2, [r0, #12]
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	bb02      	cbnz	r2, 8006bec <_dtoa_r+0xa1c>
 8006baa:	4601      	mov	r1, r0
 8006bac:	4648      	mov	r0, r9
 8006bae:	f000 fc4d 	bl	800744c <__mcmp>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	4658      	mov	r0, fp
 8006bb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bba:	f000 fa0d 	bl	8006fd8 <_Bfree>
 8006bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bc2:	9e07      	ldr	r6, [sp, #28]
 8006bc4:	ea43 0102 	orr.w	r1, r3, r2
 8006bc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bca:	4319      	orrs	r1, r3
 8006bcc:	d110      	bne.n	8006bf0 <_dtoa_r+0xa20>
 8006bce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bd2:	d029      	beq.n	8006c28 <_dtoa_r+0xa58>
 8006bd4:	9b08      	ldr	r3, [sp, #32]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	dd02      	ble.n	8006be0 <_dtoa_r+0xa10>
 8006bda:	9b02      	ldr	r3, [sp, #8]
 8006bdc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006be0:	9b00      	ldr	r3, [sp, #0]
 8006be2:	f883 8000 	strb.w	r8, [r3]
 8006be6:	e63f      	b.n	8006868 <_dtoa_r+0x698>
 8006be8:	4628      	mov	r0, r5
 8006bea:	e7bb      	b.n	8006b64 <_dtoa_r+0x994>
 8006bec:	2201      	movs	r2, #1
 8006bee:	e7e1      	b.n	8006bb4 <_dtoa_r+0x9e4>
 8006bf0:	9b08      	ldr	r3, [sp, #32]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	db04      	blt.n	8006c00 <_dtoa_r+0xa30>
 8006bf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bf8:	430b      	orrs	r3, r1
 8006bfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	d120      	bne.n	8006c42 <_dtoa_r+0xa72>
 8006c00:	2a00      	cmp	r2, #0
 8006c02:	dded      	ble.n	8006be0 <_dtoa_r+0xa10>
 8006c04:	4649      	mov	r1, r9
 8006c06:	2201      	movs	r2, #1
 8006c08:	4658      	mov	r0, fp
 8006c0a:	f000 fbb3 	bl	8007374 <__lshift>
 8006c0e:	4621      	mov	r1, r4
 8006c10:	4681      	mov	r9, r0
 8006c12:	f000 fc1b 	bl	800744c <__mcmp>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	dc03      	bgt.n	8006c22 <_dtoa_r+0xa52>
 8006c1a:	d1e1      	bne.n	8006be0 <_dtoa_r+0xa10>
 8006c1c:	f018 0f01 	tst.w	r8, #1
 8006c20:	d0de      	beq.n	8006be0 <_dtoa_r+0xa10>
 8006c22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c26:	d1d8      	bne.n	8006bda <_dtoa_r+0xa0a>
 8006c28:	9a00      	ldr	r2, [sp, #0]
 8006c2a:	2339      	movs	r3, #57	@ 0x39
 8006c2c:	7013      	strb	r3, [r2, #0]
 8006c2e:	4633      	mov	r3, r6
 8006c30:	461e      	mov	r6, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c38:	2a39      	cmp	r2, #57	@ 0x39
 8006c3a:	d052      	beq.n	8006ce2 <_dtoa_r+0xb12>
 8006c3c:	3201      	adds	r2, #1
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	e612      	b.n	8006868 <_dtoa_r+0x698>
 8006c42:	2a00      	cmp	r2, #0
 8006c44:	dd07      	ble.n	8006c56 <_dtoa_r+0xa86>
 8006c46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c4a:	d0ed      	beq.n	8006c28 <_dtoa_r+0xa58>
 8006c4c:	9a00      	ldr	r2, [sp, #0]
 8006c4e:	f108 0301 	add.w	r3, r8, #1
 8006c52:	7013      	strb	r3, [r2, #0]
 8006c54:	e608      	b.n	8006868 <_dtoa_r+0x698>
 8006c56:	9b07      	ldr	r3, [sp, #28]
 8006c58:	9a07      	ldr	r2, [sp, #28]
 8006c5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d028      	beq.n	8006cb6 <_dtoa_r+0xae6>
 8006c64:	4649      	mov	r1, r9
 8006c66:	2300      	movs	r3, #0
 8006c68:	220a      	movs	r2, #10
 8006c6a:	4658      	mov	r0, fp
 8006c6c:	f000 f9d6 	bl	800701c <__multadd>
 8006c70:	42af      	cmp	r7, r5
 8006c72:	4681      	mov	r9, r0
 8006c74:	f04f 0300 	mov.w	r3, #0
 8006c78:	f04f 020a 	mov.w	r2, #10
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	4658      	mov	r0, fp
 8006c80:	d107      	bne.n	8006c92 <_dtoa_r+0xac2>
 8006c82:	f000 f9cb 	bl	800701c <__multadd>
 8006c86:	4607      	mov	r7, r0
 8006c88:	4605      	mov	r5, r0
 8006c8a:	9b07      	ldr	r3, [sp, #28]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	9307      	str	r3, [sp, #28]
 8006c90:	e774      	b.n	8006b7c <_dtoa_r+0x9ac>
 8006c92:	f000 f9c3 	bl	800701c <__multadd>
 8006c96:	4629      	mov	r1, r5
 8006c98:	4607      	mov	r7, r0
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	220a      	movs	r2, #10
 8006c9e:	4658      	mov	r0, fp
 8006ca0:	f000 f9bc 	bl	800701c <__multadd>
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	e7f0      	b.n	8006c8a <_dtoa_r+0xaba>
 8006ca8:	9b00      	ldr	r3, [sp, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bfcc      	ite	gt
 8006cae:	461e      	movgt	r6, r3
 8006cb0:	2601      	movle	r6, #1
 8006cb2:	4456      	add	r6, sl
 8006cb4:	2700      	movs	r7, #0
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	2201      	movs	r2, #1
 8006cba:	4658      	mov	r0, fp
 8006cbc:	f000 fb5a 	bl	8007374 <__lshift>
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4681      	mov	r9, r0
 8006cc4:	f000 fbc2 	bl	800744c <__mcmp>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	dcb0      	bgt.n	8006c2e <_dtoa_r+0xa5e>
 8006ccc:	d102      	bne.n	8006cd4 <_dtoa_r+0xb04>
 8006cce:	f018 0f01 	tst.w	r8, #1
 8006cd2:	d1ac      	bne.n	8006c2e <_dtoa_r+0xa5e>
 8006cd4:	4633      	mov	r3, r6
 8006cd6:	461e      	mov	r6, r3
 8006cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cdc:	2a30      	cmp	r2, #48	@ 0x30
 8006cde:	d0fa      	beq.n	8006cd6 <_dtoa_r+0xb06>
 8006ce0:	e5c2      	b.n	8006868 <_dtoa_r+0x698>
 8006ce2:	459a      	cmp	sl, r3
 8006ce4:	d1a4      	bne.n	8006c30 <_dtoa_r+0xa60>
 8006ce6:	9b04      	ldr	r3, [sp, #16]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	9304      	str	r3, [sp, #16]
 8006cec:	2331      	movs	r3, #49	@ 0x31
 8006cee:	f88a 3000 	strb.w	r3, [sl]
 8006cf2:	e5b9      	b.n	8006868 <_dtoa_r+0x698>
 8006cf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cf6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d54 <_dtoa_r+0xb84>
 8006cfa:	b11b      	cbz	r3, 8006d04 <_dtoa_r+0xb34>
 8006cfc:	f10a 0308 	add.w	r3, sl, #8
 8006d00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	4650      	mov	r0, sl
 8006d06:	b019      	add	sp, #100	@ 0x64
 8006d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	f77f ae37 	ble.w	8006982 <_dtoa_r+0x7b2>
 8006d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d18:	2001      	movs	r0, #1
 8006d1a:	e655      	b.n	80069c8 <_dtoa_r+0x7f8>
 8006d1c:	9b00      	ldr	r3, [sp, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f77f aed6 	ble.w	8006ad0 <_dtoa_r+0x900>
 8006d24:	4656      	mov	r6, sl
 8006d26:	4621      	mov	r1, r4
 8006d28:	4648      	mov	r0, r9
 8006d2a:	f7ff f9c8 	bl	80060be <quorem>
 8006d2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d32:	f806 8b01 	strb.w	r8, [r6], #1
 8006d36:	9b00      	ldr	r3, [sp, #0]
 8006d38:	eba6 020a 	sub.w	r2, r6, sl
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	ddb3      	ble.n	8006ca8 <_dtoa_r+0xad8>
 8006d40:	4649      	mov	r1, r9
 8006d42:	2300      	movs	r3, #0
 8006d44:	220a      	movs	r2, #10
 8006d46:	4658      	mov	r0, fp
 8006d48:	f000 f968 	bl	800701c <__multadd>
 8006d4c:	4681      	mov	r9, r0
 8006d4e:	e7ea      	b.n	8006d26 <_dtoa_r+0xb56>
 8006d50:	08007f38 	.word	0x08007f38
 8006d54:	08007ebc 	.word	0x08007ebc

08006d58 <_free_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	d041      	beq.n	8006de4 <_free_r+0x8c>
 8006d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d64:	1f0c      	subs	r4, r1, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	bfb8      	it	lt
 8006d6a:	18e4      	addlt	r4, r4, r3
 8006d6c:	f000 f8e8 	bl	8006f40 <__malloc_lock>
 8006d70:	4a1d      	ldr	r2, [pc, #116]	@ (8006de8 <_free_r+0x90>)
 8006d72:	6813      	ldr	r3, [r2, #0]
 8006d74:	b933      	cbnz	r3, 8006d84 <_free_r+0x2c>
 8006d76:	6063      	str	r3, [r4, #4]
 8006d78:	6014      	str	r4, [r2, #0]
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d80:	f000 b8e4 	b.w	8006f4c <__malloc_unlock>
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	d908      	bls.n	8006d9a <_free_r+0x42>
 8006d88:	6820      	ldr	r0, [r4, #0]
 8006d8a:	1821      	adds	r1, r4, r0
 8006d8c:	428b      	cmp	r3, r1
 8006d8e:	bf01      	itttt	eq
 8006d90:	6819      	ldreq	r1, [r3, #0]
 8006d92:	685b      	ldreq	r3, [r3, #4]
 8006d94:	1809      	addeq	r1, r1, r0
 8006d96:	6021      	streq	r1, [r4, #0]
 8006d98:	e7ed      	b.n	8006d76 <_free_r+0x1e>
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	b10b      	cbz	r3, 8006da4 <_free_r+0x4c>
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d9fa      	bls.n	8006d9a <_free_r+0x42>
 8006da4:	6811      	ldr	r1, [r2, #0]
 8006da6:	1850      	adds	r0, r2, r1
 8006da8:	42a0      	cmp	r0, r4
 8006daa:	d10b      	bne.n	8006dc4 <_free_r+0x6c>
 8006dac:	6820      	ldr	r0, [r4, #0]
 8006dae:	4401      	add	r1, r0
 8006db0:	1850      	adds	r0, r2, r1
 8006db2:	4283      	cmp	r3, r0
 8006db4:	6011      	str	r1, [r2, #0]
 8006db6:	d1e0      	bne.n	8006d7a <_free_r+0x22>
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	6053      	str	r3, [r2, #4]
 8006dbe:	4408      	add	r0, r1
 8006dc0:	6010      	str	r0, [r2, #0]
 8006dc2:	e7da      	b.n	8006d7a <_free_r+0x22>
 8006dc4:	d902      	bls.n	8006dcc <_free_r+0x74>
 8006dc6:	230c      	movs	r3, #12
 8006dc8:	602b      	str	r3, [r5, #0]
 8006dca:	e7d6      	b.n	8006d7a <_free_r+0x22>
 8006dcc:	6820      	ldr	r0, [r4, #0]
 8006dce:	1821      	adds	r1, r4, r0
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	bf04      	itt	eq
 8006dd4:	6819      	ldreq	r1, [r3, #0]
 8006dd6:	685b      	ldreq	r3, [r3, #4]
 8006dd8:	6063      	str	r3, [r4, #4]
 8006dda:	bf04      	itt	eq
 8006ddc:	1809      	addeq	r1, r1, r0
 8006dde:	6021      	streq	r1, [r4, #0]
 8006de0:	6054      	str	r4, [r2, #4]
 8006de2:	e7ca      	b.n	8006d7a <_free_r+0x22>
 8006de4:	bd38      	pop	{r3, r4, r5, pc}
 8006de6:	bf00      	nop
 8006de8:	20000504 	.word	0x20000504

08006dec <malloc>:
 8006dec:	4b02      	ldr	r3, [pc, #8]	@ (8006df8 <malloc+0xc>)
 8006dee:	4601      	mov	r1, r0
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	f000 b825 	b.w	8006e40 <_malloc_r>
 8006df6:	bf00      	nop
 8006df8:	20000038 	.word	0x20000038

08006dfc <sbrk_aligned>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	4e0f      	ldr	r6, [pc, #60]	@ (8006e3c <sbrk_aligned+0x40>)
 8006e00:	460c      	mov	r4, r1
 8006e02:	6831      	ldr	r1, [r6, #0]
 8006e04:	4605      	mov	r5, r0
 8006e06:	b911      	cbnz	r1, 8006e0e <sbrk_aligned+0x12>
 8006e08:	f000 ff2e 	bl	8007c68 <_sbrk_r>
 8006e0c:	6030      	str	r0, [r6, #0]
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4628      	mov	r0, r5
 8006e12:	f000 ff29 	bl	8007c68 <_sbrk_r>
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	d103      	bne.n	8006e22 <sbrk_aligned+0x26>
 8006e1a:	f04f 34ff 	mov.w	r4, #4294967295
 8006e1e:	4620      	mov	r0, r4
 8006e20:	bd70      	pop	{r4, r5, r6, pc}
 8006e22:	1cc4      	adds	r4, r0, #3
 8006e24:	f024 0403 	bic.w	r4, r4, #3
 8006e28:	42a0      	cmp	r0, r4
 8006e2a:	d0f8      	beq.n	8006e1e <sbrk_aligned+0x22>
 8006e2c:	1a21      	subs	r1, r4, r0
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f000 ff1a 	bl	8007c68 <_sbrk_r>
 8006e34:	3001      	adds	r0, #1
 8006e36:	d1f2      	bne.n	8006e1e <sbrk_aligned+0x22>
 8006e38:	e7ef      	b.n	8006e1a <sbrk_aligned+0x1e>
 8006e3a:	bf00      	nop
 8006e3c:	20000500 	.word	0x20000500

08006e40 <_malloc_r>:
 8006e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e44:	1ccd      	adds	r5, r1, #3
 8006e46:	f025 0503 	bic.w	r5, r5, #3
 8006e4a:	3508      	adds	r5, #8
 8006e4c:	2d0c      	cmp	r5, #12
 8006e4e:	bf38      	it	cc
 8006e50:	250c      	movcc	r5, #12
 8006e52:	2d00      	cmp	r5, #0
 8006e54:	4606      	mov	r6, r0
 8006e56:	db01      	blt.n	8006e5c <_malloc_r+0x1c>
 8006e58:	42a9      	cmp	r1, r5
 8006e5a:	d904      	bls.n	8006e66 <_malloc_r+0x26>
 8006e5c:	230c      	movs	r3, #12
 8006e5e:	6033      	str	r3, [r6, #0]
 8006e60:	2000      	movs	r0, #0
 8006e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f3c <_malloc_r+0xfc>
 8006e6a:	f000 f869 	bl	8006f40 <__malloc_lock>
 8006e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e72:	461c      	mov	r4, r3
 8006e74:	bb44      	cbnz	r4, 8006ec8 <_malloc_r+0x88>
 8006e76:	4629      	mov	r1, r5
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f7ff ffbf 	bl	8006dfc <sbrk_aligned>
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	4604      	mov	r4, r0
 8006e82:	d158      	bne.n	8006f36 <_malloc_r+0xf6>
 8006e84:	f8d8 4000 	ldr.w	r4, [r8]
 8006e88:	4627      	mov	r7, r4
 8006e8a:	2f00      	cmp	r7, #0
 8006e8c:	d143      	bne.n	8006f16 <_malloc_r+0xd6>
 8006e8e:	2c00      	cmp	r4, #0
 8006e90:	d04b      	beq.n	8006f2a <_malloc_r+0xea>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	4639      	mov	r1, r7
 8006e96:	4630      	mov	r0, r6
 8006e98:	eb04 0903 	add.w	r9, r4, r3
 8006e9c:	f000 fee4 	bl	8007c68 <_sbrk_r>
 8006ea0:	4581      	cmp	r9, r0
 8006ea2:	d142      	bne.n	8006f2a <_malloc_r+0xea>
 8006ea4:	6821      	ldr	r1, [r4, #0]
 8006ea6:	1a6d      	subs	r5, r5, r1
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f7ff ffa6 	bl	8006dfc <sbrk_aligned>
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d03a      	beq.n	8006f2a <_malloc_r+0xea>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	442b      	add	r3, r5
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	f8d8 3000 	ldr.w	r3, [r8]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	bb62      	cbnz	r2, 8006f1c <_malloc_r+0xdc>
 8006ec2:	f8c8 7000 	str.w	r7, [r8]
 8006ec6:	e00f      	b.n	8006ee8 <_malloc_r+0xa8>
 8006ec8:	6822      	ldr	r2, [r4, #0]
 8006eca:	1b52      	subs	r2, r2, r5
 8006ecc:	d420      	bmi.n	8006f10 <_malloc_r+0xd0>
 8006ece:	2a0b      	cmp	r2, #11
 8006ed0:	d917      	bls.n	8006f02 <_malloc_r+0xc2>
 8006ed2:	1961      	adds	r1, r4, r5
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	6025      	str	r5, [r4, #0]
 8006ed8:	bf18      	it	ne
 8006eda:	6059      	strne	r1, [r3, #4]
 8006edc:	6863      	ldr	r3, [r4, #4]
 8006ede:	bf08      	it	eq
 8006ee0:	f8c8 1000 	streq.w	r1, [r8]
 8006ee4:	5162      	str	r2, [r4, r5]
 8006ee6:	604b      	str	r3, [r1, #4]
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f000 f82f 	bl	8006f4c <__malloc_unlock>
 8006eee:	f104 000b 	add.w	r0, r4, #11
 8006ef2:	1d23      	adds	r3, r4, #4
 8006ef4:	f020 0007 	bic.w	r0, r0, #7
 8006ef8:	1ac2      	subs	r2, r0, r3
 8006efa:	bf1c      	itt	ne
 8006efc:	1a1b      	subne	r3, r3, r0
 8006efe:	50a3      	strne	r3, [r4, r2]
 8006f00:	e7af      	b.n	8006e62 <_malloc_r+0x22>
 8006f02:	6862      	ldr	r2, [r4, #4]
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	bf0c      	ite	eq
 8006f08:	f8c8 2000 	streq.w	r2, [r8]
 8006f0c:	605a      	strne	r2, [r3, #4]
 8006f0e:	e7eb      	b.n	8006ee8 <_malloc_r+0xa8>
 8006f10:	4623      	mov	r3, r4
 8006f12:	6864      	ldr	r4, [r4, #4]
 8006f14:	e7ae      	b.n	8006e74 <_malloc_r+0x34>
 8006f16:	463c      	mov	r4, r7
 8006f18:	687f      	ldr	r7, [r7, #4]
 8006f1a:	e7b6      	b.n	8006e8a <_malloc_r+0x4a>
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	42a3      	cmp	r3, r4
 8006f22:	d1fb      	bne.n	8006f1c <_malloc_r+0xdc>
 8006f24:	2300      	movs	r3, #0
 8006f26:	6053      	str	r3, [r2, #4]
 8006f28:	e7de      	b.n	8006ee8 <_malloc_r+0xa8>
 8006f2a:	230c      	movs	r3, #12
 8006f2c:	6033      	str	r3, [r6, #0]
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f000 f80c 	bl	8006f4c <__malloc_unlock>
 8006f34:	e794      	b.n	8006e60 <_malloc_r+0x20>
 8006f36:	6005      	str	r5, [r0, #0]
 8006f38:	e7d6      	b.n	8006ee8 <_malloc_r+0xa8>
 8006f3a:	bf00      	nop
 8006f3c:	20000504 	.word	0x20000504

08006f40 <__malloc_lock>:
 8006f40:	4801      	ldr	r0, [pc, #4]	@ (8006f48 <__malloc_lock+0x8>)
 8006f42:	f7ff b8ba 	b.w	80060ba <__retarget_lock_acquire_recursive>
 8006f46:	bf00      	nop
 8006f48:	200004fc 	.word	0x200004fc

08006f4c <__malloc_unlock>:
 8006f4c:	4801      	ldr	r0, [pc, #4]	@ (8006f54 <__malloc_unlock+0x8>)
 8006f4e:	f7ff b8b5 	b.w	80060bc <__retarget_lock_release_recursive>
 8006f52:	bf00      	nop
 8006f54:	200004fc 	.word	0x200004fc

08006f58 <_Balloc>:
 8006f58:	b570      	push	{r4, r5, r6, lr}
 8006f5a:	69c6      	ldr	r6, [r0, #28]
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	460d      	mov	r5, r1
 8006f60:	b976      	cbnz	r6, 8006f80 <_Balloc+0x28>
 8006f62:	2010      	movs	r0, #16
 8006f64:	f7ff ff42 	bl	8006dec <malloc>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	61e0      	str	r0, [r4, #28]
 8006f6c:	b920      	cbnz	r0, 8006f78 <_Balloc+0x20>
 8006f6e:	4b18      	ldr	r3, [pc, #96]	@ (8006fd0 <_Balloc+0x78>)
 8006f70:	4818      	ldr	r0, [pc, #96]	@ (8006fd4 <_Balloc+0x7c>)
 8006f72:	216b      	movs	r1, #107	@ 0x6b
 8006f74:	f000 fe96 	bl	8007ca4 <__assert_func>
 8006f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f7c:	6006      	str	r6, [r0, #0]
 8006f7e:	60c6      	str	r6, [r0, #12]
 8006f80:	69e6      	ldr	r6, [r4, #28]
 8006f82:	68f3      	ldr	r3, [r6, #12]
 8006f84:	b183      	cbz	r3, 8006fa8 <_Balloc+0x50>
 8006f86:	69e3      	ldr	r3, [r4, #28]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f8e:	b9b8      	cbnz	r0, 8006fc0 <_Balloc+0x68>
 8006f90:	2101      	movs	r1, #1
 8006f92:	fa01 f605 	lsl.w	r6, r1, r5
 8006f96:	1d72      	adds	r2, r6, #5
 8006f98:	0092      	lsls	r2, r2, #2
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f000 fea0 	bl	8007ce0 <_calloc_r>
 8006fa0:	b160      	cbz	r0, 8006fbc <_Balloc+0x64>
 8006fa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fa6:	e00e      	b.n	8006fc6 <_Balloc+0x6e>
 8006fa8:	2221      	movs	r2, #33	@ 0x21
 8006faa:	2104      	movs	r1, #4
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 fe97 	bl	8007ce0 <_calloc_r>
 8006fb2:	69e3      	ldr	r3, [r4, #28]
 8006fb4:	60f0      	str	r0, [r6, #12]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e4      	bne.n	8006f86 <_Balloc+0x2e>
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}
 8006fc0:	6802      	ldr	r2, [r0, #0]
 8006fc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fcc:	e7f7      	b.n	8006fbe <_Balloc+0x66>
 8006fce:	bf00      	nop
 8006fd0:	08007ec9 	.word	0x08007ec9
 8006fd4:	08007f49 	.word	0x08007f49

08006fd8 <_Bfree>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	69c6      	ldr	r6, [r0, #28]
 8006fdc:	4605      	mov	r5, r0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	b976      	cbnz	r6, 8007000 <_Bfree+0x28>
 8006fe2:	2010      	movs	r0, #16
 8006fe4:	f7ff ff02 	bl	8006dec <malloc>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	61e8      	str	r0, [r5, #28]
 8006fec:	b920      	cbnz	r0, 8006ff8 <_Bfree+0x20>
 8006fee:	4b09      	ldr	r3, [pc, #36]	@ (8007014 <_Bfree+0x3c>)
 8006ff0:	4809      	ldr	r0, [pc, #36]	@ (8007018 <_Bfree+0x40>)
 8006ff2:	218f      	movs	r1, #143	@ 0x8f
 8006ff4:	f000 fe56 	bl	8007ca4 <__assert_func>
 8006ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ffc:	6006      	str	r6, [r0, #0]
 8006ffe:	60c6      	str	r6, [r0, #12]
 8007000:	b13c      	cbz	r4, 8007012 <_Bfree+0x3a>
 8007002:	69eb      	ldr	r3, [r5, #28]
 8007004:	6862      	ldr	r2, [r4, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800700c:	6021      	str	r1, [r4, #0]
 800700e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007012:	bd70      	pop	{r4, r5, r6, pc}
 8007014:	08007ec9 	.word	0x08007ec9
 8007018:	08007f49 	.word	0x08007f49

0800701c <__multadd>:
 800701c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007020:	690d      	ldr	r5, [r1, #16]
 8007022:	4607      	mov	r7, r0
 8007024:	460c      	mov	r4, r1
 8007026:	461e      	mov	r6, r3
 8007028:	f101 0c14 	add.w	ip, r1, #20
 800702c:	2000      	movs	r0, #0
 800702e:	f8dc 3000 	ldr.w	r3, [ip]
 8007032:	b299      	uxth	r1, r3
 8007034:	fb02 6101 	mla	r1, r2, r1, r6
 8007038:	0c1e      	lsrs	r6, r3, #16
 800703a:	0c0b      	lsrs	r3, r1, #16
 800703c:	fb02 3306 	mla	r3, r2, r6, r3
 8007040:	b289      	uxth	r1, r1
 8007042:	3001      	adds	r0, #1
 8007044:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007048:	4285      	cmp	r5, r0
 800704a:	f84c 1b04 	str.w	r1, [ip], #4
 800704e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007052:	dcec      	bgt.n	800702e <__multadd+0x12>
 8007054:	b30e      	cbz	r6, 800709a <__multadd+0x7e>
 8007056:	68a3      	ldr	r3, [r4, #8]
 8007058:	42ab      	cmp	r3, r5
 800705a:	dc19      	bgt.n	8007090 <__multadd+0x74>
 800705c:	6861      	ldr	r1, [r4, #4]
 800705e:	4638      	mov	r0, r7
 8007060:	3101      	adds	r1, #1
 8007062:	f7ff ff79 	bl	8006f58 <_Balloc>
 8007066:	4680      	mov	r8, r0
 8007068:	b928      	cbnz	r0, 8007076 <__multadd+0x5a>
 800706a:	4602      	mov	r2, r0
 800706c:	4b0c      	ldr	r3, [pc, #48]	@ (80070a0 <__multadd+0x84>)
 800706e:	480d      	ldr	r0, [pc, #52]	@ (80070a4 <__multadd+0x88>)
 8007070:	21ba      	movs	r1, #186	@ 0xba
 8007072:	f000 fe17 	bl	8007ca4 <__assert_func>
 8007076:	6922      	ldr	r2, [r4, #16]
 8007078:	3202      	adds	r2, #2
 800707a:	f104 010c 	add.w	r1, r4, #12
 800707e:	0092      	lsls	r2, r2, #2
 8007080:	300c      	adds	r0, #12
 8007082:	f000 fe01 	bl	8007c88 <memcpy>
 8007086:	4621      	mov	r1, r4
 8007088:	4638      	mov	r0, r7
 800708a:	f7ff ffa5 	bl	8006fd8 <_Bfree>
 800708e:	4644      	mov	r4, r8
 8007090:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007094:	3501      	adds	r5, #1
 8007096:	615e      	str	r6, [r3, #20]
 8007098:	6125      	str	r5, [r4, #16]
 800709a:	4620      	mov	r0, r4
 800709c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a0:	08007f38 	.word	0x08007f38
 80070a4:	08007f49 	.word	0x08007f49

080070a8 <__hi0bits>:
 80070a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80070ac:	4603      	mov	r3, r0
 80070ae:	bf36      	itet	cc
 80070b0:	0403      	lslcc	r3, r0, #16
 80070b2:	2000      	movcs	r0, #0
 80070b4:	2010      	movcc	r0, #16
 80070b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070ba:	bf3c      	itt	cc
 80070bc:	021b      	lslcc	r3, r3, #8
 80070be:	3008      	addcc	r0, #8
 80070c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070c4:	bf3c      	itt	cc
 80070c6:	011b      	lslcc	r3, r3, #4
 80070c8:	3004      	addcc	r0, #4
 80070ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ce:	bf3c      	itt	cc
 80070d0:	009b      	lslcc	r3, r3, #2
 80070d2:	3002      	addcc	r0, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	db05      	blt.n	80070e4 <__hi0bits+0x3c>
 80070d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070dc:	f100 0001 	add.w	r0, r0, #1
 80070e0:	bf08      	it	eq
 80070e2:	2020      	moveq	r0, #32
 80070e4:	4770      	bx	lr

080070e6 <__lo0bits>:
 80070e6:	6803      	ldr	r3, [r0, #0]
 80070e8:	4602      	mov	r2, r0
 80070ea:	f013 0007 	ands.w	r0, r3, #7
 80070ee:	d00b      	beq.n	8007108 <__lo0bits+0x22>
 80070f0:	07d9      	lsls	r1, r3, #31
 80070f2:	d421      	bmi.n	8007138 <__lo0bits+0x52>
 80070f4:	0798      	lsls	r0, r3, #30
 80070f6:	bf49      	itett	mi
 80070f8:	085b      	lsrmi	r3, r3, #1
 80070fa:	089b      	lsrpl	r3, r3, #2
 80070fc:	2001      	movmi	r0, #1
 80070fe:	6013      	strmi	r3, [r2, #0]
 8007100:	bf5c      	itt	pl
 8007102:	6013      	strpl	r3, [r2, #0]
 8007104:	2002      	movpl	r0, #2
 8007106:	4770      	bx	lr
 8007108:	b299      	uxth	r1, r3
 800710a:	b909      	cbnz	r1, 8007110 <__lo0bits+0x2a>
 800710c:	0c1b      	lsrs	r3, r3, #16
 800710e:	2010      	movs	r0, #16
 8007110:	b2d9      	uxtb	r1, r3
 8007112:	b909      	cbnz	r1, 8007118 <__lo0bits+0x32>
 8007114:	3008      	adds	r0, #8
 8007116:	0a1b      	lsrs	r3, r3, #8
 8007118:	0719      	lsls	r1, r3, #28
 800711a:	bf04      	itt	eq
 800711c:	091b      	lsreq	r3, r3, #4
 800711e:	3004      	addeq	r0, #4
 8007120:	0799      	lsls	r1, r3, #30
 8007122:	bf04      	itt	eq
 8007124:	089b      	lsreq	r3, r3, #2
 8007126:	3002      	addeq	r0, #2
 8007128:	07d9      	lsls	r1, r3, #31
 800712a:	d403      	bmi.n	8007134 <__lo0bits+0x4e>
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	f100 0001 	add.w	r0, r0, #1
 8007132:	d003      	beq.n	800713c <__lo0bits+0x56>
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	4770      	bx	lr
 8007138:	2000      	movs	r0, #0
 800713a:	4770      	bx	lr
 800713c:	2020      	movs	r0, #32
 800713e:	4770      	bx	lr

08007140 <__i2b>:
 8007140:	b510      	push	{r4, lr}
 8007142:	460c      	mov	r4, r1
 8007144:	2101      	movs	r1, #1
 8007146:	f7ff ff07 	bl	8006f58 <_Balloc>
 800714a:	4602      	mov	r2, r0
 800714c:	b928      	cbnz	r0, 800715a <__i2b+0x1a>
 800714e:	4b05      	ldr	r3, [pc, #20]	@ (8007164 <__i2b+0x24>)
 8007150:	4805      	ldr	r0, [pc, #20]	@ (8007168 <__i2b+0x28>)
 8007152:	f240 1145 	movw	r1, #325	@ 0x145
 8007156:	f000 fda5 	bl	8007ca4 <__assert_func>
 800715a:	2301      	movs	r3, #1
 800715c:	6144      	str	r4, [r0, #20]
 800715e:	6103      	str	r3, [r0, #16]
 8007160:	bd10      	pop	{r4, pc}
 8007162:	bf00      	nop
 8007164:	08007f38 	.word	0x08007f38
 8007168:	08007f49 	.word	0x08007f49

0800716c <__multiply>:
 800716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007170:	4614      	mov	r4, r2
 8007172:	690a      	ldr	r2, [r1, #16]
 8007174:	6923      	ldr	r3, [r4, #16]
 8007176:	429a      	cmp	r2, r3
 8007178:	bfa8      	it	ge
 800717a:	4623      	movge	r3, r4
 800717c:	460f      	mov	r7, r1
 800717e:	bfa4      	itt	ge
 8007180:	460c      	movge	r4, r1
 8007182:	461f      	movge	r7, r3
 8007184:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007188:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800718c:	68a3      	ldr	r3, [r4, #8]
 800718e:	6861      	ldr	r1, [r4, #4]
 8007190:	eb0a 0609 	add.w	r6, sl, r9
 8007194:	42b3      	cmp	r3, r6
 8007196:	b085      	sub	sp, #20
 8007198:	bfb8      	it	lt
 800719a:	3101      	addlt	r1, #1
 800719c:	f7ff fedc 	bl	8006f58 <_Balloc>
 80071a0:	b930      	cbnz	r0, 80071b0 <__multiply+0x44>
 80071a2:	4602      	mov	r2, r0
 80071a4:	4b44      	ldr	r3, [pc, #272]	@ (80072b8 <__multiply+0x14c>)
 80071a6:	4845      	ldr	r0, [pc, #276]	@ (80072bc <__multiply+0x150>)
 80071a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80071ac:	f000 fd7a 	bl	8007ca4 <__assert_func>
 80071b0:	f100 0514 	add.w	r5, r0, #20
 80071b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071b8:	462b      	mov	r3, r5
 80071ba:	2200      	movs	r2, #0
 80071bc:	4543      	cmp	r3, r8
 80071be:	d321      	bcc.n	8007204 <__multiply+0x98>
 80071c0:	f107 0114 	add.w	r1, r7, #20
 80071c4:	f104 0214 	add.w	r2, r4, #20
 80071c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80071cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80071d0:	9302      	str	r3, [sp, #8]
 80071d2:	1b13      	subs	r3, r2, r4
 80071d4:	3b15      	subs	r3, #21
 80071d6:	f023 0303 	bic.w	r3, r3, #3
 80071da:	3304      	adds	r3, #4
 80071dc:	f104 0715 	add.w	r7, r4, #21
 80071e0:	42ba      	cmp	r2, r7
 80071e2:	bf38      	it	cc
 80071e4:	2304      	movcc	r3, #4
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	9b02      	ldr	r3, [sp, #8]
 80071ea:	9103      	str	r1, [sp, #12]
 80071ec:	428b      	cmp	r3, r1
 80071ee:	d80c      	bhi.n	800720a <__multiply+0x9e>
 80071f0:	2e00      	cmp	r6, #0
 80071f2:	dd03      	ble.n	80071fc <__multiply+0x90>
 80071f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d05b      	beq.n	80072b4 <__multiply+0x148>
 80071fc:	6106      	str	r6, [r0, #16]
 80071fe:	b005      	add	sp, #20
 8007200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007204:	f843 2b04 	str.w	r2, [r3], #4
 8007208:	e7d8      	b.n	80071bc <__multiply+0x50>
 800720a:	f8b1 a000 	ldrh.w	sl, [r1]
 800720e:	f1ba 0f00 	cmp.w	sl, #0
 8007212:	d024      	beq.n	800725e <__multiply+0xf2>
 8007214:	f104 0e14 	add.w	lr, r4, #20
 8007218:	46a9      	mov	r9, r5
 800721a:	f04f 0c00 	mov.w	ip, #0
 800721e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007222:	f8d9 3000 	ldr.w	r3, [r9]
 8007226:	fa1f fb87 	uxth.w	fp, r7
 800722a:	b29b      	uxth	r3, r3
 800722c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007230:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007234:	f8d9 7000 	ldr.w	r7, [r9]
 8007238:	4463      	add	r3, ip
 800723a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800723e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007242:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007246:	b29b      	uxth	r3, r3
 8007248:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800724c:	4572      	cmp	r2, lr
 800724e:	f849 3b04 	str.w	r3, [r9], #4
 8007252:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007256:	d8e2      	bhi.n	800721e <__multiply+0xb2>
 8007258:	9b01      	ldr	r3, [sp, #4]
 800725a:	f845 c003 	str.w	ip, [r5, r3]
 800725e:	9b03      	ldr	r3, [sp, #12]
 8007260:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007264:	3104      	adds	r1, #4
 8007266:	f1b9 0f00 	cmp.w	r9, #0
 800726a:	d021      	beq.n	80072b0 <__multiply+0x144>
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	f104 0c14 	add.w	ip, r4, #20
 8007272:	46ae      	mov	lr, r5
 8007274:	f04f 0a00 	mov.w	sl, #0
 8007278:	f8bc b000 	ldrh.w	fp, [ip]
 800727c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007280:	fb09 770b 	mla	r7, r9, fp, r7
 8007284:	4457      	add	r7, sl
 8007286:	b29b      	uxth	r3, r3
 8007288:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800728c:	f84e 3b04 	str.w	r3, [lr], #4
 8007290:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007294:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007298:	f8be 3000 	ldrh.w	r3, [lr]
 800729c:	fb09 330a 	mla	r3, r9, sl, r3
 80072a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80072a4:	4562      	cmp	r2, ip
 80072a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072aa:	d8e5      	bhi.n	8007278 <__multiply+0x10c>
 80072ac:	9f01      	ldr	r7, [sp, #4]
 80072ae:	51eb      	str	r3, [r5, r7]
 80072b0:	3504      	adds	r5, #4
 80072b2:	e799      	b.n	80071e8 <__multiply+0x7c>
 80072b4:	3e01      	subs	r6, #1
 80072b6:	e79b      	b.n	80071f0 <__multiply+0x84>
 80072b8:	08007f38 	.word	0x08007f38
 80072bc:	08007f49 	.word	0x08007f49

080072c0 <__pow5mult>:
 80072c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c4:	4615      	mov	r5, r2
 80072c6:	f012 0203 	ands.w	r2, r2, #3
 80072ca:	4607      	mov	r7, r0
 80072cc:	460e      	mov	r6, r1
 80072ce:	d007      	beq.n	80072e0 <__pow5mult+0x20>
 80072d0:	4c25      	ldr	r4, [pc, #148]	@ (8007368 <__pow5mult+0xa8>)
 80072d2:	3a01      	subs	r2, #1
 80072d4:	2300      	movs	r3, #0
 80072d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072da:	f7ff fe9f 	bl	800701c <__multadd>
 80072de:	4606      	mov	r6, r0
 80072e0:	10ad      	asrs	r5, r5, #2
 80072e2:	d03d      	beq.n	8007360 <__pow5mult+0xa0>
 80072e4:	69fc      	ldr	r4, [r7, #28]
 80072e6:	b97c      	cbnz	r4, 8007308 <__pow5mult+0x48>
 80072e8:	2010      	movs	r0, #16
 80072ea:	f7ff fd7f 	bl	8006dec <malloc>
 80072ee:	4602      	mov	r2, r0
 80072f0:	61f8      	str	r0, [r7, #28]
 80072f2:	b928      	cbnz	r0, 8007300 <__pow5mult+0x40>
 80072f4:	4b1d      	ldr	r3, [pc, #116]	@ (800736c <__pow5mult+0xac>)
 80072f6:	481e      	ldr	r0, [pc, #120]	@ (8007370 <__pow5mult+0xb0>)
 80072f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80072fc:	f000 fcd2 	bl	8007ca4 <__assert_func>
 8007300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007304:	6004      	str	r4, [r0, #0]
 8007306:	60c4      	str	r4, [r0, #12]
 8007308:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800730c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007310:	b94c      	cbnz	r4, 8007326 <__pow5mult+0x66>
 8007312:	f240 2171 	movw	r1, #625	@ 0x271
 8007316:	4638      	mov	r0, r7
 8007318:	f7ff ff12 	bl	8007140 <__i2b>
 800731c:	2300      	movs	r3, #0
 800731e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007322:	4604      	mov	r4, r0
 8007324:	6003      	str	r3, [r0, #0]
 8007326:	f04f 0900 	mov.w	r9, #0
 800732a:	07eb      	lsls	r3, r5, #31
 800732c:	d50a      	bpl.n	8007344 <__pow5mult+0x84>
 800732e:	4631      	mov	r1, r6
 8007330:	4622      	mov	r2, r4
 8007332:	4638      	mov	r0, r7
 8007334:	f7ff ff1a 	bl	800716c <__multiply>
 8007338:	4631      	mov	r1, r6
 800733a:	4680      	mov	r8, r0
 800733c:	4638      	mov	r0, r7
 800733e:	f7ff fe4b 	bl	8006fd8 <_Bfree>
 8007342:	4646      	mov	r6, r8
 8007344:	106d      	asrs	r5, r5, #1
 8007346:	d00b      	beq.n	8007360 <__pow5mult+0xa0>
 8007348:	6820      	ldr	r0, [r4, #0]
 800734a:	b938      	cbnz	r0, 800735c <__pow5mult+0x9c>
 800734c:	4622      	mov	r2, r4
 800734e:	4621      	mov	r1, r4
 8007350:	4638      	mov	r0, r7
 8007352:	f7ff ff0b 	bl	800716c <__multiply>
 8007356:	6020      	str	r0, [r4, #0]
 8007358:	f8c0 9000 	str.w	r9, [r0]
 800735c:	4604      	mov	r4, r0
 800735e:	e7e4      	b.n	800732a <__pow5mult+0x6a>
 8007360:	4630      	mov	r0, r6
 8007362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007366:	bf00      	nop
 8007368:	08007fa4 	.word	0x08007fa4
 800736c:	08007ec9 	.word	0x08007ec9
 8007370:	08007f49 	.word	0x08007f49

08007374 <__lshift>:
 8007374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007378:	460c      	mov	r4, r1
 800737a:	6849      	ldr	r1, [r1, #4]
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007382:	68a3      	ldr	r3, [r4, #8]
 8007384:	4607      	mov	r7, r0
 8007386:	4691      	mov	r9, r2
 8007388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800738c:	f108 0601 	add.w	r6, r8, #1
 8007390:	42b3      	cmp	r3, r6
 8007392:	db0b      	blt.n	80073ac <__lshift+0x38>
 8007394:	4638      	mov	r0, r7
 8007396:	f7ff fddf 	bl	8006f58 <_Balloc>
 800739a:	4605      	mov	r5, r0
 800739c:	b948      	cbnz	r0, 80073b2 <__lshift+0x3e>
 800739e:	4602      	mov	r2, r0
 80073a0:	4b28      	ldr	r3, [pc, #160]	@ (8007444 <__lshift+0xd0>)
 80073a2:	4829      	ldr	r0, [pc, #164]	@ (8007448 <__lshift+0xd4>)
 80073a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80073a8:	f000 fc7c 	bl	8007ca4 <__assert_func>
 80073ac:	3101      	adds	r1, #1
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	e7ee      	b.n	8007390 <__lshift+0x1c>
 80073b2:	2300      	movs	r3, #0
 80073b4:	f100 0114 	add.w	r1, r0, #20
 80073b8:	f100 0210 	add.w	r2, r0, #16
 80073bc:	4618      	mov	r0, r3
 80073be:	4553      	cmp	r3, sl
 80073c0:	db33      	blt.n	800742a <__lshift+0xb6>
 80073c2:	6920      	ldr	r0, [r4, #16]
 80073c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073c8:	f104 0314 	add.w	r3, r4, #20
 80073cc:	f019 091f 	ands.w	r9, r9, #31
 80073d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073d8:	d02b      	beq.n	8007432 <__lshift+0xbe>
 80073da:	f1c9 0e20 	rsb	lr, r9, #32
 80073de:	468a      	mov	sl, r1
 80073e0:	2200      	movs	r2, #0
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	fa00 f009 	lsl.w	r0, r0, r9
 80073e8:	4310      	orrs	r0, r2
 80073ea:	f84a 0b04 	str.w	r0, [sl], #4
 80073ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80073f2:	459c      	cmp	ip, r3
 80073f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80073f8:	d8f3      	bhi.n	80073e2 <__lshift+0x6e>
 80073fa:	ebac 0304 	sub.w	r3, ip, r4
 80073fe:	3b15      	subs	r3, #21
 8007400:	f023 0303 	bic.w	r3, r3, #3
 8007404:	3304      	adds	r3, #4
 8007406:	f104 0015 	add.w	r0, r4, #21
 800740a:	4584      	cmp	ip, r0
 800740c:	bf38      	it	cc
 800740e:	2304      	movcc	r3, #4
 8007410:	50ca      	str	r2, [r1, r3]
 8007412:	b10a      	cbz	r2, 8007418 <__lshift+0xa4>
 8007414:	f108 0602 	add.w	r6, r8, #2
 8007418:	3e01      	subs	r6, #1
 800741a:	4638      	mov	r0, r7
 800741c:	612e      	str	r6, [r5, #16]
 800741e:	4621      	mov	r1, r4
 8007420:	f7ff fdda 	bl	8006fd8 <_Bfree>
 8007424:	4628      	mov	r0, r5
 8007426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742a:	f842 0f04 	str.w	r0, [r2, #4]!
 800742e:	3301      	adds	r3, #1
 8007430:	e7c5      	b.n	80073be <__lshift+0x4a>
 8007432:	3904      	subs	r1, #4
 8007434:	f853 2b04 	ldr.w	r2, [r3], #4
 8007438:	f841 2f04 	str.w	r2, [r1, #4]!
 800743c:	459c      	cmp	ip, r3
 800743e:	d8f9      	bhi.n	8007434 <__lshift+0xc0>
 8007440:	e7ea      	b.n	8007418 <__lshift+0xa4>
 8007442:	bf00      	nop
 8007444:	08007f38 	.word	0x08007f38
 8007448:	08007f49 	.word	0x08007f49

0800744c <__mcmp>:
 800744c:	690a      	ldr	r2, [r1, #16]
 800744e:	4603      	mov	r3, r0
 8007450:	6900      	ldr	r0, [r0, #16]
 8007452:	1a80      	subs	r0, r0, r2
 8007454:	b530      	push	{r4, r5, lr}
 8007456:	d10e      	bne.n	8007476 <__mcmp+0x2a>
 8007458:	3314      	adds	r3, #20
 800745a:	3114      	adds	r1, #20
 800745c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007460:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007464:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007468:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800746c:	4295      	cmp	r5, r2
 800746e:	d003      	beq.n	8007478 <__mcmp+0x2c>
 8007470:	d205      	bcs.n	800747e <__mcmp+0x32>
 8007472:	f04f 30ff 	mov.w	r0, #4294967295
 8007476:	bd30      	pop	{r4, r5, pc}
 8007478:	42a3      	cmp	r3, r4
 800747a:	d3f3      	bcc.n	8007464 <__mcmp+0x18>
 800747c:	e7fb      	b.n	8007476 <__mcmp+0x2a>
 800747e:	2001      	movs	r0, #1
 8007480:	e7f9      	b.n	8007476 <__mcmp+0x2a>
	...

08007484 <__mdiff>:
 8007484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007488:	4689      	mov	r9, r1
 800748a:	4606      	mov	r6, r0
 800748c:	4611      	mov	r1, r2
 800748e:	4648      	mov	r0, r9
 8007490:	4614      	mov	r4, r2
 8007492:	f7ff ffdb 	bl	800744c <__mcmp>
 8007496:	1e05      	subs	r5, r0, #0
 8007498:	d112      	bne.n	80074c0 <__mdiff+0x3c>
 800749a:	4629      	mov	r1, r5
 800749c:	4630      	mov	r0, r6
 800749e:	f7ff fd5b 	bl	8006f58 <_Balloc>
 80074a2:	4602      	mov	r2, r0
 80074a4:	b928      	cbnz	r0, 80074b2 <__mdiff+0x2e>
 80074a6:	4b3f      	ldr	r3, [pc, #252]	@ (80075a4 <__mdiff+0x120>)
 80074a8:	f240 2137 	movw	r1, #567	@ 0x237
 80074ac:	483e      	ldr	r0, [pc, #248]	@ (80075a8 <__mdiff+0x124>)
 80074ae:	f000 fbf9 	bl	8007ca4 <__assert_func>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074b8:	4610      	mov	r0, r2
 80074ba:	b003      	add	sp, #12
 80074bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c0:	bfbc      	itt	lt
 80074c2:	464b      	movlt	r3, r9
 80074c4:	46a1      	movlt	r9, r4
 80074c6:	4630      	mov	r0, r6
 80074c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80074cc:	bfba      	itte	lt
 80074ce:	461c      	movlt	r4, r3
 80074d0:	2501      	movlt	r5, #1
 80074d2:	2500      	movge	r5, #0
 80074d4:	f7ff fd40 	bl	8006f58 <_Balloc>
 80074d8:	4602      	mov	r2, r0
 80074da:	b918      	cbnz	r0, 80074e4 <__mdiff+0x60>
 80074dc:	4b31      	ldr	r3, [pc, #196]	@ (80075a4 <__mdiff+0x120>)
 80074de:	f240 2145 	movw	r1, #581	@ 0x245
 80074e2:	e7e3      	b.n	80074ac <__mdiff+0x28>
 80074e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80074e8:	6926      	ldr	r6, [r4, #16]
 80074ea:	60c5      	str	r5, [r0, #12]
 80074ec:	f109 0310 	add.w	r3, r9, #16
 80074f0:	f109 0514 	add.w	r5, r9, #20
 80074f4:	f104 0e14 	add.w	lr, r4, #20
 80074f8:	f100 0b14 	add.w	fp, r0, #20
 80074fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007500:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	46d9      	mov	r9, fp
 8007508:	f04f 0c00 	mov.w	ip, #0
 800750c:	9b01      	ldr	r3, [sp, #4]
 800750e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007512:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007516:	9301      	str	r3, [sp, #4]
 8007518:	fa1f f38a 	uxth.w	r3, sl
 800751c:	4619      	mov	r1, r3
 800751e:	b283      	uxth	r3, r0
 8007520:	1acb      	subs	r3, r1, r3
 8007522:	0c00      	lsrs	r0, r0, #16
 8007524:	4463      	add	r3, ip
 8007526:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800752a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800752e:	b29b      	uxth	r3, r3
 8007530:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007534:	4576      	cmp	r6, lr
 8007536:	f849 3b04 	str.w	r3, [r9], #4
 800753a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800753e:	d8e5      	bhi.n	800750c <__mdiff+0x88>
 8007540:	1b33      	subs	r3, r6, r4
 8007542:	3b15      	subs	r3, #21
 8007544:	f023 0303 	bic.w	r3, r3, #3
 8007548:	3415      	adds	r4, #21
 800754a:	3304      	adds	r3, #4
 800754c:	42a6      	cmp	r6, r4
 800754e:	bf38      	it	cc
 8007550:	2304      	movcc	r3, #4
 8007552:	441d      	add	r5, r3
 8007554:	445b      	add	r3, fp
 8007556:	461e      	mov	r6, r3
 8007558:	462c      	mov	r4, r5
 800755a:	4544      	cmp	r4, r8
 800755c:	d30e      	bcc.n	800757c <__mdiff+0xf8>
 800755e:	f108 0103 	add.w	r1, r8, #3
 8007562:	1b49      	subs	r1, r1, r5
 8007564:	f021 0103 	bic.w	r1, r1, #3
 8007568:	3d03      	subs	r5, #3
 800756a:	45a8      	cmp	r8, r5
 800756c:	bf38      	it	cc
 800756e:	2100      	movcc	r1, #0
 8007570:	440b      	add	r3, r1
 8007572:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007576:	b191      	cbz	r1, 800759e <__mdiff+0x11a>
 8007578:	6117      	str	r7, [r2, #16]
 800757a:	e79d      	b.n	80074b8 <__mdiff+0x34>
 800757c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007580:	46e6      	mov	lr, ip
 8007582:	0c08      	lsrs	r0, r1, #16
 8007584:	fa1c fc81 	uxtah	ip, ip, r1
 8007588:	4471      	add	r1, lr
 800758a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800758e:	b289      	uxth	r1, r1
 8007590:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007594:	f846 1b04 	str.w	r1, [r6], #4
 8007598:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800759c:	e7dd      	b.n	800755a <__mdiff+0xd6>
 800759e:	3f01      	subs	r7, #1
 80075a0:	e7e7      	b.n	8007572 <__mdiff+0xee>
 80075a2:	bf00      	nop
 80075a4:	08007f38 	.word	0x08007f38
 80075a8:	08007f49 	.word	0x08007f49

080075ac <__d2b>:
 80075ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075b0:	460f      	mov	r7, r1
 80075b2:	2101      	movs	r1, #1
 80075b4:	ec59 8b10 	vmov	r8, r9, d0
 80075b8:	4616      	mov	r6, r2
 80075ba:	f7ff fccd 	bl	8006f58 <_Balloc>
 80075be:	4604      	mov	r4, r0
 80075c0:	b930      	cbnz	r0, 80075d0 <__d2b+0x24>
 80075c2:	4602      	mov	r2, r0
 80075c4:	4b23      	ldr	r3, [pc, #140]	@ (8007654 <__d2b+0xa8>)
 80075c6:	4824      	ldr	r0, [pc, #144]	@ (8007658 <__d2b+0xac>)
 80075c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80075cc:	f000 fb6a 	bl	8007ca4 <__assert_func>
 80075d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075d8:	b10d      	cbz	r5, 80075de <__d2b+0x32>
 80075da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075de:	9301      	str	r3, [sp, #4]
 80075e0:	f1b8 0300 	subs.w	r3, r8, #0
 80075e4:	d023      	beq.n	800762e <__d2b+0x82>
 80075e6:	4668      	mov	r0, sp
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	f7ff fd7c 	bl	80070e6 <__lo0bits>
 80075ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075f2:	b1d0      	cbz	r0, 800762a <__d2b+0x7e>
 80075f4:	f1c0 0320 	rsb	r3, r0, #32
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	430b      	orrs	r3, r1
 80075fe:	40c2      	lsrs	r2, r0
 8007600:	6163      	str	r3, [r4, #20]
 8007602:	9201      	str	r2, [sp, #4]
 8007604:	9b01      	ldr	r3, [sp, #4]
 8007606:	61a3      	str	r3, [r4, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	bf0c      	ite	eq
 800760c:	2201      	moveq	r2, #1
 800760e:	2202      	movne	r2, #2
 8007610:	6122      	str	r2, [r4, #16]
 8007612:	b1a5      	cbz	r5, 800763e <__d2b+0x92>
 8007614:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007618:	4405      	add	r5, r0
 800761a:	603d      	str	r5, [r7, #0]
 800761c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007620:	6030      	str	r0, [r6, #0]
 8007622:	4620      	mov	r0, r4
 8007624:	b003      	add	sp, #12
 8007626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800762a:	6161      	str	r1, [r4, #20]
 800762c:	e7ea      	b.n	8007604 <__d2b+0x58>
 800762e:	a801      	add	r0, sp, #4
 8007630:	f7ff fd59 	bl	80070e6 <__lo0bits>
 8007634:	9b01      	ldr	r3, [sp, #4]
 8007636:	6163      	str	r3, [r4, #20]
 8007638:	3020      	adds	r0, #32
 800763a:	2201      	movs	r2, #1
 800763c:	e7e8      	b.n	8007610 <__d2b+0x64>
 800763e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007642:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007646:	6038      	str	r0, [r7, #0]
 8007648:	6918      	ldr	r0, [r3, #16]
 800764a:	f7ff fd2d 	bl	80070a8 <__hi0bits>
 800764e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007652:	e7e5      	b.n	8007620 <__d2b+0x74>
 8007654:	08007f38 	.word	0x08007f38
 8007658:	08007f49 	.word	0x08007f49

0800765c <__sfputc_r>:
 800765c:	6893      	ldr	r3, [r2, #8]
 800765e:	3b01      	subs	r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	b410      	push	{r4}
 8007664:	6093      	str	r3, [r2, #8]
 8007666:	da08      	bge.n	800767a <__sfputc_r+0x1e>
 8007668:	6994      	ldr	r4, [r2, #24]
 800766a:	42a3      	cmp	r3, r4
 800766c:	db01      	blt.n	8007672 <__sfputc_r+0x16>
 800766e:	290a      	cmp	r1, #10
 8007670:	d103      	bne.n	800767a <__sfputc_r+0x1e>
 8007672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007676:	f000 ba41 	b.w	8007afc <__swbuf_r>
 800767a:	6813      	ldr	r3, [r2, #0]
 800767c:	1c58      	adds	r0, r3, #1
 800767e:	6010      	str	r0, [r2, #0]
 8007680:	7019      	strb	r1, [r3, #0]
 8007682:	4608      	mov	r0, r1
 8007684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007688:	4770      	bx	lr

0800768a <__sfputs_r>:
 800768a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768c:	4606      	mov	r6, r0
 800768e:	460f      	mov	r7, r1
 8007690:	4614      	mov	r4, r2
 8007692:	18d5      	adds	r5, r2, r3
 8007694:	42ac      	cmp	r4, r5
 8007696:	d101      	bne.n	800769c <__sfputs_r+0x12>
 8007698:	2000      	movs	r0, #0
 800769a:	e007      	b.n	80076ac <__sfputs_r+0x22>
 800769c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a0:	463a      	mov	r2, r7
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7ff ffda 	bl	800765c <__sfputc_r>
 80076a8:	1c43      	adds	r3, r0, #1
 80076aa:	d1f3      	bne.n	8007694 <__sfputs_r+0xa>
 80076ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076b0 <_vfiprintf_r>:
 80076b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b4:	460d      	mov	r5, r1
 80076b6:	b09d      	sub	sp, #116	@ 0x74
 80076b8:	4614      	mov	r4, r2
 80076ba:	4698      	mov	r8, r3
 80076bc:	4606      	mov	r6, r0
 80076be:	b118      	cbz	r0, 80076c8 <_vfiprintf_r+0x18>
 80076c0:	6a03      	ldr	r3, [r0, #32]
 80076c2:	b90b      	cbnz	r3, 80076c8 <_vfiprintf_r+0x18>
 80076c4:	f7fe fb34 	bl	8005d30 <__sinit>
 80076c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076ca:	07d9      	lsls	r1, r3, #31
 80076cc:	d405      	bmi.n	80076da <_vfiprintf_r+0x2a>
 80076ce:	89ab      	ldrh	r3, [r5, #12]
 80076d0:	059a      	lsls	r2, r3, #22
 80076d2:	d402      	bmi.n	80076da <_vfiprintf_r+0x2a>
 80076d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076d6:	f7fe fcf0 	bl	80060ba <__retarget_lock_acquire_recursive>
 80076da:	89ab      	ldrh	r3, [r5, #12]
 80076dc:	071b      	lsls	r3, r3, #28
 80076de:	d501      	bpl.n	80076e4 <_vfiprintf_r+0x34>
 80076e0:	692b      	ldr	r3, [r5, #16]
 80076e2:	b99b      	cbnz	r3, 800770c <_vfiprintf_r+0x5c>
 80076e4:	4629      	mov	r1, r5
 80076e6:	4630      	mov	r0, r6
 80076e8:	f000 fa46 	bl	8007b78 <__swsetup_r>
 80076ec:	b170      	cbz	r0, 800770c <_vfiprintf_r+0x5c>
 80076ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076f0:	07dc      	lsls	r4, r3, #31
 80076f2:	d504      	bpl.n	80076fe <_vfiprintf_r+0x4e>
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295
 80076f8:	b01d      	add	sp, #116	@ 0x74
 80076fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fe:	89ab      	ldrh	r3, [r5, #12]
 8007700:	0598      	lsls	r0, r3, #22
 8007702:	d4f7      	bmi.n	80076f4 <_vfiprintf_r+0x44>
 8007704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007706:	f7fe fcd9 	bl	80060bc <__retarget_lock_release_recursive>
 800770a:	e7f3      	b.n	80076f4 <_vfiprintf_r+0x44>
 800770c:	2300      	movs	r3, #0
 800770e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007710:	2320      	movs	r3, #32
 8007712:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007716:	f8cd 800c 	str.w	r8, [sp, #12]
 800771a:	2330      	movs	r3, #48	@ 0x30
 800771c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80078cc <_vfiprintf_r+0x21c>
 8007720:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007724:	f04f 0901 	mov.w	r9, #1
 8007728:	4623      	mov	r3, r4
 800772a:	469a      	mov	sl, r3
 800772c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007730:	b10a      	cbz	r2, 8007736 <_vfiprintf_r+0x86>
 8007732:	2a25      	cmp	r2, #37	@ 0x25
 8007734:	d1f9      	bne.n	800772a <_vfiprintf_r+0x7a>
 8007736:	ebba 0b04 	subs.w	fp, sl, r4
 800773a:	d00b      	beq.n	8007754 <_vfiprintf_r+0xa4>
 800773c:	465b      	mov	r3, fp
 800773e:	4622      	mov	r2, r4
 8007740:	4629      	mov	r1, r5
 8007742:	4630      	mov	r0, r6
 8007744:	f7ff ffa1 	bl	800768a <__sfputs_r>
 8007748:	3001      	adds	r0, #1
 800774a:	f000 80a7 	beq.w	800789c <_vfiprintf_r+0x1ec>
 800774e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007750:	445a      	add	r2, fp
 8007752:	9209      	str	r2, [sp, #36]	@ 0x24
 8007754:	f89a 3000 	ldrb.w	r3, [sl]
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 809f 	beq.w	800789c <_vfiprintf_r+0x1ec>
 800775e:	2300      	movs	r3, #0
 8007760:	f04f 32ff 	mov.w	r2, #4294967295
 8007764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007768:	f10a 0a01 	add.w	sl, sl, #1
 800776c:	9304      	str	r3, [sp, #16]
 800776e:	9307      	str	r3, [sp, #28]
 8007770:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007774:	931a      	str	r3, [sp, #104]	@ 0x68
 8007776:	4654      	mov	r4, sl
 8007778:	2205      	movs	r2, #5
 800777a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800777e:	4853      	ldr	r0, [pc, #332]	@ (80078cc <_vfiprintf_r+0x21c>)
 8007780:	f7f8 fd26 	bl	80001d0 <memchr>
 8007784:	9a04      	ldr	r2, [sp, #16]
 8007786:	b9d8      	cbnz	r0, 80077c0 <_vfiprintf_r+0x110>
 8007788:	06d1      	lsls	r1, r2, #27
 800778a:	bf44      	itt	mi
 800778c:	2320      	movmi	r3, #32
 800778e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007792:	0713      	lsls	r3, r2, #28
 8007794:	bf44      	itt	mi
 8007796:	232b      	movmi	r3, #43	@ 0x2b
 8007798:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800779c:	f89a 3000 	ldrb.w	r3, [sl]
 80077a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80077a2:	d015      	beq.n	80077d0 <_vfiprintf_r+0x120>
 80077a4:	9a07      	ldr	r2, [sp, #28]
 80077a6:	4654      	mov	r4, sl
 80077a8:	2000      	movs	r0, #0
 80077aa:	f04f 0c0a 	mov.w	ip, #10
 80077ae:	4621      	mov	r1, r4
 80077b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077b4:	3b30      	subs	r3, #48	@ 0x30
 80077b6:	2b09      	cmp	r3, #9
 80077b8:	d94b      	bls.n	8007852 <_vfiprintf_r+0x1a2>
 80077ba:	b1b0      	cbz	r0, 80077ea <_vfiprintf_r+0x13a>
 80077bc:	9207      	str	r2, [sp, #28]
 80077be:	e014      	b.n	80077ea <_vfiprintf_r+0x13a>
 80077c0:	eba0 0308 	sub.w	r3, r0, r8
 80077c4:	fa09 f303 	lsl.w	r3, r9, r3
 80077c8:	4313      	orrs	r3, r2
 80077ca:	9304      	str	r3, [sp, #16]
 80077cc:	46a2      	mov	sl, r4
 80077ce:	e7d2      	b.n	8007776 <_vfiprintf_r+0xc6>
 80077d0:	9b03      	ldr	r3, [sp, #12]
 80077d2:	1d19      	adds	r1, r3, #4
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	9103      	str	r1, [sp, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	bfbb      	ittet	lt
 80077dc:	425b      	neglt	r3, r3
 80077de:	f042 0202 	orrlt.w	r2, r2, #2
 80077e2:	9307      	strge	r3, [sp, #28]
 80077e4:	9307      	strlt	r3, [sp, #28]
 80077e6:	bfb8      	it	lt
 80077e8:	9204      	strlt	r2, [sp, #16]
 80077ea:	7823      	ldrb	r3, [r4, #0]
 80077ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80077ee:	d10a      	bne.n	8007806 <_vfiprintf_r+0x156>
 80077f0:	7863      	ldrb	r3, [r4, #1]
 80077f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80077f4:	d132      	bne.n	800785c <_vfiprintf_r+0x1ac>
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	1d1a      	adds	r2, r3, #4
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	9203      	str	r2, [sp, #12]
 80077fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007802:	3402      	adds	r4, #2
 8007804:	9305      	str	r3, [sp, #20]
 8007806:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80078dc <_vfiprintf_r+0x22c>
 800780a:	7821      	ldrb	r1, [r4, #0]
 800780c:	2203      	movs	r2, #3
 800780e:	4650      	mov	r0, sl
 8007810:	f7f8 fcde 	bl	80001d0 <memchr>
 8007814:	b138      	cbz	r0, 8007826 <_vfiprintf_r+0x176>
 8007816:	9b04      	ldr	r3, [sp, #16]
 8007818:	eba0 000a 	sub.w	r0, r0, sl
 800781c:	2240      	movs	r2, #64	@ 0x40
 800781e:	4082      	lsls	r2, r0
 8007820:	4313      	orrs	r3, r2
 8007822:	3401      	adds	r4, #1
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800782a:	4829      	ldr	r0, [pc, #164]	@ (80078d0 <_vfiprintf_r+0x220>)
 800782c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007830:	2206      	movs	r2, #6
 8007832:	f7f8 fccd 	bl	80001d0 <memchr>
 8007836:	2800      	cmp	r0, #0
 8007838:	d03f      	beq.n	80078ba <_vfiprintf_r+0x20a>
 800783a:	4b26      	ldr	r3, [pc, #152]	@ (80078d4 <_vfiprintf_r+0x224>)
 800783c:	bb1b      	cbnz	r3, 8007886 <_vfiprintf_r+0x1d6>
 800783e:	9b03      	ldr	r3, [sp, #12]
 8007840:	3307      	adds	r3, #7
 8007842:	f023 0307 	bic.w	r3, r3, #7
 8007846:	3308      	adds	r3, #8
 8007848:	9303      	str	r3, [sp, #12]
 800784a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800784c:	443b      	add	r3, r7
 800784e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007850:	e76a      	b.n	8007728 <_vfiprintf_r+0x78>
 8007852:	fb0c 3202 	mla	r2, ip, r2, r3
 8007856:	460c      	mov	r4, r1
 8007858:	2001      	movs	r0, #1
 800785a:	e7a8      	b.n	80077ae <_vfiprintf_r+0xfe>
 800785c:	2300      	movs	r3, #0
 800785e:	3401      	adds	r4, #1
 8007860:	9305      	str	r3, [sp, #20]
 8007862:	4619      	mov	r1, r3
 8007864:	f04f 0c0a 	mov.w	ip, #10
 8007868:	4620      	mov	r0, r4
 800786a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800786e:	3a30      	subs	r2, #48	@ 0x30
 8007870:	2a09      	cmp	r2, #9
 8007872:	d903      	bls.n	800787c <_vfiprintf_r+0x1cc>
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0c6      	beq.n	8007806 <_vfiprintf_r+0x156>
 8007878:	9105      	str	r1, [sp, #20]
 800787a:	e7c4      	b.n	8007806 <_vfiprintf_r+0x156>
 800787c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007880:	4604      	mov	r4, r0
 8007882:	2301      	movs	r3, #1
 8007884:	e7f0      	b.n	8007868 <_vfiprintf_r+0x1b8>
 8007886:	ab03      	add	r3, sp, #12
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	462a      	mov	r2, r5
 800788c:	4b12      	ldr	r3, [pc, #72]	@ (80078d8 <_vfiprintf_r+0x228>)
 800788e:	a904      	add	r1, sp, #16
 8007890:	4630      	mov	r0, r6
 8007892:	f7fd fe09 	bl	80054a8 <_printf_float>
 8007896:	4607      	mov	r7, r0
 8007898:	1c78      	adds	r0, r7, #1
 800789a:	d1d6      	bne.n	800784a <_vfiprintf_r+0x19a>
 800789c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800789e:	07d9      	lsls	r1, r3, #31
 80078a0:	d405      	bmi.n	80078ae <_vfiprintf_r+0x1fe>
 80078a2:	89ab      	ldrh	r3, [r5, #12]
 80078a4:	059a      	lsls	r2, r3, #22
 80078a6:	d402      	bmi.n	80078ae <_vfiprintf_r+0x1fe>
 80078a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078aa:	f7fe fc07 	bl	80060bc <__retarget_lock_release_recursive>
 80078ae:	89ab      	ldrh	r3, [r5, #12]
 80078b0:	065b      	lsls	r3, r3, #25
 80078b2:	f53f af1f 	bmi.w	80076f4 <_vfiprintf_r+0x44>
 80078b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078b8:	e71e      	b.n	80076f8 <_vfiprintf_r+0x48>
 80078ba:	ab03      	add	r3, sp, #12
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	462a      	mov	r2, r5
 80078c0:	4b05      	ldr	r3, [pc, #20]	@ (80078d8 <_vfiprintf_r+0x228>)
 80078c2:	a904      	add	r1, sp, #16
 80078c4:	4630      	mov	r0, r6
 80078c6:	f7fe f887 	bl	80059d8 <_printf_i>
 80078ca:	e7e4      	b.n	8007896 <_vfiprintf_r+0x1e6>
 80078cc:	080080a0 	.word	0x080080a0
 80078d0:	080080aa 	.word	0x080080aa
 80078d4:	080054a9 	.word	0x080054a9
 80078d8:	0800768b 	.word	0x0800768b
 80078dc:	080080a6 	.word	0x080080a6

080078e0 <__sflush_r>:
 80078e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e8:	0716      	lsls	r6, r2, #28
 80078ea:	4605      	mov	r5, r0
 80078ec:	460c      	mov	r4, r1
 80078ee:	d454      	bmi.n	800799a <__sflush_r+0xba>
 80078f0:	684b      	ldr	r3, [r1, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	dc02      	bgt.n	80078fc <__sflush_r+0x1c>
 80078f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dd48      	ble.n	800798e <__sflush_r+0xae>
 80078fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078fe:	2e00      	cmp	r6, #0
 8007900:	d045      	beq.n	800798e <__sflush_r+0xae>
 8007902:	2300      	movs	r3, #0
 8007904:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007908:	682f      	ldr	r7, [r5, #0]
 800790a:	6a21      	ldr	r1, [r4, #32]
 800790c:	602b      	str	r3, [r5, #0]
 800790e:	d030      	beq.n	8007972 <__sflush_r+0x92>
 8007910:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	0759      	lsls	r1, r3, #29
 8007916:	d505      	bpl.n	8007924 <__sflush_r+0x44>
 8007918:	6863      	ldr	r3, [r4, #4]
 800791a:	1ad2      	subs	r2, r2, r3
 800791c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800791e:	b10b      	cbz	r3, 8007924 <__sflush_r+0x44>
 8007920:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007922:	1ad2      	subs	r2, r2, r3
 8007924:	2300      	movs	r3, #0
 8007926:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007928:	6a21      	ldr	r1, [r4, #32]
 800792a:	4628      	mov	r0, r5
 800792c:	47b0      	blx	r6
 800792e:	1c43      	adds	r3, r0, #1
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	d106      	bne.n	8007942 <__sflush_r+0x62>
 8007934:	6829      	ldr	r1, [r5, #0]
 8007936:	291d      	cmp	r1, #29
 8007938:	d82b      	bhi.n	8007992 <__sflush_r+0xb2>
 800793a:	4a2a      	ldr	r2, [pc, #168]	@ (80079e4 <__sflush_r+0x104>)
 800793c:	410a      	asrs	r2, r1
 800793e:	07d6      	lsls	r6, r2, #31
 8007940:	d427      	bmi.n	8007992 <__sflush_r+0xb2>
 8007942:	2200      	movs	r2, #0
 8007944:	6062      	str	r2, [r4, #4]
 8007946:	04d9      	lsls	r1, r3, #19
 8007948:	6922      	ldr	r2, [r4, #16]
 800794a:	6022      	str	r2, [r4, #0]
 800794c:	d504      	bpl.n	8007958 <__sflush_r+0x78>
 800794e:	1c42      	adds	r2, r0, #1
 8007950:	d101      	bne.n	8007956 <__sflush_r+0x76>
 8007952:	682b      	ldr	r3, [r5, #0]
 8007954:	b903      	cbnz	r3, 8007958 <__sflush_r+0x78>
 8007956:	6560      	str	r0, [r4, #84]	@ 0x54
 8007958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800795a:	602f      	str	r7, [r5, #0]
 800795c:	b1b9      	cbz	r1, 800798e <__sflush_r+0xae>
 800795e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007962:	4299      	cmp	r1, r3
 8007964:	d002      	beq.n	800796c <__sflush_r+0x8c>
 8007966:	4628      	mov	r0, r5
 8007968:	f7ff f9f6 	bl	8006d58 <_free_r>
 800796c:	2300      	movs	r3, #0
 800796e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007970:	e00d      	b.n	800798e <__sflush_r+0xae>
 8007972:	2301      	movs	r3, #1
 8007974:	4628      	mov	r0, r5
 8007976:	47b0      	blx	r6
 8007978:	4602      	mov	r2, r0
 800797a:	1c50      	adds	r0, r2, #1
 800797c:	d1c9      	bne.n	8007912 <__sflush_r+0x32>
 800797e:	682b      	ldr	r3, [r5, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0c6      	beq.n	8007912 <__sflush_r+0x32>
 8007984:	2b1d      	cmp	r3, #29
 8007986:	d001      	beq.n	800798c <__sflush_r+0xac>
 8007988:	2b16      	cmp	r3, #22
 800798a:	d11e      	bne.n	80079ca <__sflush_r+0xea>
 800798c:	602f      	str	r7, [r5, #0]
 800798e:	2000      	movs	r0, #0
 8007990:	e022      	b.n	80079d8 <__sflush_r+0xf8>
 8007992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007996:	b21b      	sxth	r3, r3
 8007998:	e01b      	b.n	80079d2 <__sflush_r+0xf2>
 800799a:	690f      	ldr	r7, [r1, #16]
 800799c:	2f00      	cmp	r7, #0
 800799e:	d0f6      	beq.n	800798e <__sflush_r+0xae>
 80079a0:	0793      	lsls	r3, r2, #30
 80079a2:	680e      	ldr	r6, [r1, #0]
 80079a4:	bf08      	it	eq
 80079a6:	694b      	ldreq	r3, [r1, #20]
 80079a8:	600f      	str	r7, [r1, #0]
 80079aa:	bf18      	it	ne
 80079ac:	2300      	movne	r3, #0
 80079ae:	eba6 0807 	sub.w	r8, r6, r7
 80079b2:	608b      	str	r3, [r1, #8]
 80079b4:	f1b8 0f00 	cmp.w	r8, #0
 80079b8:	dde9      	ble.n	800798e <__sflush_r+0xae>
 80079ba:	6a21      	ldr	r1, [r4, #32]
 80079bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079be:	4643      	mov	r3, r8
 80079c0:	463a      	mov	r2, r7
 80079c2:	4628      	mov	r0, r5
 80079c4:	47b0      	blx	r6
 80079c6:	2800      	cmp	r0, #0
 80079c8:	dc08      	bgt.n	80079dc <__sflush_r+0xfc>
 80079ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079d2:	81a3      	strh	r3, [r4, #12]
 80079d4:	f04f 30ff 	mov.w	r0, #4294967295
 80079d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079dc:	4407      	add	r7, r0
 80079de:	eba8 0800 	sub.w	r8, r8, r0
 80079e2:	e7e7      	b.n	80079b4 <__sflush_r+0xd4>
 80079e4:	dfbffffe 	.word	0xdfbffffe

080079e8 <_fflush_r>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	690b      	ldr	r3, [r1, #16]
 80079ec:	4605      	mov	r5, r0
 80079ee:	460c      	mov	r4, r1
 80079f0:	b913      	cbnz	r3, 80079f8 <_fflush_r+0x10>
 80079f2:	2500      	movs	r5, #0
 80079f4:	4628      	mov	r0, r5
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	b118      	cbz	r0, 8007a02 <_fflush_r+0x1a>
 80079fa:	6a03      	ldr	r3, [r0, #32]
 80079fc:	b90b      	cbnz	r3, 8007a02 <_fflush_r+0x1a>
 80079fe:	f7fe f997 	bl	8005d30 <__sinit>
 8007a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0f3      	beq.n	80079f2 <_fflush_r+0xa>
 8007a0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a0c:	07d0      	lsls	r0, r2, #31
 8007a0e:	d404      	bmi.n	8007a1a <_fflush_r+0x32>
 8007a10:	0599      	lsls	r1, r3, #22
 8007a12:	d402      	bmi.n	8007a1a <_fflush_r+0x32>
 8007a14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a16:	f7fe fb50 	bl	80060ba <__retarget_lock_acquire_recursive>
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	f7ff ff5f 	bl	80078e0 <__sflush_r>
 8007a22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a24:	07da      	lsls	r2, r3, #31
 8007a26:	4605      	mov	r5, r0
 8007a28:	d4e4      	bmi.n	80079f4 <_fflush_r+0xc>
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	059b      	lsls	r3, r3, #22
 8007a2e:	d4e1      	bmi.n	80079f4 <_fflush_r+0xc>
 8007a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a32:	f7fe fb43 	bl	80060bc <__retarget_lock_release_recursive>
 8007a36:	e7dd      	b.n	80079f4 <_fflush_r+0xc>

08007a38 <__swhatbuf_r>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a40:	2900      	cmp	r1, #0
 8007a42:	b096      	sub	sp, #88	@ 0x58
 8007a44:	4615      	mov	r5, r2
 8007a46:	461e      	mov	r6, r3
 8007a48:	da0d      	bge.n	8007a66 <__swhatbuf_r+0x2e>
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a50:	f04f 0100 	mov.w	r1, #0
 8007a54:	bf14      	ite	ne
 8007a56:	2340      	movne	r3, #64	@ 0x40
 8007a58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	6031      	str	r1, [r6, #0]
 8007a60:	602b      	str	r3, [r5, #0]
 8007a62:	b016      	add	sp, #88	@ 0x58
 8007a64:	bd70      	pop	{r4, r5, r6, pc}
 8007a66:	466a      	mov	r2, sp
 8007a68:	f000 f8dc 	bl	8007c24 <_fstat_r>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	dbec      	blt.n	8007a4a <__swhatbuf_r+0x12>
 8007a70:	9901      	ldr	r1, [sp, #4]
 8007a72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a7a:	4259      	negs	r1, r3
 8007a7c:	4159      	adcs	r1, r3
 8007a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a82:	e7eb      	b.n	8007a5c <__swhatbuf_r+0x24>

08007a84 <__smakebuf_r>:
 8007a84:	898b      	ldrh	r3, [r1, #12]
 8007a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a88:	079d      	lsls	r5, r3, #30
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	d507      	bpl.n	8007aa0 <__smakebuf_r+0x1c>
 8007a90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	6123      	str	r3, [r4, #16]
 8007a98:	2301      	movs	r3, #1
 8007a9a:	6163      	str	r3, [r4, #20]
 8007a9c:	b003      	add	sp, #12
 8007a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa0:	ab01      	add	r3, sp, #4
 8007aa2:	466a      	mov	r2, sp
 8007aa4:	f7ff ffc8 	bl	8007a38 <__swhatbuf_r>
 8007aa8:	9f00      	ldr	r7, [sp, #0]
 8007aaa:	4605      	mov	r5, r0
 8007aac:	4639      	mov	r1, r7
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f7ff f9c6 	bl	8006e40 <_malloc_r>
 8007ab4:	b948      	cbnz	r0, 8007aca <__smakebuf_r+0x46>
 8007ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aba:	059a      	lsls	r2, r3, #22
 8007abc:	d4ee      	bmi.n	8007a9c <__smakebuf_r+0x18>
 8007abe:	f023 0303 	bic.w	r3, r3, #3
 8007ac2:	f043 0302 	orr.w	r3, r3, #2
 8007ac6:	81a3      	strh	r3, [r4, #12]
 8007ac8:	e7e2      	b.n	8007a90 <__smakebuf_r+0xc>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	6020      	str	r0, [r4, #0]
 8007ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	9b01      	ldr	r3, [sp, #4]
 8007ad6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ada:	b15b      	cbz	r3, 8007af4 <__smakebuf_r+0x70>
 8007adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f000 f8b1 	bl	8007c48 <_isatty_r>
 8007ae6:	b128      	cbz	r0, 8007af4 <__smakebuf_r+0x70>
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	f043 0301 	orr.w	r3, r3, #1
 8007af2:	81a3      	strh	r3, [r4, #12]
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	431d      	orrs	r5, r3
 8007af8:	81a5      	strh	r5, [r4, #12]
 8007afa:	e7cf      	b.n	8007a9c <__smakebuf_r+0x18>

08007afc <__swbuf_r>:
 8007afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afe:	460e      	mov	r6, r1
 8007b00:	4614      	mov	r4, r2
 8007b02:	4605      	mov	r5, r0
 8007b04:	b118      	cbz	r0, 8007b0e <__swbuf_r+0x12>
 8007b06:	6a03      	ldr	r3, [r0, #32]
 8007b08:	b90b      	cbnz	r3, 8007b0e <__swbuf_r+0x12>
 8007b0a:	f7fe f911 	bl	8005d30 <__sinit>
 8007b0e:	69a3      	ldr	r3, [r4, #24]
 8007b10:	60a3      	str	r3, [r4, #8]
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	071a      	lsls	r2, r3, #28
 8007b16:	d501      	bpl.n	8007b1c <__swbuf_r+0x20>
 8007b18:	6923      	ldr	r3, [r4, #16]
 8007b1a:	b943      	cbnz	r3, 8007b2e <__swbuf_r+0x32>
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 f82a 	bl	8007b78 <__swsetup_r>
 8007b24:	b118      	cbz	r0, 8007b2e <__swbuf_r+0x32>
 8007b26:	f04f 37ff 	mov.w	r7, #4294967295
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	6922      	ldr	r2, [r4, #16]
 8007b32:	1a98      	subs	r0, r3, r2
 8007b34:	6963      	ldr	r3, [r4, #20]
 8007b36:	b2f6      	uxtb	r6, r6
 8007b38:	4283      	cmp	r3, r0
 8007b3a:	4637      	mov	r7, r6
 8007b3c:	dc05      	bgt.n	8007b4a <__swbuf_r+0x4e>
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4628      	mov	r0, r5
 8007b42:	f7ff ff51 	bl	80079e8 <_fflush_r>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d1ed      	bne.n	8007b26 <__swbuf_r+0x2a>
 8007b4a:	68a3      	ldr	r3, [r4, #8]
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	60a3      	str	r3, [r4, #8]
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	1c5a      	adds	r2, r3, #1
 8007b54:	6022      	str	r2, [r4, #0]
 8007b56:	701e      	strb	r6, [r3, #0]
 8007b58:	6962      	ldr	r2, [r4, #20]
 8007b5a:	1c43      	adds	r3, r0, #1
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d004      	beq.n	8007b6a <__swbuf_r+0x6e>
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	07db      	lsls	r3, r3, #31
 8007b64:	d5e1      	bpl.n	8007b2a <__swbuf_r+0x2e>
 8007b66:	2e0a      	cmp	r6, #10
 8007b68:	d1df      	bne.n	8007b2a <__swbuf_r+0x2e>
 8007b6a:	4621      	mov	r1, r4
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	f7ff ff3b 	bl	80079e8 <_fflush_r>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d0d9      	beq.n	8007b2a <__swbuf_r+0x2e>
 8007b76:	e7d6      	b.n	8007b26 <__swbuf_r+0x2a>

08007b78 <__swsetup_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	4b29      	ldr	r3, [pc, #164]	@ (8007c20 <__swsetup_r+0xa8>)
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	6818      	ldr	r0, [r3, #0]
 8007b80:	460c      	mov	r4, r1
 8007b82:	b118      	cbz	r0, 8007b8c <__swsetup_r+0x14>
 8007b84:	6a03      	ldr	r3, [r0, #32]
 8007b86:	b90b      	cbnz	r3, 8007b8c <__swsetup_r+0x14>
 8007b88:	f7fe f8d2 	bl	8005d30 <__sinit>
 8007b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b90:	0719      	lsls	r1, r3, #28
 8007b92:	d422      	bmi.n	8007bda <__swsetup_r+0x62>
 8007b94:	06da      	lsls	r2, r3, #27
 8007b96:	d407      	bmi.n	8007ba8 <__swsetup_r+0x30>
 8007b98:	2209      	movs	r2, #9
 8007b9a:	602a      	str	r2, [r5, #0]
 8007b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ba0:	81a3      	strh	r3, [r4, #12]
 8007ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba6:	e033      	b.n	8007c10 <__swsetup_r+0x98>
 8007ba8:	0758      	lsls	r0, r3, #29
 8007baa:	d512      	bpl.n	8007bd2 <__swsetup_r+0x5a>
 8007bac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bae:	b141      	cbz	r1, 8007bc2 <__swsetup_r+0x4a>
 8007bb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bb4:	4299      	cmp	r1, r3
 8007bb6:	d002      	beq.n	8007bbe <__swsetup_r+0x46>
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f7ff f8cd 	bl	8006d58 <_free_r>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007bc8:	81a3      	strh	r3, [r4, #12]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	6063      	str	r3, [r4, #4]
 8007bce:	6923      	ldr	r3, [r4, #16]
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	f043 0308 	orr.w	r3, r3, #8
 8007bd8:	81a3      	strh	r3, [r4, #12]
 8007bda:	6923      	ldr	r3, [r4, #16]
 8007bdc:	b94b      	cbnz	r3, 8007bf2 <__swsetup_r+0x7a>
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007be8:	d003      	beq.n	8007bf2 <__swsetup_r+0x7a>
 8007bea:	4621      	mov	r1, r4
 8007bec:	4628      	mov	r0, r5
 8007bee:	f7ff ff49 	bl	8007a84 <__smakebuf_r>
 8007bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bf6:	f013 0201 	ands.w	r2, r3, #1
 8007bfa:	d00a      	beq.n	8007c12 <__swsetup_r+0x9a>
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	60a2      	str	r2, [r4, #8]
 8007c00:	6962      	ldr	r2, [r4, #20]
 8007c02:	4252      	negs	r2, r2
 8007c04:	61a2      	str	r2, [r4, #24]
 8007c06:	6922      	ldr	r2, [r4, #16]
 8007c08:	b942      	cbnz	r2, 8007c1c <__swsetup_r+0xa4>
 8007c0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c0e:	d1c5      	bne.n	8007b9c <__swsetup_r+0x24>
 8007c10:	bd38      	pop	{r3, r4, r5, pc}
 8007c12:	0799      	lsls	r1, r3, #30
 8007c14:	bf58      	it	pl
 8007c16:	6962      	ldrpl	r2, [r4, #20]
 8007c18:	60a2      	str	r2, [r4, #8]
 8007c1a:	e7f4      	b.n	8007c06 <__swsetup_r+0x8e>
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	e7f7      	b.n	8007c10 <__swsetup_r+0x98>
 8007c20:	20000038 	.word	0x20000038

08007c24 <_fstat_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4d07      	ldr	r5, [pc, #28]	@ (8007c44 <_fstat_r+0x20>)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	4611      	mov	r1, r2
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	f7f9 fd5d 	bl	80016f0 <_fstat>
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	d102      	bne.n	8007c40 <_fstat_r+0x1c>
 8007c3a:	682b      	ldr	r3, [r5, #0]
 8007c3c:	b103      	cbz	r3, 8007c40 <_fstat_r+0x1c>
 8007c3e:	6023      	str	r3, [r4, #0]
 8007c40:	bd38      	pop	{r3, r4, r5, pc}
 8007c42:	bf00      	nop
 8007c44:	200004f8 	.word	0x200004f8

08007c48 <_isatty_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4d06      	ldr	r5, [pc, #24]	@ (8007c64 <_isatty_r+0x1c>)
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4604      	mov	r4, r0
 8007c50:	4608      	mov	r0, r1
 8007c52:	602b      	str	r3, [r5, #0]
 8007c54:	f7f9 fd5c 	bl	8001710 <_isatty>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_isatty_r+0x1a>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_isatty_r+0x1a>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	200004f8 	.word	0x200004f8

08007c68 <_sbrk_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4d06      	ldr	r5, [pc, #24]	@ (8007c84 <_sbrk_r+0x1c>)
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4604      	mov	r4, r0
 8007c70:	4608      	mov	r0, r1
 8007c72:	602b      	str	r3, [r5, #0]
 8007c74:	f7f9 fd64 	bl	8001740 <_sbrk>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d102      	bne.n	8007c82 <_sbrk_r+0x1a>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	b103      	cbz	r3, 8007c82 <_sbrk_r+0x1a>
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	200004f8 	.word	0x200004f8

08007c88 <memcpy>:
 8007c88:	440a      	add	r2, r1
 8007c8a:	4291      	cmp	r1, r2
 8007c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c90:	d100      	bne.n	8007c94 <memcpy+0xc>
 8007c92:	4770      	bx	lr
 8007c94:	b510      	push	{r4, lr}
 8007c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c9e:	4291      	cmp	r1, r2
 8007ca0:	d1f9      	bne.n	8007c96 <memcpy+0xe>
 8007ca2:	bd10      	pop	{r4, pc}

08007ca4 <__assert_func>:
 8007ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ca6:	4614      	mov	r4, r2
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4b09      	ldr	r3, [pc, #36]	@ (8007cd0 <__assert_func+0x2c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4605      	mov	r5, r0
 8007cb0:	68d8      	ldr	r0, [r3, #12]
 8007cb2:	b954      	cbnz	r4, 8007cca <__assert_func+0x26>
 8007cb4:	4b07      	ldr	r3, [pc, #28]	@ (8007cd4 <__assert_func+0x30>)
 8007cb6:	461c      	mov	r4, r3
 8007cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007cbc:	9100      	str	r1, [sp, #0]
 8007cbe:	462b      	mov	r3, r5
 8007cc0:	4905      	ldr	r1, [pc, #20]	@ (8007cd8 <__assert_func+0x34>)
 8007cc2:	f000 f841 	bl	8007d48 <fiprintf>
 8007cc6:	f000 f851 	bl	8007d6c <abort>
 8007cca:	4b04      	ldr	r3, [pc, #16]	@ (8007cdc <__assert_func+0x38>)
 8007ccc:	e7f4      	b.n	8007cb8 <__assert_func+0x14>
 8007cce:	bf00      	nop
 8007cd0:	20000038 	.word	0x20000038
 8007cd4:	080080f6 	.word	0x080080f6
 8007cd8:	080080c8 	.word	0x080080c8
 8007cdc:	080080bb 	.word	0x080080bb

08007ce0 <_calloc_r>:
 8007ce0:	b570      	push	{r4, r5, r6, lr}
 8007ce2:	fba1 5402 	umull	r5, r4, r1, r2
 8007ce6:	b93c      	cbnz	r4, 8007cf8 <_calloc_r+0x18>
 8007ce8:	4629      	mov	r1, r5
 8007cea:	f7ff f8a9 	bl	8006e40 <_malloc_r>
 8007cee:	4606      	mov	r6, r0
 8007cf0:	b928      	cbnz	r0, 8007cfe <_calloc_r+0x1e>
 8007cf2:	2600      	movs	r6, #0
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}
 8007cf8:	220c      	movs	r2, #12
 8007cfa:	6002      	str	r2, [r0, #0]
 8007cfc:	e7f9      	b.n	8007cf2 <_calloc_r+0x12>
 8007cfe:	462a      	mov	r2, r5
 8007d00:	4621      	mov	r1, r4
 8007d02:	f7fe f95c 	bl	8005fbe <memset>
 8007d06:	e7f5      	b.n	8007cf4 <_calloc_r+0x14>

08007d08 <__ascii_mbtowc>:
 8007d08:	b082      	sub	sp, #8
 8007d0a:	b901      	cbnz	r1, 8007d0e <__ascii_mbtowc+0x6>
 8007d0c:	a901      	add	r1, sp, #4
 8007d0e:	b142      	cbz	r2, 8007d22 <__ascii_mbtowc+0x1a>
 8007d10:	b14b      	cbz	r3, 8007d26 <__ascii_mbtowc+0x1e>
 8007d12:	7813      	ldrb	r3, [r2, #0]
 8007d14:	600b      	str	r3, [r1, #0]
 8007d16:	7812      	ldrb	r2, [r2, #0]
 8007d18:	1e10      	subs	r0, r2, #0
 8007d1a:	bf18      	it	ne
 8007d1c:	2001      	movne	r0, #1
 8007d1e:	b002      	add	sp, #8
 8007d20:	4770      	bx	lr
 8007d22:	4610      	mov	r0, r2
 8007d24:	e7fb      	b.n	8007d1e <__ascii_mbtowc+0x16>
 8007d26:	f06f 0001 	mvn.w	r0, #1
 8007d2a:	e7f8      	b.n	8007d1e <__ascii_mbtowc+0x16>

08007d2c <__ascii_wctomb>:
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	4608      	mov	r0, r1
 8007d30:	b141      	cbz	r1, 8007d44 <__ascii_wctomb+0x18>
 8007d32:	2aff      	cmp	r2, #255	@ 0xff
 8007d34:	d904      	bls.n	8007d40 <__ascii_wctomb+0x14>
 8007d36:	228a      	movs	r2, #138	@ 0x8a
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3e:	4770      	bx	lr
 8007d40:	700a      	strb	r2, [r1, #0]
 8007d42:	2001      	movs	r0, #1
 8007d44:	4770      	bx	lr
	...

08007d48 <fiprintf>:
 8007d48:	b40e      	push	{r1, r2, r3}
 8007d4a:	b503      	push	{r0, r1, lr}
 8007d4c:	4601      	mov	r1, r0
 8007d4e:	ab03      	add	r3, sp, #12
 8007d50:	4805      	ldr	r0, [pc, #20]	@ (8007d68 <fiprintf+0x20>)
 8007d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d56:	6800      	ldr	r0, [r0, #0]
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	f7ff fca9 	bl	80076b0 <_vfiprintf_r>
 8007d5e:	b002      	add	sp, #8
 8007d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d64:	b003      	add	sp, #12
 8007d66:	4770      	bx	lr
 8007d68:	20000038 	.word	0x20000038

08007d6c <abort>:
 8007d6c:	b508      	push	{r3, lr}
 8007d6e:	2006      	movs	r0, #6
 8007d70:	f000 f82c 	bl	8007dcc <raise>
 8007d74:	2001      	movs	r0, #1
 8007d76:	f7f9 fc87 	bl	8001688 <_exit>

08007d7a <_raise_r>:
 8007d7a:	291f      	cmp	r1, #31
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4605      	mov	r5, r0
 8007d80:	460c      	mov	r4, r1
 8007d82:	d904      	bls.n	8007d8e <_raise_r+0x14>
 8007d84:	2316      	movs	r3, #22
 8007d86:	6003      	str	r3, [r0, #0]
 8007d88:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8c:	bd38      	pop	{r3, r4, r5, pc}
 8007d8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007d90:	b112      	cbz	r2, 8007d98 <_raise_r+0x1e>
 8007d92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d96:	b94b      	cbnz	r3, 8007dac <_raise_r+0x32>
 8007d98:	4628      	mov	r0, r5
 8007d9a:	f000 f831 	bl	8007e00 <_getpid_r>
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4601      	mov	r1, r0
 8007da2:	4628      	mov	r0, r5
 8007da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007da8:	f000 b818 	b.w	8007ddc <_kill_r>
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d00a      	beq.n	8007dc6 <_raise_r+0x4c>
 8007db0:	1c59      	adds	r1, r3, #1
 8007db2:	d103      	bne.n	8007dbc <_raise_r+0x42>
 8007db4:	2316      	movs	r3, #22
 8007db6:	6003      	str	r3, [r0, #0]
 8007db8:	2001      	movs	r0, #1
 8007dba:	e7e7      	b.n	8007d8c <_raise_r+0x12>
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	4798      	blx	r3
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	e7e0      	b.n	8007d8c <_raise_r+0x12>
	...

08007dcc <raise>:
 8007dcc:	4b02      	ldr	r3, [pc, #8]	@ (8007dd8 <raise+0xc>)
 8007dce:	4601      	mov	r1, r0
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	f7ff bfd2 	b.w	8007d7a <_raise_r>
 8007dd6:	bf00      	nop
 8007dd8:	20000038 	.word	0x20000038

08007ddc <_kill_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4d07      	ldr	r5, [pc, #28]	@ (8007dfc <_kill_r+0x20>)
 8007de0:	2300      	movs	r3, #0
 8007de2:	4604      	mov	r4, r0
 8007de4:	4608      	mov	r0, r1
 8007de6:	4611      	mov	r1, r2
 8007de8:	602b      	str	r3, [r5, #0]
 8007dea:	f7f9 fc3d 	bl	8001668 <_kill>
 8007dee:	1c43      	adds	r3, r0, #1
 8007df0:	d102      	bne.n	8007df8 <_kill_r+0x1c>
 8007df2:	682b      	ldr	r3, [r5, #0]
 8007df4:	b103      	cbz	r3, 8007df8 <_kill_r+0x1c>
 8007df6:	6023      	str	r3, [r4, #0]
 8007df8:	bd38      	pop	{r3, r4, r5, pc}
 8007dfa:	bf00      	nop
 8007dfc:	200004f8 	.word	0x200004f8

08007e00 <_getpid_r>:
 8007e00:	f7f9 bc2a 	b.w	8001658 <_getpid>

08007e04 <_init>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	bf00      	nop
 8007e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e0a:	bc08      	pop	{r3}
 8007e0c:	469e      	mov	lr, r3
 8007e0e:	4770      	bx	lr

08007e10 <_fini>:
 8007e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e12:	bf00      	nop
 8007e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e16:	bc08      	pop	{r3}
 8007e18:	469e      	mov	lr, r3
 8007e1a:	4770      	bx	lr
